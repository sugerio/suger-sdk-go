/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
)

// checks if the MeteringUsageRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MeteringUsageRecord{}

// MeteringUsageRecord struct for MeteringUsageRecord
type MeteringUsageRecord struct {
	// Key is the unique identifier of a billable metric.
	Key *string `json:"key,omitempty"`
	// Properties is the filters of a billable metric. It should be equal to the filters of the billable metric.
	Properties map[string]interface{} `json:"properties,omitempty"`
	// The quantity (or numeric value) of a billable metric.
	Quantity *float32 `json:"quantity,omitempty"`
}

// NewMeteringUsageRecord instantiates a new MeteringUsageRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeteringUsageRecord() *MeteringUsageRecord {
	this := MeteringUsageRecord{}
	return &this
}

// NewMeteringUsageRecordWithDefaults instantiates a new MeteringUsageRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMeteringUsageRecordWithDefaults() *MeteringUsageRecord {
	this := MeteringUsageRecord{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *MeteringUsageRecord) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecord) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *MeteringUsageRecord) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *MeteringUsageRecord) SetKey(v string) {
	o.Key = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *MeteringUsageRecord) GetProperties() map[string]interface{} {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]interface{}
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecord) GetPropertiesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Properties) {
		return map[string]interface{}{}, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *MeteringUsageRecord) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]interface{} and assigns it to the Properties field.
func (o *MeteringUsageRecord) SetProperties(v map[string]interface{}) {
	o.Properties = v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *MeteringUsageRecord) GetQuantity() float32 {
	if o == nil || IsNil(o.Quantity) {
		var ret float32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecord) GetQuantityOk() (*float32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *MeteringUsageRecord) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given float32 and assigns it to the Quantity field.
func (o *MeteringUsageRecord) SetQuantity(v float32) {
	o.Quantity = &v
}

func (o MeteringUsageRecord) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MeteringUsageRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	return toSerialize, nil
}

type NullableMeteringUsageRecord struct {
	value *MeteringUsageRecord
	isSet bool
}

func (v NullableMeteringUsageRecord) Get() *MeteringUsageRecord {
	return v.value
}

func (v *NullableMeteringUsageRecord) Set(val *MeteringUsageRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableMeteringUsageRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableMeteringUsageRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeteringUsageRecord(val *MeteringUsageRecord) *NullableMeteringUsageRecord {
	return &NullableMeteringUsageRecord{value: val, isSet: true}
}

func (v NullableMeteringUsageRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeteringUsageRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
