/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
	"fmt"
)

// BillingMinimumCommitScope the model 'BillingMinimumCommitScope'
type BillingMinimumCommitScope string

// List of BillingMinimumCommitScope
const (
	BillingMinimumCommitScope_UNKNOWN            BillingMinimumCommitScope = ""
	BillingMinimumCommitScope_DIMENSION          BillingMinimumCommitScope = "DIMENSION"
	BillingMinimumCommitScope_DIMENSION_GROUP_BY BillingMinimumCommitScope = "DIMENSION_GROUP_BY"
)

// All allowed values of BillingMinimumCommitScope enum
var AllowedBillingMinimumCommitScopeEnumValues = []BillingMinimumCommitScope{
	"",
	"DIMENSION",
	"DIMENSION_GROUP_BY",
}

func (v *BillingMinimumCommitScope) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BillingMinimumCommitScope(value)
	for _, existing := range AllowedBillingMinimumCommitScopeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BillingMinimumCommitScope", value)
}

// NewBillingMinimumCommitScopeFromValue returns a pointer to a valid BillingMinimumCommitScope
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBillingMinimumCommitScopeFromValue(v string) (*BillingMinimumCommitScope, error) {
	ev := BillingMinimumCommitScope(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BillingMinimumCommitScope: valid values are %v", v, AllowedBillingMinimumCommitScopeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BillingMinimumCommitScope) IsValid() bool {
	for _, existing := range AllowedBillingMinimumCommitScopeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BillingMinimumCommitScope value
func (v BillingMinimumCommitScope) Ptr() *BillingMinimumCommitScope {
	return &v
}

type NullableBillingMinimumCommitScope struct {
	value *BillingMinimumCommitScope
	isSet bool
}

func (v NullableBillingMinimumCommitScope) Get() *BillingMinimumCommitScope {
	return v.value
}

func (v *NullableBillingMinimumCommitScope) Set(val *BillingMinimumCommitScope) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingMinimumCommitScope) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingMinimumCommitScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingMinimumCommitScope(val *BillingMinimumCommitScope) *NullableBillingMinimumCommitScope {
	return &NullableBillingMinimumCommitScope{value: val, isSet: true}
}

func (v NullableBillingMinimumCommitScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingMinimumCommitScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
