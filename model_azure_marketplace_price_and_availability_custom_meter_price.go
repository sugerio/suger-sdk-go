/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
)

// checks if the AzureMarketplacePriceAndAvailabilityCustomMeterPrice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureMarketplacePriceAndAvailabilityCustomMeterPrice{}

// AzureMarketplacePriceAndAvailabilityCustomMeterPrice struct for AzureMarketplacePriceAndAvailabilityCustomMeterPrice
type AzureMarketplacePriceAndAvailabilityCustomMeterPrice struct {
	Meters *map[string]AzureMarketplacePriceAndAvailabilityCustomMeterPriceMeterItem `json:"meters,omitempty"`
	// default \"usd\"
	PriceInputOption *string `json:"priceInputOption,omitempty"`
}

// NewAzureMarketplacePriceAndAvailabilityCustomMeterPrice instantiates a new AzureMarketplacePriceAndAvailabilityCustomMeterPrice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureMarketplacePriceAndAvailabilityCustomMeterPrice() *AzureMarketplacePriceAndAvailabilityCustomMeterPrice {
	this := AzureMarketplacePriceAndAvailabilityCustomMeterPrice{}
	return &this
}

// NewAzureMarketplacePriceAndAvailabilityCustomMeterPriceWithDefaults instantiates a new AzureMarketplacePriceAndAvailabilityCustomMeterPrice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureMarketplacePriceAndAvailabilityCustomMeterPriceWithDefaults() *AzureMarketplacePriceAndAvailabilityCustomMeterPrice {
	this := AzureMarketplacePriceAndAvailabilityCustomMeterPrice{}
	return &this
}

// GetMeters returns the Meters field value if set, zero value otherwise.
func (o *AzureMarketplacePriceAndAvailabilityCustomMeterPrice) GetMeters() map[string]AzureMarketplacePriceAndAvailabilityCustomMeterPriceMeterItem {
	if o == nil || IsNil(o.Meters) {
		var ret map[string]AzureMarketplacePriceAndAvailabilityCustomMeterPriceMeterItem
		return ret
	}
	return *o.Meters
}

// GetMetersOk returns a tuple with the Meters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureMarketplacePriceAndAvailabilityCustomMeterPrice) GetMetersOk() (*map[string]AzureMarketplacePriceAndAvailabilityCustomMeterPriceMeterItem, bool) {
	if o == nil || IsNil(o.Meters) {
		return nil, false
	}
	return o.Meters, true
}

// HasMeters returns a boolean if a field has been set.
func (o *AzureMarketplacePriceAndAvailabilityCustomMeterPrice) HasMeters() bool {
	if o != nil && !IsNil(o.Meters) {
		return true
	}

	return false
}

// SetMeters gets a reference to the given map[string]AzureMarketplacePriceAndAvailabilityCustomMeterPriceMeterItem and assigns it to the Meters field.
func (o *AzureMarketplacePriceAndAvailabilityCustomMeterPrice) SetMeters(v map[string]AzureMarketplacePriceAndAvailabilityCustomMeterPriceMeterItem) {
	o.Meters = &v
}

// GetPriceInputOption returns the PriceInputOption field value if set, zero value otherwise.
func (o *AzureMarketplacePriceAndAvailabilityCustomMeterPrice) GetPriceInputOption() string {
	if o == nil || IsNil(o.PriceInputOption) {
		var ret string
		return ret
	}
	return *o.PriceInputOption
}

// GetPriceInputOptionOk returns a tuple with the PriceInputOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureMarketplacePriceAndAvailabilityCustomMeterPrice) GetPriceInputOptionOk() (*string, bool) {
	if o == nil || IsNil(o.PriceInputOption) {
		return nil, false
	}
	return o.PriceInputOption, true
}

// HasPriceInputOption returns a boolean if a field has been set.
func (o *AzureMarketplacePriceAndAvailabilityCustomMeterPrice) HasPriceInputOption() bool {
	if o != nil && !IsNil(o.PriceInputOption) {
		return true
	}

	return false
}

// SetPriceInputOption gets a reference to the given string and assigns it to the PriceInputOption field.
func (o *AzureMarketplacePriceAndAvailabilityCustomMeterPrice) SetPriceInputOption(v string) {
	o.PriceInputOption = &v
}

func (o AzureMarketplacePriceAndAvailabilityCustomMeterPrice) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureMarketplacePriceAndAvailabilityCustomMeterPrice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Meters) {
		toSerialize["meters"] = o.Meters
	}
	if !IsNil(o.PriceInputOption) {
		toSerialize["priceInputOption"] = o.PriceInputOption
	}
	return toSerialize, nil
}

type NullableAzureMarketplacePriceAndAvailabilityCustomMeterPrice struct {
	value *AzureMarketplacePriceAndAvailabilityCustomMeterPrice
	isSet bool
}

func (v NullableAzureMarketplacePriceAndAvailabilityCustomMeterPrice) Get() *AzureMarketplacePriceAndAvailabilityCustomMeterPrice {
	return v.value
}

func (v *NullableAzureMarketplacePriceAndAvailabilityCustomMeterPrice) Set(val *AzureMarketplacePriceAndAvailabilityCustomMeterPrice) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureMarketplacePriceAndAvailabilityCustomMeterPrice) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureMarketplacePriceAndAvailabilityCustomMeterPrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureMarketplacePriceAndAvailabilityCustomMeterPrice(val *AzureMarketplacePriceAndAvailabilityCustomMeterPrice) *NullableAzureMarketplacePriceAndAvailabilityCustomMeterPrice {
	return &NullableAzureMarketplacePriceAndAvailabilityCustomMeterPrice{value: val, isSet: true}
}

func (v NullableAzureMarketplacePriceAndAvailabilityCustomMeterPrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureMarketplacePriceAndAvailabilityCustomMeterPrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
