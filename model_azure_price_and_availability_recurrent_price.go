/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AzurePriceAndAvailabilityRecurrentPrice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzurePriceAndAvailabilityRecurrentPrice{}

// AzurePriceAndAvailabilityRecurrentPrice struct for AzurePriceAndAvailabilityRecurrentPrice
type AzurePriceAndAvailabilityRecurrentPrice struct {
	// default \"usd\"
	PriceInputOption *string `json:"priceInputOption,omitempty"`
	Prices []AzurePriceAndAvailabilityRecurrentPriceItem `json:"prices,omitempty"`
}

// NewAzurePriceAndAvailabilityRecurrentPrice instantiates a new AzurePriceAndAvailabilityRecurrentPrice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzurePriceAndAvailabilityRecurrentPrice() *AzurePriceAndAvailabilityRecurrentPrice {
	this := AzurePriceAndAvailabilityRecurrentPrice{}
	return &this
}

// NewAzurePriceAndAvailabilityRecurrentPriceWithDefaults instantiates a new AzurePriceAndAvailabilityRecurrentPrice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzurePriceAndAvailabilityRecurrentPriceWithDefaults() *AzurePriceAndAvailabilityRecurrentPrice {
	this := AzurePriceAndAvailabilityRecurrentPrice{}
	return &this
}

// GetPriceInputOption returns the PriceInputOption field value if set, zero value otherwise.
func (o *AzurePriceAndAvailabilityRecurrentPrice) GetPriceInputOption() string {
	if o == nil || IsNil(o.PriceInputOption) {
		var ret string
		return ret
	}
	return *o.PriceInputOption
}

// GetPriceInputOptionOk returns a tuple with the PriceInputOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzurePriceAndAvailabilityRecurrentPrice) GetPriceInputOptionOk() (*string, bool) {
	if o == nil || IsNil(o.PriceInputOption) {
		return nil, false
	}
	return o.PriceInputOption, true
}

// HasPriceInputOption returns a boolean if a field has been set.
func (o *AzurePriceAndAvailabilityRecurrentPrice) HasPriceInputOption() bool {
	if o != nil && !IsNil(o.PriceInputOption) {
		return true
	}

	return false
}

// SetPriceInputOption gets a reference to the given string and assigns it to the PriceInputOption field.
func (o *AzurePriceAndAvailabilityRecurrentPrice) SetPriceInputOption(v string) {
	o.PriceInputOption = &v
}

// GetPrices returns the Prices field value if set, zero value otherwise.
func (o *AzurePriceAndAvailabilityRecurrentPrice) GetPrices() []AzurePriceAndAvailabilityRecurrentPriceItem {
	if o == nil || IsNil(o.Prices) {
		var ret []AzurePriceAndAvailabilityRecurrentPriceItem
		return ret
	}
	return o.Prices
}

// GetPricesOk returns a tuple with the Prices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzurePriceAndAvailabilityRecurrentPrice) GetPricesOk() ([]AzurePriceAndAvailabilityRecurrentPriceItem, bool) {
	if o == nil || IsNil(o.Prices) {
		return nil, false
	}
	return o.Prices, true
}

// HasPrices returns a boolean if a field has been set.
func (o *AzurePriceAndAvailabilityRecurrentPrice) HasPrices() bool {
	if o != nil && !IsNil(o.Prices) {
		return true
	}

	return false
}

// SetPrices gets a reference to the given []AzurePriceAndAvailabilityRecurrentPriceItem and assigns it to the Prices field.
func (o *AzurePriceAndAvailabilityRecurrentPrice) SetPrices(v []AzurePriceAndAvailabilityRecurrentPriceItem) {
	o.Prices = v
}

func (o AzurePriceAndAvailabilityRecurrentPrice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzurePriceAndAvailabilityRecurrentPrice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PriceInputOption) {
		toSerialize["priceInputOption"] = o.PriceInputOption
	}
	if !IsNil(o.Prices) {
		toSerialize["prices"] = o.Prices
	}
	return toSerialize, nil
}

type NullableAzurePriceAndAvailabilityRecurrentPrice struct {
	value *AzurePriceAndAvailabilityRecurrentPrice
	isSet bool
}

func (v NullableAzurePriceAndAvailabilityRecurrentPrice) Get() *AzurePriceAndAvailabilityRecurrentPrice {
	return v.value
}

func (v *NullableAzurePriceAndAvailabilityRecurrentPrice) Set(val *AzurePriceAndAvailabilityRecurrentPrice) {
	v.value = val
	v.isSet = true
}

func (v NullableAzurePriceAndAvailabilityRecurrentPrice) IsSet() bool {
	return v.isSet
}

func (v *NullableAzurePriceAndAvailabilityRecurrentPrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzurePriceAndAvailabilityRecurrentPrice(val *AzurePriceAndAvailabilityRecurrentPrice) *NullableAzurePriceAndAvailabilityRecurrentPrice {
	return &NullableAzurePriceAndAvailabilityRecurrentPrice{value: val, isSet: true}
}

func (v NullableAzurePriceAndAvailabilityRecurrentPrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzurePriceAndAvailabilityRecurrentPrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


