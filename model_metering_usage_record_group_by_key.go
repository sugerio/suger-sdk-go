/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MeteringUsageRecordGroupByKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MeteringUsageRecordGroupByKey{}

// MeteringUsageRecordGroupByKey struct for MeteringUsageRecordGroupByKey
type MeteringUsageRecordGroupByKey struct {
	// GroupBysExpression is string expression of array of group bys.
	GroupBysExpression *string `json:"groupBysExpression,omitempty"`
	// ID is billableMetric ID (Key)
	Id *string `json:"id,omitempty"`
}

// NewMeteringUsageRecordGroupByKey instantiates a new MeteringUsageRecordGroupByKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeteringUsageRecordGroupByKey() *MeteringUsageRecordGroupByKey {
	this := MeteringUsageRecordGroupByKey{}
	return &this
}

// NewMeteringUsageRecordGroupByKeyWithDefaults instantiates a new MeteringUsageRecordGroupByKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMeteringUsageRecordGroupByKeyWithDefaults() *MeteringUsageRecordGroupByKey {
	this := MeteringUsageRecordGroupByKey{}
	return &this
}

// GetGroupBysExpression returns the GroupBysExpression field value if set, zero value otherwise.
func (o *MeteringUsageRecordGroupByKey) GetGroupBysExpression() string {
	if o == nil || IsNil(o.GroupBysExpression) {
		var ret string
		return ret
	}
	return *o.GroupBysExpression
}

// GetGroupBysExpressionOk returns a tuple with the GroupBysExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordGroupByKey) GetGroupBysExpressionOk() (*string, bool) {
	if o == nil || IsNil(o.GroupBysExpression) {
		return nil, false
	}
	return o.GroupBysExpression, true
}

// HasGroupBysExpression returns a boolean if a field has been set.
func (o *MeteringUsageRecordGroupByKey) HasGroupBysExpression() bool {
	if o != nil && !IsNil(o.GroupBysExpression) {
		return true
	}

	return false
}

// SetGroupBysExpression gets a reference to the given string and assigns it to the GroupBysExpression field.
func (o *MeteringUsageRecordGroupByKey) SetGroupBysExpression(v string) {
	o.GroupBysExpression = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MeteringUsageRecordGroupByKey) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordGroupByKey) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MeteringUsageRecordGroupByKey) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MeteringUsageRecordGroupByKey) SetId(v string) {
	o.Id = &v
}

func (o MeteringUsageRecordGroupByKey) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MeteringUsageRecordGroupByKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GroupBysExpression) {
		toSerialize["groupBysExpression"] = o.GroupBysExpression
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	return toSerialize, nil
}

type NullableMeteringUsageRecordGroupByKey struct {
	value *MeteringUsageRecordGroupByKey
	isSet bool
}

func (v NullableMeteringUsageRecordGroupByKey) Get() *MeteringUsageRecordGroupByKey {
	return v.value
}

func (v *NullableMeteringUsageRecordGroupByKey) Set(val *MeteringUsageRecordGroupByKey) {
	v.value = val
	v.isSet = true
}

func (v NullableMeteringUsageRecordGroupByKey) IsSet() bool {
	return v.isSet
}

func (v *NullableMeteringUsageRecordGroupByKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeteringUsageRecordGroupByKey(val *MeteringUsageRecordGroupByKey) *NullableMeteringUsageRecordGroupByKey {
	return &NullableMeteringUsageRecordGroupByKey{value: val, isSet: true}
}

func (v NullableMeteringUsageRecordGroupByKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeteringUsageRecordGroupByKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
