/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
)

// checks if the AwsMarketplaceCatalogPricingTermRateCard type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsMarketplaceCatalogPricingTermRateCard{}

// AwsMarketplaceCatalogPricingTermRateCard struct for AwsMarketplaceCatalogPricingTermRateCard
type AwsMarketplaceCatalogPricingTermRateCard struct {
	// Defines constraints on how the term can be configured by acceptors. Applicable only to ConfigurableUpfrontPricingTerm.
	Constraints *AwsMarketplaceCatalogPricingTermRateCardConstraints `json:"Constraints,omitempty"`
	RateCard    []AwsMarketplaceCatalogPricingTermRateCardItem       `json:"RateCard,omitempty"`
	// Selector is used to differentiate between the mutually exclusive rate cards in the same pricing term, to be selected by the buyer. Applicable only to ConfigurableUpfrontPricingTerm.
	Selector *AwsMarketplaceCatalogPricingTermRateCardSelector `json:"Selector,omitempty"`
}

// NewAwsMarketplaceCatalogPricingTermRateCard instantiates a new AwsMarketplaceCatalogPricingTermRateCard object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsMarketplaceCatalogPricingTermRateCard() *AwsMarketplaceCatalogPricingTermRateCard {
	this := AwsMarketplaceCatalogPricingTermRateCard{}
	return &this
}

// NewAwsMarketplaceCatalogPricingTermRateCardWithDefaults instantiates a new AwsMarketplaceCatalogPricingTermRateCard object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsMarketplaceCatalogPricingTermRateCardWithDefaults() *AwsMarketplaceCatalogPricingTermRateCard {
	this := AwsMarketplaceCatalogPricingTermRateCard{}
	return &this
}

// GetConstraints returns the Constraints field value if set, zero value otherwise.
func (o *AwsMarketplaceCatalogPricingTermRateCard) GetConstraints() AwsMarketplaceCatalogPricingTermRateCardConstraints {
	if o == nil || IsNil(o.Constraints) {
		var ret AwsMarketplaceCatalogPricingTermRateCardConstraints
		return ret
	}
	return *o.Constraints
}

// GetConstraintsOk returns a tuple with the Constraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsMarketplaceCatalogPricingTermRateCard) GetConstraintsOk() (*AwsMarketplaceCatalogPricingTermRateCardConstraints, bool) {
	if o == nil || IsNil(o.Constraints) {
		return nil, false
	}
	return o.Constraints, true
}

// HasConstraints returns a boolean if a field has been set.
func (o *AwsMarketplaceCatalogPricingTermRateCard) HasConstraints() bool {
	if o != nil && !IsNil(o.Constraints) {
		return true
	}

	return false
}

// SetConstraints gets a reference to the given AwsMarketplaceCatalogPricingTermRateCardConstraints and assigns it to the Constraints field.
func (o *AwsMarketplaceCatalogPricingTermRateCard) SetConstraints(v AwsMarketplaceCatalogPricingTermRateCardConstraints) {
	o.Constraints = &v
}

// GetRateCard returns the RateCard field value if set, zero value otherwise.
func (o *AwsMarketplaceCatalogPricingTermRateCard) GetRateCard() []AwsMarketplaceCatalogPricingTermRateCardItem {
	if o == nil || IsNil(o.RateCard) {
		var ret []AwsMarketplaceCatalogPricingTermRateCardItem
		return ret
	}
	return o.RateCard
}

// GetRateCardOk returns a tuple with the RateCard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsMarketplaceCatalogPricingTermRateCard) GetRateCardOk() ([]AwsMarketplaceCatalogPricingTermRateCardItem, bool) {
	if o == nil || IsNil(o.RateCard) {
		return nil, false
	}
	return o.RateCard, true
}

// HasRateCard returns a boolean if a field has been set.
func (o *AwsMarketplaceCatalogPricingTermRateCard) HasRateCard() bool {
	if o != nil && !IsNil(o.RateCard) {
		return true
	}

	return false
}

// SetRateCard gets a reference to the given []AwsMarketplaceCatalogPricingTermRateCardItem and assigns it to the RateCard field.
func (o *AwsMarketplaceCatalogPricingTermRateCard) SetRateCard(v []AwsMarketplaceCatalogPricingTermRateCardItem) {
	o.RateCard = v
}

// GetSelector returns the Selector field value if set, zero value otherwise.
func (o *AwsMarketplaceCatalogPricingTermRateCard) GetSelector() AwsMarketplaceCatalogPricingTermRateCardSelector {
	if o == nil || IsNil(o.Selector) {
		var ret AwsMarketplaceCatalogPricingTermRateCardSelector
		return ret
	}
	return *o.Selector
}

// GetSelectorOk returns a tuple with the Selector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsMarketplaceCatalogPricingTermRateCard) GetSelectorOk() (*AwsMarketplaceCatalogPricingTermRateCardSelector, bool) {
	if o == nil || IsNil(o.Selector) {
		return nil, false
	}
	return o.Selector, true
}

// HasSelector returns a boolean if a field has been set.
func (o *AwsMarketplaceCatalogPricingTermRateCard) HasSelector() bool {
	if o != nil && !IsNil(o.Selector) {
		return true
	}

	return false
}

// SetSelector gets a reference to the given AwsMarketplaceCatalogPricingTermRateCardSelector and assigns it to the Selector field.
func (o *AwsMarketplaceCatalogPricingTermRateCard) SetSelector(v AwsMarketplaceCatalogPricingTermRateCardSelector) {
	o.Selector = &v
}

func (o AwsMarketplaceCatalogPricingTermRateCard) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsMarketplaceCatalogPricingTermRateCard) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Constraints) {
		toSerialize["Constraints"] = o.Constraints
	}
	if !IsNil(o.RateCard) {
		toSerialize["RateCard"] = o.RateCard
	}
	if !IsNil(o.Selector) {
		toSerialize["Selector"] = o.Selector
	}
	return toSerialize, nil
}

type NullableAwsMarketplaceCatalogPricingTermRateCard struct {
	value *AwsMarketplaceCatalogPricingTermRateCard
	isSet bool
}

func (v NullableAwsMarketplaceCatalogPricingTermRateCard) Get() *AwsMarketplaceCatalogPricingTermRateCard {
	return v.value
}

func (v *NullableAwsMarketplaceCatalogPricingTermRateCard) Set(val *AwsMarketplaceCatalogPricingTermRateCard) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsMarketplaceCatalogPricingTermRateCard) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsMarketplaceCatalogPricingTermRateCard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsMarketplaceCatalogPricingTermRateCard(val *AwsMarketplaceCatalogPricingTermRateCard) *NullableAwsMarketplaceCatalogPricingTermRateCard {
	return &NullableAwsMarketplaceCatalogPricingTermRateCard{value: val, isSet: true}
}

func (v NullableAwsMarketplaceCatalogPricingTermRateCard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsMarketplaceCatalogPricingTermRateCard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
