/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
	"fmt"
)

// GcpPeriodDurationUnit the model 'GcpPeriodDurationUnit'
type GcpPeriodDurationUnit string

// List of GcpPeriodDurationUnit
const (
	GcpPeriodDurationUnit_MONTHLY_PERIOD GcpPeriodDurationUnit = "MONTHLY_PERIOD"
	GcpPeriodDurationUnit_YEARLY_PERIOD  GcpPeriodDurationUnit = "YEARLY_PERIOD"
)

// All allowed values of GcpPeriodDurationUnit enum
var AllowedGcpPeriodDurationUnitEnumValues = []GcpPeriodDurationUnit{
	"MONTHLY_PERIOD",
	"YEARLY_PERIOD",
}

func (v *GcpPeriodDurationUnit) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GcpPeriodDurationUnit(value)
	for _, existing := range AllowedGcpPeriodDurationUnitEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GcpPeriodDurationUnit", value)
}

// NewGcpPeriodDurationUnitFromValue returns a pointer to a valid GcpPeriodDurationUnit
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGcpPeriodDurationUnitFromValue(v string) (*GcpPeriodDurationUnit, error) {
	ev := GcpPeriodDurationUnit(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GcpPeriodDurationUnit: valid values are %v", v, AllowedGcpPeriodDurationUnitEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GcpPeriodDurationUnit) IsValid() bool {
	for _, existing := range AllowedGcpPeriodDurationUnitEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GcpPeriodDurationUnit value
func (v GcpPeriodDurationUnit) Ptr() *GcpPeriodDurationUnit {
	return &v
}

type NullableGcpPeriodDurationUnit struct {
	value *GcpPeriodDurationUnit
	isSet bool
}

func (v NullableGcpPeriodDurationUnit) Get() *GcpPeriodDurationUnit {
	return v.value
}

func (v *NullableGcpPeriodDurationUnit) Set(val *GcpPeriodDurationUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableGcpPeriodDurationUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableGcpPeriodDurationUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGcpPeriodDurationUnit(val *GcpPeriodDurationUnit) *NullableGcpPeriodDurationUnit {
	return &NullableGcpPeriodDurationUnit{value: val, isSet: true}
}

func (v NullableGcpPeriodDurationUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGcpPeriodDurationUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
