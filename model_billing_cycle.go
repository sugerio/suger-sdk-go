/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
	"fmt"
)

// BillingCycle the model 'BillingCycle'
type BillingCycle string

// List of BillingCycle
const (
	BillingCycle_MonthFirstDay        BillingCycle = "MONTH_FIRST_DAY"
	BillingCycle_EntitlementStartDate BillingCycle = "ENTITLEMENT_START_DATE"
)

// All allowed values of BillingCycle enum
var AllowedBillingCycleEnumValues = []BillingCycle{
	"MONTH_FIRST_DAY",
	"ENTITLEMENT_START_DATE",
}

func (v *BillingCycle) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BillingCycle(value)
	for _, existing := range AllowedBillingCycleEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BillingCycle", value)
}

// NewBillingCycleFromValue returns a pointer to a valid BillingCycle
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBillingCycleFromValue(v string) (*BillingCycle, error) {
	ev := BillingCycle(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BillingCycle: valid values are %v", v, AllowedBillingCycleEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BillingCycle) IsValid() bool {
	for _, existing := range AllowedBillingCycleEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BillingCycle value
func (v BillingCycle) Ptr() *BillingCycle {
	return &v
}

type NullableBillingCycle struct {
	value *BillingCycle
	isSet bool
}

func (v NullableBillingCycle) Get() *BillingCycle {
	return v.value
}

func (v *NullableBillingCycle) Set(val *BillingCycle) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingCycle) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingCycle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingCycle(val *BillingCycle) *NullableBillingCycle {
	return &NullableBillingCycle{value: val, isSet: true}
}

func (v NullableBillingCycle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingCycle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
