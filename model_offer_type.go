/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
	"fmt"
)

// OfferType the model 'OfferType'
type OfferType string

// List of OfferType
const (
	OfferType_UNKNOWN                OfferType = "UNKNOWN"
	OfferType_AMI                    OfferType = "AMI"
	OfferType_CONTAINER              OfferType = "CONTAINER"
	OfferType_CONTRACT               OfferType = "CONTRACT"
	OfferType_CPPO_OUT               OfferType = "CPPO_OUT"
	OfferType_CPPO_IN                OfferType = "CPPO_IN"
	OfferType_CPPO                   OfferType = "CPPO"
	OfferType_CUD                    OfferType = "CUD"
	OfferType_DEFAULT                OfferType = "DEFAULT"
	OfferType_FIXED_FEE              OfferType = "FIXED_FEE"
	OfferType_FIXED_FEE_WITH_OVERAGE OfferType = "FIXED_FEE_WITH_OVERAGE"
	OfferType_FLAT_RATE              OfferType = "FLAT_RATE"
	OfferType_FREE_TRIAL             OfferType = "FREE_TRIAL"
	OfferType_PAYG                   OfferType = "PAYG"
	OfferType_PAYG_WITH_CUD          OfferType = "PAYG_WITH_CUD"
	OfferType_PER_USER               OfferType = "PER_USER"
	OfferType_PRIVATE                OfferType = "PRIVATE"
	OfferType_PROFESSIONAL_SERVICES  OfferType = "PROFESSIONAL_SERVICES"
	OfferType_SUBSCRIPTION           OfferType = "SUBSCRIPTION"
)

// All allowed values of OfferType enum
var AllowedOfferTypeEnumValues = []OfferType{
	"UNKNOWN",
	"AMI",
	"CONTAINER",
	"CONTRACT",
	"CPPO_OUT",
	"CPPO_IN",
	"CPPO",
	"CUD",
	"DEFAULT",
	"FIXED_FEE",
	"FIXED_FEE_WITH_OVERAGE",
	"FLAT_RATE",
	"FREE_TRIAL",
	"PAYG",
	"PAYG_WITH_CUD",
	"PER_USER",
	"PRIVATE",
	"PROFESSIONAL_SERVICES",
	"SUBSCRIPTION",
}

func (v *OfferType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OfferType(value)
	for _, existing := range AllowedOfferTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OfferType", value)
}

// NewOfferTypeFromValue returns a pointer to a valid OfferType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOfferTypeFromValue(v string) (*OfferType, error) {
	ev := OfferType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OfferType: valid values are %v", v, AllowedOfferTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OfferType) IsValid() bool {
	for _, existing := range AllowedOfferTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OfferType value
func (v OfferType) Ptr() *OfferType {
	return &v
}

type NullableOfferType struct {
	value *OfferType
	isSet bool
}

func (v NullableOfferType) Get() *OfferType {
	return v.value
}

func (v *NullableOfferType) Set(val *OfferType) {
	v.value = val
	v.isSet = true
}

func (v NullableOfferType) IsSet() bool {
	return v.isSet
}

func (v *NullableOfferType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOfferType(val *OfferType) *NullableOfferType {
	return &NullableOfferType{value: val, isSet: true}
}

func (v NullableOfferType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOfferType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
