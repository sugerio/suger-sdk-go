/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
)

// checks if the PriceModelBulk type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PriceModelBulk{}

// PriceModelBulk struct for PriceModelBulk
type PriceModelBulk struct {
	// A currency amount to rate usage by
	BulkAmount *float32 `json:"bulkAmount,omitempty"`
	// An integer amount to represent package size. For example, 1000 here would divide usage by 1000 before multiplying by package_amount in rating
	BulkSize *int32 `json:"bulkSize,omitempty"`
}

// NewPriceModelBulk instantiates a new PriceModelBulk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPriceModelBulk() *PriceModelBulk {
	this := PriceModelBulk{}
	return &this
}

// NewPriceModelBulkWithDefaults instantiates a new PriceModelBulk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPriceModelBulkWithDefaults() *PriceModelBulk {
	this := PriceModelBulk{}
	return &this
}

// GetBulkAmount returns the BulkAmount field value if set, zero value otherwise.
func (o *PriceModelBulk) GetBulkAmount() float32 {
	if o == nil || IsNil(o.BulkAmount) {
		var ret float32
		return ret
	}
	return *o.BulkAmount
}

// GetBulkAmountOk returns a tuple with the BulkAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceModelBulk) GetBulkAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.BulkAmount) {
		return nil, false
	}
	return o.BulkAmount, true
}

// HasBulkAmount returns a boolean if a field has been set.
func (o *PriceModelBulk) HasBulkAmount() bool {
	if o != nil && !IsNil(o.BulkAmount) {
		return true
	}

	return false
}

// SetBulkAmount gets a reference to the given float32 and assigns it to the BulkAmount field.
func (o *PriceModelBulk) SetBulkAmount(v float32) {
	o.BulkAmount = &v
}

// GetBulkSize returns the BulkSize field value if set, zero value otherwise.
func (o *PriceModelBulk) GetBulkSize() int32 {
	if o == nil || IsNil(o.BulkSize) {
		var ret int32
		return ret
	}
	return *o.BulkSize
}

// GetBulkSizeOk returns a tuple with the BulkSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceModelBulk) GetBulkSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.BulkSize) {
		return nil, false
	}
	return o.BulkSize, true
}

// HasBulkSize returns a boolean if a field has been set.
func (o *PriceModelBulk) HasBulkSize() bool {
	if o != nil && !IsNil(o.BulkSize) {
		return true
	}

	return false
}

// SetBulkSize gets a reference to the given int32 and assigns it to the BulkSize field.
func (o *PriceModelBulk) SetBulkSize(v int32) {
	o.BulkSize = &v
}

func (o PriceModelBulk) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PriceModelBulk) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BulkAmount) {
		toSerialize["bulkAmount"] = o.BulkAmount
	}
	if !IsNil(o.BulkSize) {
		toSerialize["bulkSize"] = o.BulkSize
	}
	return toSerialize, nil
}

type NullablePriceModelBulk struct {
	value *PriceModelBulk
	isSet bool
}

func (v NullablePriceModelBulk) Get() *PriceModelBulk {
	return v.value
}

func (v *NullablePriceModelBulk) Set(val *PriceModelBulk) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceModelBulk) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceModelBulk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceModelBulk(val *PriceModelBulk) *NullablePriceModelBulk {
	return &NullablePriceModelBulk{value: val, isSet: true}
}

func (v NullablePriceModelBulk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceModelBulk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
