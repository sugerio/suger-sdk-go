/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
	"fmt"
)

// BillableMetricFilterOperation the model 'BillableMetricFilterOperation'
type BillableMetricFilterOperation string

// List of BillableMetricFilterOperation
const (
	BillableMetricFilterOperation_IS           BillableMetricFilterOperation = "IS"
	BillableMetricFilterOperation_NOT_IS       BillableMetricFilterOperation = "NOT_IS"
	BillableMetricFilterOperation_CONTAINS     BillableMetricFilterOperation = "CONTAINS"
	BillableMetricFilterOperation_NOT_CONTAINS BillableMetricFilterOperation = "NOT_CONTAINS"
	BillableMetricFilterOperation_GT           BillableMetricFilterOperation = "GT"
	BillableMetricFilterOperation_GTE          BillableMetricFilterOperation = "GTE"
	BillableMetricFilterOperation_LT           BillableMetricFilterOperation = "LT"
	BillableMetricFilterOperation_LTE          BillableMetricFilterOperation = "LTE"
	BillableMetricFilterOperation_EQ           BillableMetricFilterOperation = "EQ"
	BillableMetricFilterOperation_NEQ          BillableMetricFilterOperation = "NOT_EQ"
	BillableMetricFilterOperation_EXISTS       BillableMetricFilterOperation = "EXISTS"
	BillableMetricFilterOperation_NOT_EXISTS   BillableMetricFilterOperation = "NOT_EXISTS"
)

// All allowed values of BillableMetricFilterOperation enum
var AllowedBillableMetricFilterOperationEnumValues = []BillableMetricFilterOperation{
	"IS",
	"NOT_IS",
	"CONTAINS",
	"NOT_CONTAINS",
	"GT",
	"GTE",
	"LT",
	"LTE",
	"EQ",
	"NOT_EQ",
	"EXISTS",
	"NOT_EXISTS",
}

func (v *BillableMetricFilterOperation) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BillableMetricFilterOperation(value)
	for _, existing := range AllowedBillableMetricFilterOperationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BillableMetricFilterOperation", value)
}

// NewBillableMetricFilterOperationFromValue returns a pointer to a valid BillableMetricFilterOperation
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBillableMetricFilterOperationFromValue(v string) (*BillableMetricFilterOperation, error) {
	ev := BillableMetricFilterOperation(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BillableMetricFilterOperation: valid values are %v", v, AllowedBillableMetricFilterOperationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BillableMetricFilterOperation) IsValid() bool {
	for _, existing := range AllowedBillableMetricFilterOperationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BillableMetricFilterOperation value
func (v BillableMetricFilterOperation) Ptr() *BillableMetricFilterOperation {
	return &v
}

type NullableBillableMetricFilterOperation struct {
	value *BillableMetricFilterOperation
	isSet bool
}

func (v NullableBillableMetricFilterOperation) Get() *BillableMetricFilterOperation {
	return v.value
}

func (v *NullableBillableMetricFilterOperation) Set(val *BillableMetricFilterOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableBillableMetricFilterOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableBillableMetricFilterOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillableMetricFilterOperation(val *BillableMetricFilterOperation) *NullableBillableMetricFilterOperation {
	return &NullableBillableMetricFilterOperation{value: val, isSet: true}
}

func (v NullableBillableMetricFilterOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillableMetricFilterOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
