/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// BillableMetricAggregationType the model 'BillableMetricAggregationType'
type BillableMetricAggregationType string

// List of BillableMetricAggregationType
const (
	BillableMetricAggregationType_COUNT        BillableMetricAggregationType = "COUNT"
	BillableMetricAggregationType_UNIQUE_COUNT BillableMetricAggregationType = "UNIQUE_COUNT"
	BillableMetricAggregationType_SUM          BillableMetricAggregationType = "SUM"
	BillableMetricAggregationType_MAX          BillableMetricAggregationType = "MAX"
	BillableMetricAggregationType_LAST         BillableMetricAggregationType = "LAST"
)

// All allowed values of BillableMetricAggregationType enum
var AllowedBillableMetricAggregationTypeEnumValues = []BillableMetricAggregationType{
	"COUNT",
	"UNIQUE_COUNT",
	"SUM",
	"MAX",
	"LAST",
}

func (v *BillableMetricAggregationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BillableMetricAggregationType(value)
	for _, existing := range AllowedBillableMetricAggregationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BillableMetricAggregationType", value)
}

// NewBillableMetricAggregationTypeFromValue returns a pointer to a valid BillableMetricAggregationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBillableMetricAggregationTypeFromValue(v string) (*BillableMetricAggregationType, error) {
	ev := BillableMetricAggregationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BillableMetricAggregationType: valid values are %v", v, AllowedBillableMetricAggregationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BillableMetricAggregationType) IsValid() bool {
	for _, existing := range AllowedBillableMetricAggregationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BillableMetricAggregationType value
func (v BillableMetricAggregationType) Ptr() *BillableMetricAggregationType {
	return &v
}

type NullableBillableMetricAggregationType struct {
	value *BillableMetricAggregationType
	isSet bool
}

func (v NullableBillableMetricAggregationType) Get() *BillableMetricAggregationType {
	return v.value
}

func (v *NullableBillableMetricAggregationType) Set(val *BillableMetricAggregationType) {
	v.value = val
	v.isSet = true
}

func (v NullableBillableMetricAggregationType) IsSet() bool {
	return v.isSet
}

func (v *NullableBillableMetricAggregationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillableMetricAggregationType(val *BillableMetricAggregationType) *NullableBillableMetricAggregationType {
	return &NullableBillableMetricAggregationType{value: val, isSet: true}
}

func (v NullableBillableMetricAggregationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillableMetricAggregationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
