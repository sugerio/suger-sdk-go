/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OrbBillableMetricStatus the model 'OrbBillableMetricStatus'
type OrbBillableMetricStatus string

// List of OrbBillableMetricStatus
const (
	OrbBillableMetricStatus_ACTIVE OrbBillableMetricStatus = "active"
	OrbBillableMetricStatus_DRAFT OrbBillableMetricStatus = "draft"
	OrbBillableMetricStatus_ARCHIVED OrbBillableMetricStatus = "archived"
)

// All allowed values of OrbBillableMetricStatus enum
var AllowedOrbBillableMetricStatusEnumValues = []OrbBillableMetricStatus{
	"active",
	"draft",
	"archived",
}

func (v *OrbBillableMetricStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrbBillableMetricStatus(value)
	for _, existing := range AllowedOrbBillableMetricStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrbBillableMetricStatus", value)
}

// NewOrbBillableMetricStatusFromValue returns a pointer to a valid OrbBillableMetricStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrbBillableMetricStatusFromValue(v string) (*OrbBillableMetricStatus, error) {
	ev := OrbBillableMetricStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrbBillableMetricStatus: valid values are %v", v, AllowedOrbBillableMetricStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrbBillableMetricStatus) IsValid() bool {
	for _, existing := range AllowedOrbBillableMetricStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrbBillableMetricStatus value
func (v OrbBillableMetricStatus) Ptr() *OrbBillableMetricStatus {
	return &v
}

type NullableOrbBillableMetricStatus struct {
	value *OrbBillableMetricStatus
	isSet bool
}

func (v NullableOrbBillableMetricStatus) Get() *OrbBillableMetricStatus {
	return v.value
}

func (v *NullableOrbBillableMetricStatus) Set(val *OrbBillableMetricStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableOrbBillableMetricStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableOrbBillableMetricStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrbBillableMetricStatus(val *OrbBillableMetricStatus) *NullableOrbBillableMetricStatus {
	return &NullableOrbBillableMetricStatus{value: val, isSet: true}
}

func (v NullableOrbBillableMetricStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrbBillableMetricStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

