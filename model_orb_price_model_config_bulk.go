/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OrbPriceModelConfigBULK type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrbPriceModelConfigBULK{}

// OrbPriceModelConfigBULK struct for OrbPriceModelConfigBULK
type OrbPriceModelConfigBULK struct {
	Tiers []OrbPriceTier `json:"tiers,omitempty"`
}

// NewOrbPriceModelConfigBULK instantiates a new OrbPriceModelConfigBULK object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrbPriceModelConfigBULK() *OrbPriceModelConfigBULK {
	this := OrbPriceModelConfigBULK{}
	return &this
}

// NewOrbPriceModelConfigBULKWithDefaults instantiates a new OrbPriceModelConfigBULK object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrbPriceModelConfigBULKWithDefaults() *OrbPriceModelConfigBULK {
	this := OrbPriceModelConfigBULK{}
	return &this
}

// GetTiers returns the Tiers field value if set, zero value otherwise.
func (o *OrbPriceModelConfigBULK) GetTiers() []OrbPriceTier {
	if o == nil || IsNil(o.Tiers) {
		var ret []OrbPriceTier
		return ret
	}
	return o.Tiers
}

// GetTiersOk returns a tuple with the Tiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPriceModelConfigBULK) GetTiersOk() ([]OrbPriceTier, bool) {
	if o == nil || IsNil(o.Tiers) {
		return nil, false
	}
	return o.Tiers, true
}

// HasTiers returns a boolean if a field has been set.
func (o *OrbPriceModelConfigBULK) HasTiers() bool {
	if o != nil && !IsNil(o.Tiers) {
		return true
	}

	return false
}

// SetTiers gets a reference to the given []OrbPriceTier and assigns it to the Tiers field.
func (o *OrbPriceModelConfigBULK) SetTiers(v []OrbPriceTier) {
	o.Tiers = v
}

func (o OrbPriceModelConfigBULK) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrbPriceModelConfigBULK) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tiers) {
		toSerialize["tiers"] = o.Tiers
	}
	return toSerialize, nil
}

type NullableOrbPriceModelConfigBULK struct {
	value *OrbPriceModelConfigBULK
	isSet bool
}

func (v NullableOrbPriceModelConfigBULK) Get() *OrbPriceModelConfigBULK {
	return v.value
}

func (v *NullableOrbPriceModelConfigBULK) Set(val *OrbPriceModelConfigBULK) {
	v.value = val
	v.isSet = true
}

func (v NullableOrbPriceModelConfigBULK) IsSet() bool {
	return v.isSet
}

func (v *NullableOrbPriceModelConfigBULK) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrbPriceModelConfigBULK(val *OrbPriceModelConfigBULK) *NullableOrbPriceModelConfigBULK {
	return &NullableOrbPriceModelConfigBULK{value: val, isSet: true}
}

func (v NullableOrbPriceModelConfigBULK) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrbPriceModelConfigBULK) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


