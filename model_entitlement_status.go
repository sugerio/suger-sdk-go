/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EntitlementStatus the model 'EntitlementStatus'
type EntitlementStatus string

// List of EntitlementStatus
const (
	EntitlementStatus_UNKNOWN EntitlementStatus = ""
	EntitlementStatus_ACTIVE EntitlementStatus = "ACTIVE"
	EntitlementStatus_PENDING_CANCEL EntitlementStatus = "PENDING_CANCEL"
	EntitlementStatus_CANCELLED EntitlementStatus = "CANCELLED"
	EntitlementStatus_SUSPENDED EntitlementStatus = "SUSPENDED"
	EntitlementStatus_PENDING_START EntitlementStatus = "PENDING_START"
)

// All allowed values of EntitlementStatus enum
var AllowedEntitlementStatusEnumValues = []EntitlementStatus{
	"",
	"ACTIVE",
	"PENDING_CANCEL",
	"CANCELLED",
	"SUSPENDED",
	"PENDING_START",
}

func (v *EntitlementStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EntitlementStatus(value)
	for _, existing := range AllowedEntitlementStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EntitlementStatus", value)
}

// NewEntitlementStatusFromValue returns a pointer to a valid EntitlementStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEntitlementStatusFromValue(v string) (*EntitlementStatus, error) {
	ev := EntitlementStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EntitlementStatus: valid values are %v", v, AllowedEntitlementStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EntitlementStatus) IsValid() bool {
	for _, existing := range AllowedEntitlementStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EntitlementStatus value
func (v EntitlementStatus) Ptr() *EntitlementStatus {
	return &v
}

type NullableEntitlementStatus struct {
	value *EntitlementStatus
	isSet bool
}

func (v NullableEntitlementStatus) Get() *EntitlementStatus {
	return v.value
}

func (v *NullableEntitlementStatus) Set(val *EntitlementStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableEntitlementStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableEntitlementStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntitlementStatus(val *EntitlementStatus) *NullableEntitlementStatus {
	return &NullableEntitlementStatus{value: val, isSet: true}
}

func (v NullableEntitlementStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntitlementStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

