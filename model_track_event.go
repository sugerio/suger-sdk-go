/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
	"time"
)

// checks if the TrackEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrackEvent{}

// TrackEvent struct for TrackEvent
type TrackEvent struct {
	Action *TrackEventActionType `json:"action,omitempty"`
	// The ID of the contact who triggered the track event if applicable.
	ContactId *string `json:"contactId,omitempty"`
	// timestamp of the track event happened.
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// NewTrackEvent instantiates a new TrackEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrackEvent() *TrackEvent {
	this := TrackEvent{}
	return &this
}

// NewTrackEventWithDefaults instantiates a new TrackEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackEventWithDefaults() *TrackEvent {
	this := TrackEvent{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *TrackEvent) GetAction() TrackEventActionType {
	if o == nil || IsNil(o.Action) {
		var ret TrackEventActionType
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackEvent) GetActionOk() (*TrackEventActionType, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *TrackEvent) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given TrackEventActionType and assigns it to the Action field.
func (o *TrackEvent) SetAction(v TrackEventActionType) {
	o.Action = &v
}

// GetContactId returns the ContactId field value if set, zero value otherwise.
func (o *TrackEvent) GetContactId() string {
	if o == nil || IsNil(o.ContactId) {
		var ret string
		return ret
	}
	return *o.ContactId
}

// GetContactIdOk returns a tuple with the ContactId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackEvent) GetContactIdOk() (*string, bool) {
	if o == nil || IsNil(o.ContactId) {
		return nil, false
	}
	return o.ContactId, true
}

// HasContactId returns a boolean if a field has been set.
func (o *TrackEvent) HasContactId() bool {
	if o != nil && !IsNil(o.ContactId) {
		return true
	}

	return false
}

// SetContactId gets a reference to the given string and assigns it to the ContactId field.
func (o *TrackEvent) SetContactId(v string) {
	o.ContactId = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *TrackEvent) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackEvent) GetTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *TrackEvent) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *TrackEvent) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

func (o TrackEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrackEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !IsNil(o.ContactId) {
		toSerialize["contactId"] = o.ContactId
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	return toSerialize, nil
}

type NullableTrackEvent struct {
	value *TrackEvent
	isSet bool
}

func (v NullableTrackEvent) Get() *TrackEvent {
	return v.value
}

func (v *NullableTrackEvent) Set(val *TrackEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackEvent(val *TrackEvent) *NullableTrackEvent {
	return &NullableTrackEvent{value: val, isSet: true}
}

func (v NullableTrackEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
