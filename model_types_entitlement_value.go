/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TypesEntitlementValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TypesEntitlementValue{}

// TypesEntitlementValue struct for TypesEntitlementValue
type TypesEntitlementValue struct {
	// The BooleanValue field will be populated with a boolean value when the entitlement is a boolean type. Otherwise, the field will not be set.
	BooleanValue *bool `json:"booleanValue,omitempty"`
	// The DoubleValue field will be populated with a double value when the entitlement is a double type. Otherwise, the field will not be set.
	DoubleValue *float32 `json:"doubleValue,omitempty"`
	// The IntegerValue field will be populated with an integer value when the entitlement is an integer type. Otherwise, the field will not be set.
	IntegerValue *int32 `json:"integerValue,omitempty"`
	// The StringValue field will be populated with a string value when the entitlement is a string type. Otherwise, the field will not be set.
	StringValue *string `json:"stringValue,omitempty"`
}

// NewTypesEntitlementValue instantiates a new TypesEntitlementValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTypesEntitlementValue() *TypesEntitlementValue {
	this := TypesEntitlementValue{}
	return &this
}

// NewTypesEntitlementValueWithDefaults instantiates a new TypesEntitlementValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTypesEntitlementValueWithDefaults() *TypesEntitlementValue {
	this := TypesEntitlementValue{}
	return &this
}

// GetBooleanValue returns the BooleanValue field value if set, zero value otherwise.
func (o *TypesEntitlementValue) GetBooleanValue() bool {
	if o == nil || IsNil(o.BooleanValue) {
		var ret bool
		return ret
	}
	return *o.BooleanValue
}

// GetBooleanValueOk returns a tuple with the BooleanValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesEntitlementValue) GetBooleanValueOk() (*bool, bool) {
	if o == nil || IsNil(o.BooleanValue) {
		return nil, false
	}
	return o.BooleanValue, true
}

// HasBooleanValue returns a boolean if a field has been set.
func (o *TypesEntitlementValue) HasBooleanValue() bool {
	if o != nil && !IsNil(o.BooleanValue) {
		return true
	}

	return false
}

// SetBooleanValue gets a reference to the given bool and assigns it to the BooleanValue field.
func (o *TypesEntitlementValue) SetBooleanValue(v bool) {
	o.BooleanValue = &v
}

// GetDoubleValue returns the DoubleValue field value if set, zero value otherwise.
func (o *TypesEntitlementValue) GetDoubleValue() float32 {
	if o == nil || IsNil(o.DoubleValue) {
		var ret float32
		return ret
	}
	return *o.DoubleValue
}

// GetDoubleValueOk returns a tuple with the DoubleValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesEntitlementValue) GetDoubleValueOk() (*float32, bool) {
	if o == nil || IsNil(o.DoubleValue) {
		return nil, false
	}
	return o.DoubleValue, true
}

// HasDoubleValue returns a boolean if a field has been set.
func (o *TypesEntitlementValue) HasDoubleValue() bool {
	if o != nil && !IsNil(o.DoubleValue) {
		return true
	}

	return false
}

// SetDoubleValue gets a reference to the given float32 and assigns it to the DoubleValue field.
func (o *TypesEntitlementValue) SetDoubleValue(v float32) {
	o.DoubleValue = &v
}

// GetIntegerValue returns the IntegerValue field value if set, zero value otherwise.
func (o *TypesEntitlementValue) GetIntegerValue() int32 {
	if o == nil || IsNil(o.IntegerValue) {
		var ret int32
		return ret
	}
	return *o.IntegerValue
}

// GetIntegerValueOk returns a tuple with the IntegerValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesEntitlementValue) GetIntegerValueOk() (*int32, bool) {
	if o == nil || IsNil(o.IntegerValue) {
		return nil, false
	}
	return o.IntegerValue, true
}

// HasIntegerValue returns a boolean if a field has been set.
func (o *TypesEntitlementValue) HasIntegerValue() bool {
	if o != nil && !IsNil(o.IntegerValue) {
		return true
	}

	return false
}

// SetIntegerValue gets a reference to the given int32 and assigns it to the IntegerValue field.
func (o *TypesEntitlementValue) SetIntegerValue(v int32) {
	o.IntegerValue = &v
}

// GetStringValue returns the StringValue field value if set, zero value otherwise.
func (o *TypesEntitlementValue) GetStringValue() string {
	if o == nil || IsNil(o.StringValue) {
		var ret string
		return ret
	}
	return *o.StringValue
}

// GetStringValueOk returns a tuple with the StringValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesEntitlementValue) GetStringValueOk() (*string, bool) {
	if o == nil || IsNil(o.StringValue) {
		return nil, false
	}
	return o.StringValue, true
}

// HasStringValue returns a boolean if a field has been set.
func (o *TypesEntitlementValue) HasStringValue() bool {
	if o != nil && !IsNil(o.StringValue) {
		return true
	}

	return false
}

// SetStringValue gets a reference to the given string and assigns it to the StringValue field.
func (o *TypesEntitlementValue) SetStringValue(v string) {
	o.StringValue = &v
}

func (o TypesEntitlementValue) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TypesEntitlementValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BooleanValue) {
		toSerialize["booleanValue"] = o.BooleanValue
	}
	if !IsNil(o.DoubleValue) {
		toSerialize["doubleValue"] = o.DoubleValue
	}
	if !IsNil(o.IntegerValue) {
		toSerialize["integerValue"] = o.IntegerValue
	}
	if !IsNil(o.StringValue) {
		toSerialize["stringValue"] = o.StringValue
	}
	return toSerialize, nil
}

type NullableTypesEntitlementValue struct {
	value *TypesEntitlementValue
	isSet bool
}

func (v NullableTypesEntitlementValue) Get() *TypesEntitlementValue {
	return v.value
}

func (v *NullableTypesEntitlementValue) Set(val *TypesEntitlementValue) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesEntitlementValue) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesEntitlementValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesEntitlementValue(val *TypesEntitlementValue) *NullableTypesEntitlementValue {
	return &NullableTypesEntitlementValue{value: val, isSet: true}
}

func (v NullableTypesEntitlementValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesEntitlementValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
