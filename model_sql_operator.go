/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SqlOperator the model 'SqlOperator'
type SqlOperator string

// List of SqlOperator
const (
	SqlOperator_EQ SqlOperator = "EQ"
	SqlOperator_NOT_EQ SqlOperator = "NOT_EQ"
	SqlOperator_GT SqlOperator = "GT"
	SqlOperator_GTE SqlOperator = "GTE"
	SqlOperator_LT SqlOperator = "LT"
	SqlOperator_LTE SqlOperator = "LTE"
	SqlOperator_IS SqlOperator = "IS"
	SqlOperator_IS_NOT SqlOperator = "IS_NOT"
	SqlOperator_IN SqlOperator = "IN"
	SqlOperator_NOT_IN SqlOperator = "NOT_IN"
	SqlOperator_LIKE SqlOperator = "LIKE"
	SqlOperator_ILIKE SqlOperator = "ILIKE"
	SqlOperator_NOT_LIKE SqlOperator = "NOT_LIKE"
)

// All allowed values of SqlOperator enum
var AllowedSqlOperatorEnumValues = []SqlOperator{
	"EQ",
	"NOT_EQ",
	"GT",
	"GTE",
	"LT",
	"LTE",
	"IS",
	"IS_NOT",
	"IN",
	"NOT_IN",
	"LIKE",
	"ILIKE",
	"NOT_LIKE",
}

func (v *SqlOperator) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SqlOperator(value)
	for _, existing := range AllowedSqlOperatorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SqlOperator", value)
}

// NewSqlOperatorFromValue returns a pointer to a valid SqlOperator
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSqlOperatorFromValue(v string) (*SqlOperator, error) {
	ev := SqlOperator(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SqlOperator: valid values are %v", v, AllowedSqlOperatorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SqlOperator) IsValid() bool {
	for _, existing := range AllowedSqlOperatorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SqlOperator value
func (v SqlOperator) Ptr() *SqlOperator {
	return &v
}

type NullableSqlOperator struct {
	value *SqlOperator
	isSet bool
}

func (v NullableSqlOperator) Get() *SqlOperator {
	return v.value
}

func (v *NullableSqlOperator) Set(val *SqlOperator) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlOperator) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlOperator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlOperator(val *SqlOperator) *NullableSqlOperator {
	return &NullableSqlOperator{value: val, isSet: true}
}

func (v NullableSqlOperator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSqlOperator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

