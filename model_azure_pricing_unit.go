/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AzurePricingUnit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzurePricingUnit{}

// AzurePricingUnit struct for AzurePricingUnit
type AzurePricingUnit struct {
	IsUnlimitedUnit *bool `json:"isUnlimitedUnit,omitempty"`
	LowerUnit *int32 `json:"lowerUnit,omitempty"`
	Name *string `json:"name,omitempty"`
	UnitType *string `json:"unitType,omitempty"`
	UpperUnit *int32 `json:"upperUnit,omitempty"`
}

// NewAzurePricingUnit instantiates a new AzurePricingUnit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzurePricingUnit() *AzurePricingUnit {
	this := AzurePricingUnit{}
	return &this
}

// NewAzurePricingUnitWithDefaults instantiates a new AzurePricingUnit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzurePricingUnitWithDefaults() *AzurePricingUnit {
	this := AzurePricingUnit{}
	return &this
}

// GetIsUnlimitedUnit returns the IsUnlimitedUnit field value if set, zero value otherwise.
func (o *AzurePricingUnit) GetIsUnlimitedUnit() bool {
	if o == nil || IsNil(o.IsUnlimitedUnit) {
		var ret bool
		return ret
	}
	return *o.IsUnlimitedUnit
}

// GetIsUnlimitedUnitOk returns a tuple with the IsUnlimitedUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzurePricingUnit) GetIsUnlimitedUnitOk() (*bool, bool) {
	if o == nil || IsNil(o.IsUnlimitedUnit) {
		return nil, false
	}
	return o.IsUnlimitedUnit, true
}

// HasIsUnlimitedUnit returns a boolean if a field has been set.
func (o *AzurePricingUnit) HasIsUnlimitedUnit() bool {
	if o != nil && !IsNil(o.IsUnlimitedUnit) {
		return true
	}

	return false
}

// SetIsUnlimitedUnit gets a reference to the given bool and assigns it to the IsUnlimitedUnit field.
func (o *AzurePricingUnit) SetIsUnlimitedUnit(v bool) {
	o.IsUnlimitedUnit = &v
}

// GetLowerUnit returns the LowerUnit field value if set, zero value otherwise.
func (o *AzurePricingUnit) GetLowerUnit() int32 {
	if o == nil || IsNil(o.LowerUnit) {
		var ret int32
		return ret
	}
	return *o.LowerUnit
}

// GetLowerUnitOk returns a tuple with the LowerUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzurePricingUnit) GetLowerUnitOk() (*int32, bool) {
	if o == nil || IsNil(o.LowerUnit) {
		return nil, false
	}
	return o.LowerUnit, true
}

// HasLowerUnit returns a boolean if a field has been set.
func (o *AzurePricingUnit) HasLowerUnit() bool {
	if o != nil && !IsNil(o.LowerUnit) {
		return true
	}

	return false
}

// SetLowerUnit gets a reference to the given int32 and assigns it to the LowerUnit field.
func (o *AzurePricingUnit) SetLowerUnit(v int32) {
	o.LowerUnit = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AzurePricingUnit) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzurePricingUnit) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AzurePricingUnit) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AzurePricingUnit) SetName(v string) {
	o.Name = &v
}

// GetUnitType returns the UnitType field value if set, zero value otherwise.
func (o *AzurePricingUnit) GetUnitType() string {
	if o == nil || IsNil(o.UnitType) {
		var ret string
		return ret
	}
	return *o.UnitType
}

// GetUnitTypeOk returns a tuple with the UnitType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzurePricingUnit) GetUnitTypeOk() (*string, bool) {
	if o == nil || IsNil(o.UnitType) {
		return nil, false
	}
	return o.UnitType, true
}

// HasUnitType returns a boolean if a field has been set.
func (o *AzurePricingUnit) HasUnitType() bool {
	if o != nil && !IsNil(o.UnitType) {
		return true
	}

	return false
}

// SetUnitType gets a reference to the given string and assigns it to the UnitType field.
func (o *AzurePricingUnit) SetUnitType(v string) {
	o.UnitType = &v
}

// GetUpperUnit returns the UpperUnit field value if set, zero value otherwise.
func (o *AzurePricingUnit) GetUpperUnit() int32 {
	if o == nil || IsNil(o.UpperUnit) {
		var ret int32
		return ret
	}
	return *o.UpperUnit
}

// GetUpperUnitOk returns a tuple with the UpperUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzurePricingUnit) GetUpperUnitOk() (*int32, bool) {
	if o == nil || IsNil(o.UpperUnit) {
		return nil, false
	}
	return o.UpperUnit, true
}

// HasUpperUnit returns a boolean if a field has been set.
func (o *AzurePricingUnit) HasUpperUnit() bool {
	if o != nil && !IsNil(o.UpperUnit) {
		return true
	}

	return false
}

// SetUpperUnit gets a reference to the given int32 and assigns it to the UpperUnit field.
func (o *AzurePricingUnit) SetUpperUnit(v int32) {
	o.UpperUnit = &v
}

func (o AzurePricingUnit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzurePricingUnit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsUnlimitedUnit) {
		toSerialize["isUnlimitedUnit"] = o.IsUnlimitedUnit
	}
	if !IsNil(o.LowerUnit) {
		toSerialize["lowerUnit"] = o.LowerUnit
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.UnitType) {
		toSerialize["unitType"] = o.UnitType
	}
	if !IsNil(o.UpperUnit) {
		toSerialize["upperUnit"] = o.UpperUnit
	}
	return toSerialize, nil
}

type NullableAzurePricingUnit struct {
	value *AzurePricingUnit
	isSet bool
}

func (v NullableAzurePricingUnit) Get() *AzurePricingUnit {
	return v.value
}

func (v *NullableAzurePricingUnit) Set(val *AzurePricingUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableAzurePricingUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableAzurePricingUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzurePricingUnit(val *AzurePricingUnit) *NullableAzurePricingUnit {
	return &NullableAzurePricingUnit{value: val, isSet: true}
}

func (v NullableAzurePricingUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzurePricingUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


