/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CancellationScheduleType the model 'CancellationScheduleType'
type CancellationScheduleType string

// List of CancellationScheduleType
const (
	CancellationScheduleType_EndOfTerm    CancellationScheduleType = "EndOfTerm"
	CancellationScheduleType_Immediate    CancellationScheduleType = "Immediate"
	CancellationScheduleType_SpecificDate CancellationScheduleType = "SpecificDate"
)

// All allowed values of CancellationScheduleType enum
var AllowedCancellationScheduleTypeEnumValues = []CancellationScheduleType{
	"EndOfTerm",
	"Immediate",
	"SpecificDate",
}

func (v *CancellationScheduleType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CancellationScheduleType(value)
	for _, existing := range AllowedCancellationScheduleTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CancellationScheduleType", value)
}

// NewCancellationScheduleTypeFromValue returns a pointer to a valid CancellationScheduleType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCancellationScheduleTypeFromValue(v string) (*CancellationScheduleType, error) {
	ev := CancellationScheduleType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CancellationScheduleType: valid values are %v", v, AllowedCancellationScheduleTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CancellationScheduleType) IsValid() bool {
	for _, existing := range AllowedCancellationScheduleTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CancellationScheduleType value
func (v CancellationScheduleType) Ptr() *CancellationScheduleType {
	return &v
}

type NullableCancellationScheduleType struct {
	value *CancellationScheduleType
	isSet bool
}

func (v NullableCancellationScheduleType) Get() *CancellationScheduleType {
	return v.value
}

func (v *NullableCancellationScheduleType) Set(val *CancellationScheduleType) {
	v.value = val
	v.isSet = true
}

func (v NullableCancellationScheduleType) IsSet() bool {
	return v.isSet
}

func (v *NullableCancellationScheduleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCancellationScheduleType(val *CancellationScheduleType) *NullableCancellationScheduleType {
	return &NullableCancellationScheduleType{value: val, isSet: true}
}

func (v NullableCancellationScheduleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCancellationScheduleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
