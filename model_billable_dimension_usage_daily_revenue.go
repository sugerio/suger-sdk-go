/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BillableDimensionUsageDailyRevenue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BillableDimensionUsageDailyRevenue{}

// BillableDimensionUsageDailyRevenue struct for BillableDimensionUsageDailyRevenue
type BillableDimensionUsageDailyRevenue struct {
	BillableMetricKey   *MeteringUsageRecordGroupByKey `json:"billableMetricKey,omitempty"`
	Date                *string                        `json:"date,omitempty"`
	Quantity            *float32                       `json:"quantity,omitempty"`
	UniquePropertyItems map[string]interface{}         `json:"uniquePropertyItems,omitempty"`
}

// NewBillableDimensionUsageDailyRevenue instantiates a new BillableDimensionUsageDailyRevenue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBillableDimensionUsageDailyRevenue() *BillableDimensionUsageDailyRevenue {
	this := BillableDimensionUsageDailyRevenue{}
	return &this
}

// NewBillableDimensionUsageDailyRevenueWithDefaults instantiates a new BillableDimensionUsageDailyRevenue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillableDimensionUsageDailyRevenueWithDefaults() *BillableDimensionUsageDailyRevenue {
	this := BillableDimensionUsageDailyRevenue{}
	return &this
}

// GetBillableMetricKey returns the BillableMetricKey field value if set, zero value otherwise.
func (o *BillableDimensionUsageDailyRevenue) GetBillableMetricKey() MeteringUsageRecordGroupByKey {
	if o == nil || IsNil(o.BillableMetricKey) {
		var ret MeteringUsageRecordGroupByKey
		return ret
	}
	return *o.BillableMetricKey
}

// GetBillableMetricKeyOk returns a tuple with the BillableMetricKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillableDimensionUsageDailyRevenue) GetBillableMetricKeyOk() (*MeteringUsageRecordGroupByKey, bool) {
	if o == nil || IsNil(o.BillableMetricKey) {
		return nil, false
	}
	return o.BillableMetricKey, true
}

// HasBillableMetricKey returns a boolean if a field has been set.
func (o *BillableDimensionUsageDailyRevenue) HasBillableMetricKey() bool {
	if o != nil && !IsNil(o.BillableMetricKey) {
		return true
	}

	return false
}

// SetBillableMetricKey gets a reference to the given MeteringUsageRecordGroupByKey and assigns it to the BillableMetricKey field.
func (o *BillableDimensionUsageDailyRevenue) SetBillableMetricKey(v MeteringUsageRecordGroupByKey) {
	o.BillableMetricKey = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *BillableDimensionUsageDailyRevenue) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillableDimensionUsageDailyRevenue) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *BillableDimensionUsageDailyRevenue) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *BillableDimensionUsageDailyRevenue) SetDate(v string) {
	o.Date = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *BillableDimensionUsageDailyRevenue) GetQuantity() float32 {
	if o == nil || IsNil(o.Quantity) {
		var ret float32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillableDimensionUsageDailyRevenue) GetQuantityOk() (*float32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *BillableDimensionUsageDailyRevenue) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given float32 and assigns it to the Quantity field.
func (o *BillableDimensionUsageDailyRevenue) SetQuantity(v float32) {
	o.Quantity = &v
}

// GetUniquePropertyItems returns the UniquePropertyItems field value if set, zero value otherwise.
func (o *BillableDimensionUsageDailyRevenue) GetUniquePropertyItems() map[string]interface{} {
	if o == nil || IsNil(o.UniquePropertyItems) {
		var ret map[string]interface{}
		return ret
	}
	return o.UniquePropertyItems
}

// GetUniquePropertyItemsOk returns a tuple with the UniquePropertyItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillableDimensionUsageDailyRevenue) GetUniquePropertyItemsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.UniquePropertyItems) {
		return map[string]interface{}{}, false
	}
	return o.UniquePropertyItems, true
}

// HasUniquePropertyItems returns a boolean if a field has been set.
func (o *BillableDimensionUsageDailyRevenue) HasUniquePropertyItems() bool {
	if o != nil && !IsNil(o.UniquePropertyItems) {
		return true
	}

	return false
}

// SetUniquePropertyItems gets a reference to the given map[string]interface{} and assigns it to the UniquePropertyItems field.
func (o *BillableDimensionUsageDailyRevenue) SetUniquePropertyItems(v map[string]interface{}) {
	o.UniquePropertyItems = v
}

func (o BillableDimensionUsageDailyRevenue) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BillableDimensionUsageDailyRevenue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BillableMetricKey) {
		toSerialize["billableMetricKey"] = o.BillableMetricKey
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.UniquePropertyItems) {
		toSerialize["uniquePropertyItems"] = o.UniquePropertyItems
	}
	return toSerialize, nil
}

type NullableBillableDimensionUsageDailyRevenue struct {
	value *BillableDimensionUsageDailyRevenue
	isSet bool
}

func (v NullableBillableDimensionUsageDailyRevenue) Get() *BillableDimensionUsageDailyRevenue {
	return v.value
}

func (v *NullableBillableDimensionUsageDailyRevenue) Set(val *BillableDimensionUsageDailyRevenue) {
	v.value = val
	v.isSet = true
}

func (v NullableBillableDimensionUsageDailyRevenue) IsSet() bool {
	return v.isSet
}

func (v *NullableBillableDimensionUsageDailyRevenue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillableDimensionUsageDailyRevenue(val *BillableDimensionUsageDailyRevenue) *NullableBillableDimensionUsageDailyRevenue {
	return &NullableBillableDimensionUsageDailyRevenue{value: val, isSet: true}
}

func (v NullableBillableDimensionUsageDailyRevenue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillableDimensionUsageDailyRevenue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
