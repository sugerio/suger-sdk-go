/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
	"fmt"
)

// EntitlementTermType the model 'EntitlementTermType'
type EntitlementTermType string

// List of EntitlementTermType
const (
	EntitlementTermTypeUnknown        EntitlementTermType = ""
	EntitlementTermTypeAutoRenew      EntitlementTermType = "AutoRenew"
	EntitlementTermTypeManualRenew    EntitlementTermType = "ManualRenew"
	EntitlementTermTypePlanChange     EntitlementTermType = "PlanChange"
	EntitlementTermTypeQuantityChange EntitlementTermType = "QuantityChange"
	EntitlementTermTypeSignup         EntitlementTermType = "Signup"
	EntitlementTermTypeDivideCommit   EntitlementTermType = "DivideCommit"
)

// All allowed values of EntitlementTermType enum
var AllowedEntitlementTermTypeEnumValues = []EntitlementTermType{
	"",
	"AutoRenew",
	"ManualRenew",
	"PlanChange",
	"QuantityChange",
	"Signup",
	"DivideCommit",
}

func (v *EntitlementTermType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EntitlementTermType(value)
	for _, existing := range AllowedEntitlementTermTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EntitlementTermType", value)
}

// NewEntitlementTermTypeFromValue returns a pointer to a valid EntitlementTermType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEntitlementTermTypeFromValue(v string) (*EntitlementTermType, error) {
	ev := EntitlementTermType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EntitlementTermType: valid values are %v", v, AllowedEntitlementTermTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EntitlementTermType) IsValid() bool {
	for _, existing := range AllowedEntitlementTermTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EntitlementTermType value
func (v EntitlementTermType) Ptr() *EntitlementTermType {
	return &v
}

type NullableEntitlementTermType struct {
	value *EntitlementTermType
	isSet bool
}

func (v NullableEntitlementTermType) Get() *EntitlementTermType {
	return v.value
}

func (v *NullableEntitlementTermType) Set(val *EntitlementTermType) {
	v.value = val
	v.isSet = true
}

func (v NullableEntitlementTermType) IsSet() bool {
	return v.isSet
}

func (v *NullableEntitlementTermType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntitlementTermType(val *EntitlementTermType) *NullableEntitlementTermType {
	return &NullableEntitlementTermType{value: val, isSet: true}
}

func (v NullableEntitlementTermType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntitlementTermType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
