/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
	"time"
)

// checks if the MeteringUsageRecordGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MeteringUsageRecordGroup{}

// MeteringUsageRecordGroup struct for MeteringUsageRecordGroup
type MeteringUsageRecordGroup struct {
	BuyerID             *string                           `json:"buyerID,omitempty"`
	CreationTime        *time.Time                        `json:"creationTime,omitempty"`
	EntitlementID       *string                           `json:"entitlementID,omitempty"`
	Id                  *string                           `json:"id,omitempty"`
	LastUpdateTime      *time.Time                        `json:"lastUpdateTime,omitempty"`
	MetaInfo            *MeteringUsageRecordGroupMetaInfo `json:"metaInfo,omitempty"`
	OrganizationID      *string                           `json:"organizationID,omitempty"`
	Partner             *string                           `json:"partner,omitempty"`
	Records             *map[string]float32               `json:"records,omitempty"`
	SerialID            *int32                            `json:"serialID,omitempty"`
	Status              *string                           `json:"status,omitempty"`
	UsageRecordReportID *string                           `json:"usageRecordReportID,omitempty"`
}

// NewMeteringUsageRecordGroup instantiates a new MeteringUsageRecordGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeteringUsageRecordGroup() *MeteringUsageRecordGroup {
	this := MeteringUsageRecordGroup{}
	return &this
}

// NewMeteringUsageRecordGroupWithDefaults instantiates a new MeteringUsageRecordGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMeteringUsageRecordGroupWithDefaults() *MeteringUsageRecordGroup {
	this := MeteringUsageRecordGroup{}
	return &this
}

// GetBuyerID returns the BuyerID field value if set, zero value otherwise.
func (o *MeteringUsageRecordGroup) GetBuyerID() string {
	if o == nil || IsNil(o.BuyerID) {
		var ret string
		return ret
	}
	return *o.BuyerID
}

// GetBuyerIDOk returns a tuple with the BuyerID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordGroup) GetBuyerIDOk() (*string, bool) {
	if o == nil || IsNil(o.BuyerID) {
		return nil, false
	}
	return o.BuyerID, true
}

// HasBuyerID returns a boolean if a field has been set.
func (o *MeteringUsageRecordGroup) HasBuyerID() bool {
	if o != nil && !IsNil(o.BuyerID) {
		return true
	}

	return false
}

// SetBuyerID gets a reference to the given string and assigns it to the BuyerID field.
func (o *MeteringUsageRecordGroup) SetBuyerID(v string) {
	o.BuyerID = &v
}

// GetCreationTime returns the CreationTime field value if set, zero value otherwise.
func (o *MeteringUsageRecordGroup) GetCreationTime() time.Time {
	if o == nil || IsNil(o.CreationTime) {
		var ret time.Time
		return ret
	}
	return *o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordGroup) GetCreationTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreationTime) {
		return nil, false
	}
	return o.CreationTime, true
}

// HasCreationTime returns a boolean if a field has been set.
func (o *MeteringUsageRecordGroup) HasCreationTime() bool {
	if o != nil && !IsNil(o.CreationTime) {
		return true
	}

	return false
}

// SetCreationTime gets a reference to the given time.Time and assigns it to the CreationTime field.
func (o *MeteringUsageRecordGroup) SetCreationTime(v time.Time) {
	o.CreationTime = &v
}

// GetEntitlementID returns the EntitlementID field value if set, zero value otherwise.
func (o *MeteringUsageRecordGroup) GetEntitlementID() string {
	if o == nil || IsNil(o.EntitlementID) {
		var ret string
		return ret
	}
	return *o.EntitlementID
}

// GetEntitlementIDOk returns a tuple with the EntitlementID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordGroup) GetEntitlementIDOk() (*string, bool) {
	if o == nil || IsNil(o.EntitlementID) {
		return nil, false
	}
	return o.EntitlementID, true
}

// HasEntitlementID returns a boolean if a field has been set.
func (o *MeteringUsageRecordGroup) HasEntitlementID() bool {
	if o != nil && !IsNil(o.EntitlementID) {
		return true
	}

	return false
}

// SetEntitlementID gets a reference to the given string and assigns it to the EntitlementID field.
func (o *MeteringUsageRecordGroup) SetEntitlementID(v string) {
	o.EntitlementID = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MeteringUsageRecordGroup) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordGroup) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MeteringUsageRecordGroup) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MeteringUsageRecordGroup) SetId(v string) {
	o.Id = &v
}

// GetLastUpdateTime returns the LastUpdateTime field value if set, zero value otherwise.
func (o *MeteringUsageRecordGroup) GetLastUpdateTime() time.Time {
	if o == nil || IsNil(o.LastUpdateTime) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdateTime
}

// GetLastUpdateTimeOk returns a tuple with the LastUpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordGroup) GetLastUpdateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdateTime) {
		return nil, false
	}
	return o.LastUpdateTime, true
}

// HasLastUpdateTime returns a boolean if a field has been set.
func (o *MeteringUsageRecordGroup) HasLastUpdateTime() bool {
	if o != nil && !IsNil(o.LastUpdateTime) {
		return true
	}

	return false
}

// SetLastUpdateTime gets a reference to the given time.Time and assigns it to the LastUpdateTime field.
func (o *MeteringUsageRecordGroup) SetLastUpdateTime(v time.Time) {
	o.LastUpdateTime = &v
}

// GetMetaInfo returns the MetaInfo field value if set, zero value otherwise.
func (o *MeteringUsageRecordGroup) GetMetaInfo() MeteringUsageRecordGroupMetaInfo {
	if o == nil || IsNil(o.MetaInfo) {
		var ret MeteringUsageRecordGroupMetaInfo
		return ret
	}
	return *o.MetaInfo
}

// GetMetaInfoOk returns a tuple with the MetaInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordGroup) GetMetaInfoOk() (*MeteringUsageRecordGroupMetaInfo, bool) {
	if o == nil || IsNil(o.MetaInfo) {
		return nil, false
	}
	return o.MetaInfo, true
}

// HasMetaInfo returns a boolean if a field has been set.
func (o *MeteringUsageRecordGroup) HasMetaInfo() bool {
	if o != nil && !IsNil(o.MetaInfo) {
		return true
	}

	return false
}

// SetMetaInfo gets a reference to the given MeteringUsageRecordGroupMetaInfo and assigns it to the MetaInfo field.
func (o *MeteringUsageRecordGroup) SetMetaInfo(v MeteringUsageRecordGroupMetaInfo) {
	o.MetaInfo = &v
}

// GetOrganizationID returns the OrganizationID field value if set, zero value otherwise.
func (o *MeteringUsageRecordGroup) GetOrganizationID() string {
	if o == nil || IsNil(o.OrganizationID) {
		var ret string
		return ret
	}
	return *o.OrganizationID
}

// GetOrganizationIDOk returns a tuple with the OrganizationID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordGroup) GetOrganizationIDOk() (*string, bool) {
	if o == nil || IsNil(o.OrganizationID) {
		return nil, false
	}
	return o.OrganizationID, true
}

// HasOrganizationID returns a boolean if a field has been set.
func (o *MeteringUsageRecordGroup) HasOrganizationID() bool {
	if o != nil && !IsNil(o.OrganizationID) {
		return true
	}

	return false
}

// SetOrganizationID gets a reference to the given string and assigns it to the OrganizationID field.
func (o *MeteringUsageRecordGroup) SetOrganizationID(v string) {
	o.OrganizationID = &v
}

// GetPartner returns the Partner field value if set, zero value otherwise.
func (o *MeteringUsageRecordGroup) GetPartner() string {
	if o == nil || IsNil(o.Partner) {
		var ret string
		return ret
	}
	return *o.Partner
}

// GetPartnerOk returns a tuple with the Partner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordGroup) GetPartnerOk() (*string, bool) {
	if o == nil || IsNil(o.Partner) {
		return nil, false
	}
	return o.Partner, true
}

// HasPartner returns a boolean if a field has been set.
func (o *MeteringUsageRecordGroup) HasPartner() bool {
	if o != nil && !IsNil(o.Partner) {
		return true
	}

	return false
}

// SetPartner gets a reference to the given string and assigns it to the Partner field.
func (o *MeteringUsageRecordGroup) SetPartner(v string) {
	o.Partner = &v
}

// GetRecords returns the Records field value if set, zero value otherwise.
func (o *MeteringUsageRecordGroup) GetRecords() map[string]float32 {
	if o == nil || IsNil(o.Records) {
		var ret map[string]float32
		return ret
	}
	return *o.Records
}

// GetRecordsOk returns a tuple with the Records field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordGroup) GetRecordsOk() (*map[string]float32, bool) {
	if o == nil || IsNil(o.Records) {
		return nil, false
	}
	return o.Records, true
}

// HasRecords returns a boolean if a field has been set.
func (o *MeteringUsageRecordGroup) HasRecords() bool {
	if o != nil && !IsNil(o.Records) {
		return true
	}

	return false
}

// SetRecords gets a reference to the given map[string]float32 and assigns it to the Records field.
func (o *MeteringUsageRecordGroup) SetRecords(v map[string]float32) {
	o.Records = &v
}

// GetSerialID returns the SerialID field value if set, zero value otherwise.
func (o *MeteringUsageRecordGroup) GetSerialID() int32 {
	if o == nil || IsNil(o.SerialID) {
		var ret int32
		return ret
	}
	return *o.SerialID
}

// GetSerialIDOk returns a tuple with the SerialID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordGroup) GetSerialIDOk() (*int32, bool) {
	if o == nil || IsNil(o.SerialID) {
		return nil, false
	}
	return o.SerialID, true
}

// HasSerialID returns a boolean if a field has been set.
func (o *MeteringUsageRecordGroup) HasSerialID() bool {
	if o != nil && !IsNil(o.SerialID) {
		return true
	}

	return false
}

// SetSerialID gets a reference to the given int32 and assigns it to the SerialID field.
func (o *MeteringUsageRecordGroup) SetSerialID(v int32) {
	o.SerialID = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *MeteringUsageRecordGroup) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordGroup) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *MeteringUsageRecordGroup) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *MeteringUsageRecordGroup) SetStatus(v string) {
	o.Status = &v
}

// GetUsageRecordReportID returns the UsageRecordReportID field value if set, zero value otherwise.
func (o *MeteringUsageRecordGroup) GetUsageRecordReportID() string {
	if o == nil || IsNil(o.UsageRecordReportID) {
		var ret string
		return ret
	}
	return *o.UsageRecordReportID
}

// GetUsageRecordReportIDOk returns a tuple with the UsageRecordReportID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordGroup) GetUsageRecordReportIDOk() (*string, bool) {
	if o == nil || IsNil(o.UsageRecordReportID) {
		return nil, false
	}
	return o.UsageRecordReportID, true
}

// HasUsageRecordReportID returns a boolean if a field has been set.
func (o *MeteringUsageRecordGroup) HasUsageRecordReportID() bool {
	if o != nil && !IsNil(o.UsageRecordReportID) {
		return true
	}

	return false
}

// SetUsageRecordReportID gets a reference to the given string and assigns it to the UsageRecordReportID field.
func (o *MeteringUsageRecordGroup) SetUsageRecordReportID(v string) {
	o.UsageRecordReportID = &v
}

func (o MeteringUsageRecordGroup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MeteringUsageRecordGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BuyerID) {
		toSerialize["buyerID"] = o.BuyerID
	}
	if !IsNil(o.CreationTime) {
		toSerialize["creationTime"] = o.CreationTime
	}
	if !IsNil(o.EntitlementID) {
		toSerialize["entitlementID"] = o.EntitlementID
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LastUpdateTime) {
		toSerialize["lastUpdateTime"] = o.LastUpdateTime
	}
	if !IsNil(o.MetaInfo) {
		toSerialize["metaInfo"] = o.MetaInfo
	}
	if !IsNil(o.OrganizationID) {
		toSerialize["organizationID"] = o.OrganizationID
	}
	if !IsNil(o.Partner) {
		toSerialize["partner"] = o.Partner
	}
	if !IsNil(o.Records) {
		toSerialize["records"] = o.Records
	}
	if !IsNil(o.SerialID) {
		toSerialize["serialID"] = o.SerialID
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.UsageRecordReportID) {
		toSerialize["usageRecordReportID"] = o.UsageRecordReportID
	}
	return toSerialize, nil
}

type NullableMeteringUsageRecordGroup struct {
	value *MeteringUsageRecordGroup
	isSet bool
}

func (v NullableMeteringUsageRecordGroup) Get() *MeteringUsageRecordGroup {
	return v.value
}

func (v *NullableMeteringUsageRecordGroup) Set(val *MeteringUsageRecordGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableMeteringUsageRecordGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableMeteringUsageRecordGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeteringUsageRecordGroup(val *MeteringUsageRecordGroup) *NullableMeteringUsageRecordGroup {
	return &NullableMeteringUsageRecordGroup{value: val, isSet: true}
}

func (v NullableMeteringUsageRecordGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeteringUsageRecordGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
