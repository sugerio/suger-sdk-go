/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// GcpMarketplaceUserAccountState the model 'GcpMarketplaceUserAccountState'
type GcpMarketplaceUserAccountState string

// List of GcpMarketplaceUserAccountState
const (
	GcpMarketplaceUserAccountState_UNSPECIFIED GcpMarketplaceUserAccountState = "ACCOUNT_STATE_UNSPECIFIED"
	GcpMarketplaceUserAccountState_ACTIVE GcpMarketplaceUserAccountState = "ACCOUNT_ACTIVE"
)

// All allowed values of GcpMarketplaceUserAccountState enum
var AllowedGcpMarketplaceUserAccountStateEnumValues = []GcpMarketplaceUserAccountState{
	"ACCOUNT_STATE_UNSPECIFIED",
	"ACCOUNT_ACTIVE",
}

func (v *GcpMarketplaceUserAccountState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GcpMarketplaceUserAccountState(value)
	for _, existing := range AllowedGcpMarketplaceUserAccountStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GcpMarketplaceUserAccountState", value)
}

// NewGcpMarketplaceUserAccountStateFromValue returns a pointer to a valid GcpMarketplaceUserAccountState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGcpMarketplaceUserAccountStateFromValue(v string) (*GcpMarketplaceUserAccountState, error) {
	ev := GcpMarketplaceUserAccountState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GcpMarketplaceUserAccountState: valid values are %v", v, AllowedGcpMarketplaceUserAccountStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GcpMarketplaceUserAccountState) IsValid() bool {
	for _, existing := range AllowedGcpMarketplaceUserAccountStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GcpMarketplaceUserAccountState value
func (v GcpMarketplaceUserAccountState) Ptr() *GcpMarketplaceUserAccountState {
	return &v
}

type NullableGcpMarketplaceUserAccountState struct {
	value *GcpMarketplaceUserAccountState
	isSet bool
}

func (v NullableGcpMarketplaceUserAccountState) Get() *GcpMarketplaceUserAccountState {
	return v.value
}

func (v *NullableGcpMarketplaceUserAccountState) Set(val *GcpMarketplaceUserAccountState) {
	v.value = val
	v.isSet = true
}

func (v NullableGcpMarketplaceUserAccountState) IsSet() bool {
	return v.isSet
}

func (v *NullableGcpMarketplaceUserAccountState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGcpMarketplaceUserAccountState(val *GcpMarketplaceUserAccountState) *NullableGcpMarketplaceUserAccountState {
	return &NullableGcpMarketplaceUserAccountState{value: val, isSet: true}
}

func (v NullableGcpMarketplaceUserAccountState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGcpMarketplaceUserAccountState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

