/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
	"fmt"
)

// StripePaymentIntentStatus the model 'StripePaymentIntentStatus'
type StripePaymentIntentStatus string

// List of StripePaymentIntentStatus
const (
	StripePaymentIntentStatus_RequiresPaymentMethod StripePaymentIntentStatus = "requires_payment_method"
	StripePaymentIntentStatus_RequiresConfirmation  StripePaymentIntentStatus = "requires_confirmation"
	StripePaymentIntentStatus_RequiresAction        StripePaymentIntentStatus = "requires_action"
	StripePaymentIntentStatus_Processing            StripePaymentIntentStatus = "processing"
	StripePaymentIntentStatus_RequiresCapture       StripePaymentIntentStatus = "requires_capture"
	StripePaymentIntentStatus_Canceled              StripePaymentIntentStatus = "canceled"
	StripePaymentIntentStatus_Succeeded             StripePaymentIntentStatus = "succeeded"
)

// All allowed values of StripePaymentIntentStatus enum
var AllowedStripePaymentIntentStatusEnumValues = []StripePaymentIntentStatus{
	"requires_payment_method",
	"requires_confirmation",
	"requires_action",
	"processing",
	"requires_capture",
	"canceled",
	"succeeded",
}

func (v *StripePaymentIntentStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StripePaymentIntentStatus(value)
	for _, existing := range AllowedStripePaymentIntentStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StripePaymentIntentStatus", value)
}

// NewStripePaymentIntentStatusFromValue returns a pointer to a valid StripePaymentIntentStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStripePaymentIntentStatusFromValue(v string) (*StripePaymentIntentStatus, error) {
	ev := StripePaymentIntentStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StripePaymentIntentStatus: valid values are %v", v, AllowedStripePaymentIntentStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StripePaymentIntentStatus) IsValid() bool {
	for _, existing := range AllowedStripePaymentIntentStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StripePaymentIntentStatus value
func (v StripePaymentIntentStatus) Ptr() *StripePaymentIntentStatus {
	return &v
}

type NullableStripePaymentIntentStatus struct {
	value *StripePaymentIntentStatus
	isSet bool
}

func (v NullableStripePaymentIntentStatus) Get() *StripePaymentIntentStatus {
	return v.value
}

func (v *NullableStripePaymentIntentStatus) Set(val *StripePaymentIntentStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableStripePaymentIntentStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableStripePaymentIntentStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStripePaymentIntentStatus(val *StripePaymentIntentStatus) *NullableStripePaymentIntentStatus {
	return &NullableStripePaymentIntentStatus{value: val, isSet: true}
}

func (v NullableStripePaymentIntentStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStripePaymentIntentStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
