/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
	"fmt"
)

// UsageRecordGroupSource the model 'UsageRecordGroupSource'
type UsageRecordGroupSource string

// List of UsageRecordGroupSource
const (
	UsageRecordGroupSourceUNKNOWN   UsageRecordGroupSource = ""
	UsageRecordGroupSourceAPI       UsageRecordGroupSource = "API"
	UsageRecordGroupSourceINTERNAL  UsageRecordGroupSource = "INTERNAL"
	UsageRecordGroupSourceLAGO      UsageRecordGroupSource = "LAGO"
	UsageRecordGroupSourceMETRONOME UsageRecordGroupSource = "METRONOME"
	UsageRecordGroupSourceORB       UsageRecordGroupSource = "ORB"
	UsageRecordGroupSourceSTRIPE    UsageRecordGroupSource = "STRIPE"
)

// All allowed values of UsageRecordGroupSource enum
var AllowedUsageRecordGroupSourceEnumValues = []UsageRecordGroupSource{
	"",
	"API",
	"INTERNAL",
	"LAGO",
	"METRONOME",
	"ORB",
	"STRIPE",
}

func (v *UsageRecordGroupSource) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UsageRecordGroupSource(value)
	for _, existing := range AllowedUsageRecordGroupSourceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UsageRecordGroupSource", value)
}

// NewUsageRecordGroupSourceFromValue returns a pointer to a valid UsageRecordGroupSource
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUsageRecordGroupSourceFromValue(v string) (*UsageRecordGroupSource, error) {
	ev := UsageRecordGroupSource(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UsageRecordGroupSource: valid values are %v", v, AllowedUsageRecordGroupSourceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UsageRecordGroupSource) IsValid() bool {
	for _, existing := range AllowedUsageRecordGroupSourceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UsageRecordGroupSource value
func (v UsageRecordGroupSource) Ptr() *UsageRecordGroupSource {
	return &v
}

type NullableUsageRecordGroupSource struct {
	value *UsageRecordGroupSource
	isSet bool
}

func (v NullableUsageRecordGroupSource) Get() *UsageRecordGroupSource {
	return v.value
}

func (v *NullableUsageRecordGroupSource) Set(val *UsageRecordGroupSource) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageRecordGroupSource) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageRecordGroupSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageRecordGroupSource(val *UsageRecordGroupSource) *NullableUsageRecordGroupSource {
	return &NullableUsageRecordGroupSource{value: val, isSet: true}
}

func (v NullableUsageRecordGroupSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageRecordGroupSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
