/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// GcpMarketplaceResellerPrivateOfferPlanReusePolicy the model 'GcpMarketplaceResellerPrivateOfferPlanReusePolicy'
type GcpMarketplaceResellerPrivateOfferPlanReusePolicy string

// List of GcpMarketplaceResellerPrivateOfferPlanReusePolicy
const (
	GcpMarketplaceResellerPrivateOfferPlanReusePolicy_UNKNOWN    GcpMarketplaceResellerPrivateOfferPlanReusePolicy = ""
	GcpMarketplaceResellerPrivateOfferPlanReusePolicy_SINGLE_USE GcpMarketplaceResellerPrivateOfferPlanReusePolicy = "REUSE_POLICY_SINGLE_USE"
	GcpMarketplaceResellerPrivateOfferPlanReusePolicy_MULTI_USE  GcpMarketplaceResellerPrivateOfferPlanReusePolicy = "REUSE_POLICY_MULTI_USE"
)

// All allowed values of GcpMarketplaceResellerPrivateOfferPlanReusePolicy enum
var AllowedGcpMarketplaceResellerPrivateOfferPlanReusePolicyEnumValues = []GcpMarketplaceResellerPrivateOfferPlanReusePolicy{
	"",
	"REUSE_POLICY_SINGLE_USE",
	"REUSE_POLICY_MULTI_USE",
}

func (v *GcpMarketplaceResellerPrivateOfferPlanReusePolicy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GcpMarketplaceResellerPrivateOfferPlanReusePolicy(value)
	for _, existing := range AllowedGcpMarketplaceResellerPrivateOfferPlanReusePolicyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GcpMarketplaceResellerPrivateOfferPlanReusePolicy", value)
}

// NewGcpMarketplaceResellerPrivateOfferPlanReusePolicyFromValue returns a pointer to a valid GcpMarketplaceResellerPrivateOfferPlanReusePolicy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGcpMarketplaceResellerPrivateOfferPlanReusePolicyFromValue(v string) (*GcpMarketplaceResellerPrivateOfferPlanReusePolicy, error) {
	ev := GcpMarketplaceResellerPrivateOfferPlanReusePolicy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GcpMarketplaceResellerPrivateOfferPlanReusePolicy: valid values are %v", v, AllowedGcpMarketplaceResellerPrivateOfferPlanReusePolicyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GcpMarketplaceResellerPrivateOfferPlanReusePolicy) IsValid() bool {
	for _, existing := range AllowedGcpMarketplaceResellerPrivateOfferPlanReusePolicyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GcpMarketplaceResellerPrivateOfferPlanReusePolicy value
func (v GcpMarketplaceResellerPrivateOfferPlanReusePolicy) Ptr() *GcpMarketplaceResellerPrivateOfferPlanReusePolicy {
	return &v
}

type NullableGcpMarketplaceResellerPrivateOfferPlanReusePolicy struct {
	value *GcpMarketplaceResellerPrivateOfferPlanReusePolicy
	isSet bool
}

func (v NullableGcpMarketplaceResellerPrivateOfferPlanReusePolicy) Get() *GcpMarketplaceResellerPrivateOfferPlanReusePolicy {
	return v.value
}

func (v *NullableGcpMarketplaceResellerPrivateOfferPlanReusePolicy) Set(val *GcpMarketplaceResellerPrivateOfferPlanReusePolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableGcpMarketplaceResellerPrivateOfferPlanReusePolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableGcpMarketplaceResellerPrivateOfferPlanReusePolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGcpMarketplaceResellerPrivateOfferPlanReusePolicy(val *GcpMarketplaceResellerPrivateOfferPlanReusePolicy) *NullableGcpMarketplaceResellerPrivateOfferPlanReusePolicy {
	return &NullableGcpMarketplaceResellerPrivateOfferPlanReusePolicy{value: val, isSet: true}
}

func (v NullableGcpMarketplaceResellerPrivateOfferPlanReusePolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGcpMarketplaceResellerPrivateOfferPlanReusePolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
