/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
	"time"
)

// checks if the MeteringUsageRecordReportInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MeteringUsageRecordReportInfo{}

// MeteringUsageRecordReportInfo struct for MeteringUsageRecordReportInfo
type MeteringUsageRecordReportInfo struct {
	// The aggregated billable records from the usage metering API v2.
	AggregatedBillableRecords []AggregatedMeteringUsageRecord `json:"aggregatedBillableRecords,omitempty"`
	// The raw request to call Alibaba metering service.
	AlibabaMeteringRequest *ClientPushMeteringDataRequest `json:"alibabaMeteringRequest,omitempty"`
	// The raw response from Alibaba metering service.
	AlibabaMeteringResponse *ClientPushMeteringDataResponseBody `json:"alibabaMeteringResponse,omitempty"`
	// The raw request to call AWS metering service.
	AwsMeteringRequest *AwsMarketplaceMeteringBatchMeterUsageInput `json:"awsMeteringRequest,omitempty"`
	// The raw response from AWS metering service.
	AwsMeteringResponse *MarketplacemeteringBatchMeterUsageOutput `json:"awsMeteringResponse,omitempty"`
	// The raw request to call Azure metering service.
	AzureMeteringRequest *AzureMarketplaceMeteringBatchUsageEvent `json:"azureMeteringRequest,omitempty"`
	// The raw response from Azure metering service.
	AzureMeteringResponse *GithubComSugerioMarketplaceServiceThirdPartyAzureSdkMarketplacemeteringv1BatchUsageEventOkResponse `json:"azureMeteringResponse,omitempty"`
	// The amount of the commit if applicable.
	CommitAmount *float32 `json:"commitAmount,omitempty"`
	// The amount of the credit if applicable.
	CreditAmount *float32 `json:"creditAmount,omitempty"`
	// The credit usage records in the map of <DimensionKey, Count> for usage metering API v1.
	CreditRecords *map[string]float32 `json:"creditRecords,omitempty"`
	// The decimal parts of the usage dimension quantity in the map of <DimensionKey, DecimalPart>, before this usage record report.
	DecimalParts *map[string]float32 `json:"decimalParts,omitempty"`
	// The categories of the usage records in the map of <DimensionKey, Category>. The dimension category is required when reporting usage records to Alibaba Marketplace. It comes from the metering dimension category.
	DimensionCategories *map[string]string `json:"dimensionCategories,omitempty"`
	// The public list price of each dimension in the map of <DimensionKey, UnitPrice>.
	DimensionUnitListPrice *map[string]float32 `json:"dimensionUnitListPrice,omitempty"`
	// The unit price of each dimension in the map of <DimensionKey, UnitPrice>. It can be the negotiated price in the private offer or the public list price.
	DimensionUnitPrice *map[string]float32 `json:"dimensionUnitPrice,omitempty"`
	// time in UTC when the UsageRecordReport ends
	EndTime *time.Time `json:"endTime,omitempty"`
	// The raw request to call GCP metering service.
	GcpMeteringRequest *GcpMarketplaceMeteringOperation `json:"gcpMeteringRequest,omitempty"`
	// The raw response from GCP metering service.
	GcpMeteringResponse *ServicecontrolReportResponse `json:"gcpMeteringResponse,omitempty"`
	// The included usage records in the map of <DimensionKey, Count> for usage metering API v1.
	IncludedRecords *map[string]float32 `json:"includedRecords,omitempty"`
	Message         *string             `json:"message,omitempty"`
	// The decimal parts of the usage dimension quantity in the map of <DimensionKey, DecimalPart>, after this usage record report.
	NewDecimalParts *map[string]float32 `json:"newDecimalParts,omitempty"`
	// The partner where this usage record report is sent to. Such as AWS, AZURE or GCP.
	Partner *string `json:"partner,omitempty"`
	// The usage records to report before the adjustment by the commit with additional usage at list price, in the map of <DimensionKey, Count>.
	RecordsToReportBeforeAdjustmentAtListPrice *map[string]float32 `json:"recordsToReportBeforeAdjustmentAtListPrice,omitempty"`
	// The reported usage records in the map of <DimensionKey, Count> for usage metering API v1.
	ReportedRecords *map[string]float32 `json:"reportedRecords,omitempty"`
	// time in UTC when the UsageRecordReport starts
	StartTime *time.Time               `json:"startTime,omitempty"`
	Status    *UsageRecordReportStatus `json:"status,omitempty"`
	// The IDs of UsageRecordGroups aggregated in this UsageRecordReport.
	UsageRecordGroupIds []string `json:"usageRecordGroupIds,omitempty"`
	// The amount of the used commit before this usage record report if applicable.
	UsedCommitAmount *float32 `json:"usedCommitAmount,omitempty"`
	// The amount of the used commit increment in this usage record report if applicable.
	UsedCommitAmountIncrement *float32 `json:"usedCommitAmountIncrement,omitempty"`
	// The amount of the used credit before this usage record report if applicable.
	UsedCreditAmount *float32 `json:"usedCreditAmount,omitempty"`
	// The amount of the used credit increment in this usage record report if applicable.
	UsedCreditAmountIncrement *float32 `json:"usedCreditAmountIncrement,omitempty"`
}

// NewMeteringUsageRecordReportInfo instantiates a new MeteringUsageRecordReportInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeteringUsageRecordReportInfo() *MeteringUsageRecordReportInfo {
	this := MeteringUsageRecordReportInfo{}
	return &this
}

// NewMeteringUsageRecordReportInfoWithDefaults instantiates a new MeteringUsageRecordReportInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMeteringUsageRecordReportInfoWithDefaults() *MeteringUsageRecordReportInfo {
	this := MeteringUsageRecordReportInfo{}
	return &this
}

// GetAggregatedBillableRecords returns the AggregatedBillableRecords field value if set, zero value otherwise.
func (o *MeteringUsageRecordReportInfo) GetAggregatedBillableRecords() []AggregatedMeteringUsageRecord {
	if o == nil || IsNil(o.AggregatedBillableRecords) {
		var ret []AggregatedMeteringUsageRecord
		return ret
	}
	return o.AggregatedBillableRecords
}

// GetAggregatedBillableRecordsOk returns a tuple with the AggregatedBillableRecords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordReportInfo) GetAggregatedBillableRecordsOk() ([]AggregatedMeteringUsageRecord, bool) {
	if o == nil || IsNil(o.AggregatedBillableRecords) {
		return nil, false
	}
	return o.AggregatedBillableRecords, true
}

// HasAggregatedBillableRecords returns a boolean if a field has been set.
func (o *MeteringUsageRecordReportInfo) HasAggregatedBillableRecords() bool {
	if o != nil && !IsNil(o.AggregatedBillableRecords) {
		return true
	}

	return false
}

// SetAggregatedBillableRecords gets a reference to the given []AggregatedMeteringUsageRecord and assigns it to the AggregatedBillableRecords field.
func (o *MeteringUsageRecordReportInfo) SetAggregatedBillableRecords(v []AggregatedMeteringUsageRecord) {
	o.AggregatedBillableRecords = v
}

// GetAlibabaMeteringRequest returns the AlibabaMeteringRequest field value if set, zero value otherwise.
func (o *MeteringUsageRecordReportInfo) GetAlibabaMeteringRequest() ClientPushMeteringDataRequest {
	if o == nil || IsNil(o.AlibabaMeteringRequest) {
		var ret ClientPushMeteringDataRequest
		return ret
	}
	return *o.AlibabaMeteringRequest
}

// GetAlibabaMeteringRequestOk returns a tuple with the AlibabaMeteringRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordReportInfo) GetAlibabaMeteringRequestOk() (*ClientPushMeteringDataRequest, bool) {
	if o == nil || IsNil(o.AlibabaMeteringRequest) {
		return nil, false
	}
	return o.AlibabaMeteringRequest, true
}

// HasAlibabaMeteringRequest returns a boolean if a field has been set.
func (o *MeteringUsageRecordReportInfo) HasAlibabaMeteringRequest() bool {
	if o != nil && !IsNil(o.AlibabaMeteringRequest) {
		return true
	}

	return false
}

// SetAlibabaMeteringRequest gets a reference to the given ClientPushMeteringDataRequest and assigns it to the AlibabaMeteringRequest field.
func (o *MeteringUsageRecordReportInfo) SetAlibabaMeteringRequest(v ClientPushMeteringDataRequest) {
	o.AlibabaMeteringRequest = &v
}

// GetAlibabaMeteringResponse returns the AlibabaMeteringResponse field value if set, zero value otherwise.
func (o *MeteringUsageRecordReportInfo) GetAlibabaMeteringResponse() ClientPushMeteringDataResponseBody {
	if o == nil || IsNil(o.AlibabaMeteringResponse) {
		var ret ClientPushMeteringDataResponseBody
		return ret
	}
	return *o.AlibabaMeteringResponse
}

// GetAlibabaMeteringResponseOk returns a tuple with the AlibabaMeteringResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordReportInfo) GetAlibabaMeteringResponseOk() (*ClientPushMeteringDataResponseBody, bool) {
	if o == nil || IsNil(o.AlibabaMeteringResponse) {
		return nil, false
	}
	return o.AlibabaMeteringResponse, true
}

// HasAlibabaMeteringResponse returns a boolean if a field has been set.
func (o *MeteringUsageRecordReportInfo) HasAlibabaMeteringResponse() bool {
	if o != nil && !IsNil(o.AlibabaMeteringResponse) {
		return true
	}

	return false
}

// SetAlibabaMeteringResponse gets a reference to the given ClientPushMeteringDataResponseBody and assigns it to the AlibabaMeteringResponse field.
func (o *MeteringUsageRecordReportInfo) SetAlibabaMeteringResponse(v ClientPushMeteringDataResponseBody) {
	o.AlibabaMeteringResponse = &v
}

// GetAwsMeteringRequest returns the AwsMeteringRequest field value if set, zero value otherwise.
func (o *MeteringUsageRecordReportInfo) GetAwsMeteringRequest() AwsMarketplaceMeteringBatchMeterUsageInput {
	if o == nil || IsNil(o.AwsMeteringRequest) {
		var ret AwsMarketplaceMeteringBatchMeterUsageInput
		return ret
	}
	return *o.AwsMeteringRequest
}

// GetAwsMeteringRequestOk returns a tuple with the AwsMeteringRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordReportInfo) GetAwsMeteringRequestOk() (*AwsMarketplaceMeteringBatchMeterUsageInput, bool) {
	if o == nil || IsNil(o.AwsMeteringRequest) {
		return nil, false
	}
	return o.AwsMeteringRequest, true
}

// HasAwsMeteringRequest returns a boolean if a field has been set.
func (o *MeteringUsageRecordReportInfo) HasAwsMeteringRequest() bool {
	if o != nil && !IsNil(o.AwsMeteringRequest) {
		return true
	}

	return false
}

// SetAwsMeteringRequest gets a reference to the given AwsMarketplaceMeteringBatchMeterUsageInput and assigns it to the AwsMeteringRequest field.
func (o *MeteringUsageRecordReportInfo) SetAwsMeteringRequest(v AwsMarketplaceMeteringBatchMeterUsageInput) {
	o.AwsMeteringRequest = &v
}

// GetAwsMeteringResponse returns the AwsMeteringResponse field value if set, zero value otherwise.
func (o *MeteringUsageRecordReportInfo) GetAwsMeteringResponse() MarketplacemeteringBatchMeterUsageOutput {
	if o == nil || IsNil(o.AwsMeteringResponse) {
		var ret MarketplacemeteringBatchMeterUsageOutput
		return ret
	}
	return *o.AwsMeteringResponse
}

// GetAwsMeteringResponseOk returns a tuple with the AwsMeteringResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordReportInfo) GetAwsMeteringResponseOk() (*MarketplacemeteringBatchMeterUsageOutput, bool) {
	if o == nil || IsNil(o.AwsMeteringResponse) {
		return nil, false
	}
	return o.AwsMeteringResponse, true
}

// HasAwsMeteringResponse returns a boolean if a field has been set.
func (o *MeteringUsageRecordReportInfo) HasAwsMeteringResponse() bool {
	if o != nil && !IsNil(o.AwsMeteringResponse) {
		return true
	}

	return false
}

// SetAwsMeteringResponse gets a reference to the given MarketplacemeteringBatchMeterUsageOutput and assigns it to the AwsMeteringResponse field.
func (o *MeteringUsageRecordReportInfo) SetAwsMeteringResponse(v MarketplacemeteringBatchMeterUsageOutput) {
	o.AwsMeteringResponse = &v
}

// GetAzureMeteringRequest returns the AzureMeteringRequest field value if set, zero value otherwise.
func (o *MeteringUsageRecordReportInfo) GetAzureMeteringRequest() AzureMarketplaceMeteringBatchUsageEvent {
	if o == nil || IsNil(o.AzureMeteringRequest) {
		var ret AzureMarketplaceMeteringBatchUsageEvent
		return ret
	}
	return *o.AzureMeteringRequest
}

// GetAzureMeteringRequestOk returns a tuple with the AzureMeteringRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordReportInfo) GetAzureMeteringRequestOk() (*AzureMarketplaceMeteringBatchUsageEvent, bool) {
	if o == nil || IsNil(o.AzureMeteringRequest) {
		return nil, false
	}
	return o.AzureMeteringRequest, true
}

// HasAzureMeteringRequest returns a boolean if a field has been set.
func (o *MeteringUsageRecordReportInfo) HasAzureMeteringRequest() bool {
	if o != nil && !IsNil(o.AzureMeteringRequest) {
		return true
	}

	return false
}

// SetAzureMeteringRequest gets a reference to the given AzureMarketplaceMeteringBatchUsageEvent and assigns it to the AzureMeteringRequest field.
func (o *MeteringUsageRecordReportInfo) SetAzureMeteringRequest(v AzureMarketplaceMeteringBatchUsageEvent) {
	o.AzureMeteringRequest = &v
}

// GetAzureMeteringResponse returns the AzureMeteringResponse field value if set, zero value otherwise.
func (o *MeteringUsageRecordReportInfo) GetAzureMeteringResponse() GithubComSugerioMarketplaceServiceThirdPartyAzureSdkMarketplacemeteringv1BatchUsageEventOkResponse {
	if o == nil || IsNil(o.AzureMeteringResponse) {
		var ret GithubComSugerioMarketplaceServiceThirdPartyAzureSdkMarketplacemeteringv1BatchUsageEventOkResponse
		return ret
	}
	return *o.AzureMeteringResponse
}

// GetAzureMeteringResponseOk returns a tuple with the AzureMeteringResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordReportInfo) GetAzureMeteringResponseOk() (*GithubComSugerioMarketplaceServiceThirdPartyAzureSdkMarketplacemeteringv1BatchUsageEventOkResponse, bool) {
	if o == nil || IsNil(o.AzureMeteringResponse) {
		return nil, false
	}
	return o.AzureMeteringResponse, true
}

// HasAzureMeteringResponse returns a boolean if a field has been set.
func (o *MeteringUsageRecordReportInfo) HasAzureMeteringResponse() bool {
	if o != nil && !IsNil(o.AzureMeteringResponse) {
		return true
	}

	return false
}

// SetAzureMeteringResponse gets a reference to the given GithubComSugerioMarketplaceServiceThirdPartyAzureSdkMarketplacemeteringv1BatchUsageEventOkResponse and assigns it to the AzureMeteringResponse field.
func (o *MeteringUsageRecordReportInfo) SetAzureMeteringResponse(v GithubComSugerioMarketplaceServiceThirdPartyAzureSdkMarketplacemeteringv1BatchUsageEventOkResponse) {
	o.AzureMeteringResponse = &v
}

// GetCommitAmount returns the CommitAmount field value if set, zero value otherwise.
func (o *MeteringUsageRecordReportInfo) GetCommitAmount() float32 {
	if o == nil || IsNil(o.CommitAmount) {
		var ret float32
		return ret
	}
	return *o.CommitAmount
}

// GetCommitAmountOk returns a tuple with the CommitAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordReportInfo) GetCommitAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.CommitAmount) {
		return nil, false
	}
	return o.CommitAmount, true
}

// HasCommitAmount returns a boolean if a field has been set.
func (o *MeteringUsageRecordReportInfo) HasCommitAmount() bool {
	if o != nil && !IsNil(o.CommitAmount) {
		return true
	}

	return false
}

// SetCommitAmount gets a reference to the given float32 and assigns it to the CommitAmount field.
func (o *MeteringUsageRecordReportInfo) SetCommitAmount(v float32) {
	o.CommitAmount = &v
}

// GetCreditAmount returns the CreditAmount field value if set, zero value otherwise.
func (o *MeteringUsageRecordReportInfo) GetCreditAmount() float32 {
	if o == nil || IsNil(o.CreditAmount) {
		var ret float32
		return ret
	}
	return *o.CreditAmount
}

// GetCreditAmountOk returns a tuple with the CreditAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordReportInfo) GetCreditAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.CreditAmount) {
		return nil, false
	}
	return o.CreditAmount, true
}

// HasCreditAmount returns a boolean if a field has been set.
func (o *MeteringUsageRecordReportInfo) HasCreditAmount() bool {
	if o != nil && !IsNil(o.CreditAmount) {
		return true
	}

	return false
}

// SetCreditAmount gets a reference to the given float32 and assigns it to the CreditAmount field.
func (o *MeteringUsageRecordReportInfo) SetCreditAmount(v float32) {
	o.CreditAmount = &v
}

// GetCreditRecords returns the CreditRecords field value if set, zero value otherwise.
func (o *MeteringUsageRecordReportInfo) GetCreditRecords() map[string]float32 {
	if o == nil || IsNil(o.CreditRecords) {
		var ret map[string]float32
		return ret
	}
	return *o.CreditRecords
}

// GetCreditRecordsOk returns a tuple with the CreditRecords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordReportInfo) GetCreditRecordsOk() (*map[string]float32, bool) {
	if o == nil || IsNil(o.CreditRecords) {
		return nil, false
	}
	return o.CreditRecords, true
}

// HasCreditRecords returns a boolean if a field has been set.
func (o *MeteringUsageRecordReportInfo) HasCreditRecords() bool {
	if o != nil && !IsNil(o.CreditRecords) {
		return true
	}

	return false
}

// SetCreditRecords gets a reference to the given map[string]float32 and assigns it to the CreditRecords field.
func (o *MeteringUsageRecordReportInfo) SetCreditRecords(v map[string]float32) {
	o.CreditRecords = &v
}

// GetDecimalParts returns the DecimalParts field value if set, zero value otherwise.
func (o *MeteringUsageRecordReportInfo) GetDecimalParts() map[string]float32 {
	if o == nil || IsNil(o.DecimalParts) {
		var ret map[string]float32
		return ret
	}
	return *o.DecimalParts
}

// GetDecimalPartsOk returns a tuple with the DecimalParts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordReportInfo) GetDecimalPartsOk() (*map[string]float32, bool) {
	if o == nil || IsNil(o.DecimalParts) {
		return nil, false
	}
	return o.DecimalParts, true
}

// HasDecimalParts returns a boolean if a field has been set.
func (o *MeteringUsageRecordReportInfo) HasDecimalParts() bool {
	if o != nil && !IsNil(o.DecimalParts) {
		return true
	}

	return false
}

// SetDecimalParts gets a reference to the given map[string]float32 and assigns it to the DecimalParts field.
func (o *MeteringUsageRecordReportInfo) SetDecimalParts(v map[string]float32) {
	o.DecimalParts = &v
}

// GetDimensionCategories returns the DimensionCategories field value if set, zero value otherwise.
func (o *MeteringUsageRecordReportInfo) GetDimensionCategories() map[string]string {
	if o == nil || IsNil(o.DimensionCategories) {
		var ret map[string]string
		return ret
	}
	return *o.DimensionCategories
}

// GetDimensionCategoriesOk returns a tuple with the DimensionCategories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordReportInfo) GetDimensionCategoriesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.DimensionCategories) {
		return nil, false
	}
	return o.DimensionCategories, true
}

// HasDimensionCategories returns a boolean if a field has been set.
func (o *MeteringUsageRecordReportInfo) HasDimensionCategories() bool {
	if o != nil && !IsNil(o.DimensionCategories) {
		return true
	}

	return false
}

// SetDimensionCategories gets a reference to the given map[string]string and assigns it to the DimensionCategories field.
func (o *MeteringUsageRecordReportInfo) SetDimensionCategories(v map[string]string) {
	o.DimensionCategories = &v
}

// GetDimensionUnitListPrice returns the DimensionUnitListPrice field value if set, zero value otherwise.
func (o *MeteringUsageRecordReportInfo) GetDimensionUnitListPrice() map[string]float32 {
	if o == nil || IsNil(o.DimensionUnitListPrice) {
		var ret map[string]float32
		return ret
	}
	return *o.DimensionUnitListPrice
}

// GetDimensionUnitListPriceOk returns a tuple with the DimensionUnitListPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordReportInfo) GetDimensionUnitListPriceOk() (*map[string]float32, bool) {
	if o == nil || IsNil(o.DimensionUnitListPrice) {
		return nil, false
	}
	return o.DimensionUnitListPrice, true
}

// HasDimensionUnitListPrice returns a boolean if a field has been set.
func (o *MeteringUsageRecordReportInfo) HasDimensionUnitListPrice() bool {
	if o != nil && !IsNil(o.DimensionUnitListPrice) {
		return true
	}

	return false
}

// SetDimensionUnitListPrice gets a reference to the given map[string]float32 and assigns it to the DimensionUnitListPrice field.
func (o *MeteringUsageRecordReportInfo) SetDimensionUnitListPrice(v map[string]float32) {
	o.DimensionUnitListPrice = &v
}

// GetDimensionUnitPrice returns the DimensionUnitPrice field value if set, zero value otherwise.
func (o *MeteringUsageRecordReportInfo) GetDimensionUnitPrice() map[string]float32 {
	if o == nil || IsNil(o.DimensionUnitPrice) {
		var ret map[string]float32
		return ret
	}
	return *o.DimensionUnitPrice
}

// GetDimensionUnitPriceOk returns a tuple with the DimensionUnitPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordReportInfo) GetDimensionUnitPriceOk() (*map[string]float32, bool) {
	if o == nil || IsNil(o.DimensionUnitPrice) {
		return nil, false
	}
	return o.DimensionUnitPrice, true
}

// HasDimensionUnitPrice returns a boolean if a field has been set.
func (o *MeteringUsageRecordReportInfo) HasDimensionUnitPrice() bool {
	if o != nil && !IsNil(o.DimensionUnitPrice) {
		return true
	}

	return false
}

// SetDimensionUnitPrice gets a reference to the given map[string]float32 and assigns it to the DimensionUnitPrice field.
func (o *MeteringUsageRecordReportInfo) SetDimensionUnitPrice(v map[string]float32) {
	o.DimensionUnitPrice = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *MeteringUsageRecordReportInfo) GetEndTime() time.Time {
	if o == nil || IsNil(o.EndTime) {
		var ret time.Time
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordReportInfo) GetEndTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *MeteringUsageRecordReportInfo) HasEndTime() bool {
	if o != nil && !IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given time.Time and assigns it to the EndTime field.
func (o *MeteringUsageRecordReportInfo) SetEndTime(v time.Time) {
	o.EndTime = &v
}

// GetGcpMeteringRequest returns the GcpMeteringRequest field value if set, zero value otherwise.
func (o *MeteringUsageRecordReportInfo) GetGcpMeteringRequest() GcpMarketplaceMeteringOperation {
	if o == nil || IsNil(o.GcpMeteringRequest) {
		var ret GcpMarketplaceMeteringOperation
		return ret
	}
	return *o.GcpMeteringRequest
}

// GetGcpMeteringRequestOk returns a tuple with the GcpMeteringRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordReportInfo) GetGcpMeteringRequestOk() (*GcpMarketplaceMeteringOperation, bool) {
	if o == nil || IsNil(o.GcpMeteringRequest) {
		return nil, false
	}
	return o.GcpMeteringRequest, true
}

// HasGcpMeteringRequest returns a boolean if a field has been set.
func (o *MeteringUsageRecordReportInfo) HasGcpMeteringRequest() bool {
	if o != nil && !IsNil(o.GcpMeteringRequest) {
		return true
	}

	return false
}

// SetGcpMeteringRequest gets a reference to the given GcpMarketplaceMeteringOperation and assigns it to the GcpMeteringRequest field.
func (o *MeteringUsageRecordReportInfo) SetGcpMeteringRequest(v GcpMarketplaceMeteringOperation) {
	o.GcpMeteringRequest = &v
}

// GetGcpMeteringResponse returns the GcpMeteringResponse field value if set, zero value otherwise.
func (o *MeteringUsageRecordReportInfo) GetGcpMeteringResponse() ServicecontrolReportResponse {
	if o == nil || IsNil(o.GcpMeteringResponse) {
		var ret ServicecontrolReportResponse
		return ret
	}
	return *o.GcpMeteringResponse
}

// GetGcpMeteringResponseOk returns a tuple with the GcpMeteringResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordReportInfo) GetGcpMeteringResponseOk() (*ServicecontrolReportResponse, bool) {
	if o == nil || IsNil(o.GcpMeteringResponse) {
		return nil, false
	}
	return o.GcpMeteringResponse, true
}

// HasGcpMeteringResponse returns a boolean if a field has been set.
func (o *MeteringUsageRecordReportInfo) HasGcpMeteringResponse() bool {
	if o != nil && !IsNil(o.GcpMeteringResponse) {
		return true
	}

	return false
}

// SetGcpMeteringResponse gets a reference to the given ServicecontrolReportResponse and assigns it to the GcpMeteringResponse field.
func (o *MeteringUsageRecordReportInfo) SetGcpMeteringResponse(v ServicecontrolReportResponse) {
	o.GcpMeteringResponse = &v
}

// GetIncludedRecords returns the IncludedRecords field value if set, zero value otherwise.
func (o *MeteringUsageRecordReportInfo) GetIncludedRecords() map[string]float32 {
	if o == nil || IsNil(o.IncludedRecords) {
		var ret map[string]float32
		return ret
	}
	return *o.IncludedRecords
}

// GetIncludedRecordsOk returns a tuple with the IncludedRecords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordReportInfo) GetIncludedRecordsOk() (*map[string]float32, bool) {
	if o == nil || IsNil(o.IncludedRecords) {
		return nil, false
	}
	return o.IncludedRecords, true
}

// HasIncludedRecords returns a boolean if a field has been set.
func (o *MeteringUsageRecordReportInfo) HasIncludedRecords() bool {
	if o != nil && !IsNil(o.IncludedRecords) {
		return true
	}

	return false
}

// SetIncludedRecords gets a reference to the given map[string]float32 and assigns it to the IncludedRecords field.
func (o *MeteringUsageRecordReportInfo) SetIncludedRecords(v map[string]float32) {
	o.IncludedRecords = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *MeteringUsageRecordReportInfo) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordReportInfo) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *MeteringUsageRecordReportInfo) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *MeteringUsageRecordReportInfo) SetMessage(v string) {
	o.Message = &v
}

// GetNewDecimalParts returns the NewDecimalParts field value if set, zero value otherwise.
func (o *MeteringUsageRecordReportInfo) GetNewDecimalParts() map[string]float32 {
	if o == nil || IsNil(o.NewDecimalParts) {
		var ret map[string]float32
		return ret
	}
	return *o.NewDecimalParts
}

// GetNewDecimalPartsOk returns a tuple with the NewDecimalParts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordReportInfo) GetNewDecimalPartsOk() (*map[string]float32, bool) {
	if o == nil || IsNil(o.NewDecimalParts) {
		return nil, false
	}
	return o.NewDecimalParts, true
}

// HasNewDecimalParts returns a boolean if a field has been set.
func (o *MeteringUsageRecordReportInfo) HasNewDecimalParts() bool {
	if o != nil && !IsNil(o.NewDecimalParts) {
		return true
	}

	return false
}

// SetNewDecimalParts gets a reference to the given map[string]float32 and assigns it to the NewDecimalParts field.
func (o *MeteringUsageRecordReportInfo) SetNewDecimalParts(v map[string]float32) {
	o.NewDecimalParts = &v
}

// GetPartner returns the Partner field value if set, zero value otherwise.
func (o *MeteringUsageRecordReportInfo) GetPartner() string {
	if o == nil || IsNil(o.Partner) {
		var ret string
		return ret
	}
	return *o.Partner
}

// GetPartnerOk returns a tuple with the Partner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordReportInfo) GetPartnerOk() (*string, bool) {
	if o == nil || IsNil(o.Partner) {
		return nil, false
	}
	return o.Partner, true
}

// HasPartner returns a boolean if a field has been set.
func (o *MeteringUsageRecordReportInfo) HasPartner() bool {
	if o != nil && !IsNil(o.Partner) {
		return true
	}

	return false
}

// SetPartner gets a reference to the given string and assigns it to the Partner field.
func (o *MeteringUsageRecordReportInfo) SetPartner(v string) {
	o.Partner = &v
}

// GetRecordsToReportBeforeAdjustmentAtListPrice returns the RecordsToReportBeforeAdjustmentAtListPrice field value if set, zero value otherwise.
func (o *MeteringUsageRecordReportInfo) GetRecordsToReportBeforeAdjustmentAtListPrice() map[string]float32 {
	if o == nil || IsNil(o.RecordsToReportBeforeAdjustmentAtListPrice) {
		var ret map[string]float32
		return ret
	}
	return *o.RecordsToReportBeforeAdjustmentAtListPrice
}

// GetRecordsToReportBeforeAdjustmentAtListPriceOk returns a tuple with the RecordsToReportBeforeAdjustmentAtListPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordReportInfo) GetRecordsToReportBeforeAdjustmentAtListPriceOk() (*map[string]float32, bool) {
	if o == nil || IsNil(o.RecordsToReportBeforeAdjustmentAtListPrice) {
		return nil, false
	}
	return o.RecordsToReportBeforeAdjustmentAtListPrice, true
}

// HasRecordsToReportBeforeAdjustmentAtListPrice returns a boolean if a field has been set.
func (o *MeteringUsageRecordReportInfo) HasRecordsToReportBeforeAdjustmentAtListPrice() bool {
	if o != nil && !IsNil(o.RecordsToReportBeforeAdjustmentAtListPrice) {
		return true
	}

	return false
}

// SetRecordsToReportBeforeAdjustmentAtListPrice gets a reference to the given map[string]float32 and assigns it to the RecordsToReportBeforeAdjustmentAtListPrice field.
func (o *MeteringUsageRecordReportInfo) SetRecordsToReportBeforeAdjustmentAtListPrice(v map[string]float32) {
	o.RecordsToReportBeforeAdjustmentAtListPrice = &v
}

// GetReportedRecords returns the ReportedRecords field value if set, zero value otherwise.
func (o *MeteringUsageRecordReportInfo) GetReportedRecords() map[string]float32 {
	if o == nil || IsNil(o.ReportedRecords) {
		var ret map[string]float32
		return ret
	}
	return *o.ReportedRecords
}

// GetReportedRecordsOk returns a tuple with the ReportedRecords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordReportInfo) GetReportedRecordsOk() (*map[string]float32, bool) {
	if o == nil || IsNil(o.ReportedRecords) {
		return nil, false
	}
	return o.ReportedRecords, true
}

// HasReportedRecords returns a boolean if a field has been set.
func (o *MeteringUsageRecordReportInfo) HasReportedRecords() bool {
	if o != nil && !IsNil(o.ReportedRecords) {
		return true
	}

	return false
}

// SetReportedRecords gets a reference to the given map[string]float32 and assigns it to the ReportedRecords field.
func (o *MeteringUsageRecordReportInfo) SetReportedRecords(v map[string]float32) {
	o.ReportedRecords = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *MeteringUsageRecordReportInfo) GetStartTime() time.Time {
	if o == nil || IsNil(o.StartTime) {
		var ret time.Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordReportInfo) GetStartTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *MeteringUsageRecordReportInfo) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given time.Time and assigns it to the StartTime field.
func (o *MeteringUsageRecordReportInfo) SetStartTime(v time.Time) {
	o.StartTime = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *MeteringUsageRecordReportInfo) GetStatus() UsageRecordReportStatus {
	if o == nil || IsNil(o.Status) {
		var ret UsageRecordReportStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordReportInfo) GetStatusOk() (*UsageRecordReportStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *MeteringUsageRecordReportInfo) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given UsageRecordReportStatus and assigns it to the Status field.
func (o *MeteringUsageRecordReportInfo) SetStatus(v UsageRecordReportStatus) {
	o.Status = &v
}

// GetUsageRecordGroupIds returns the UsageRecordGroupIds field value if set, zero value otherwise.
func (o *MeteringUsageRecordReportInfo) GetUsageRecordGroupIds() []string {
	if o == nil || IsNil(o.UsageRecordGroupIds) {
		var ret []string
		return ret
	}
	return o.UsageRecordGroupIds
}

// GetUsageRecordGroupIdsOk returns a tuple with the UsageRecordGroupIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordReportInfo) GetUsageRecordGroupIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.UsageRecordGroupIds) {
		return nil, false
	}
	return o.UsageRecordGroupIds, true
}

// HasUsageRecordGroupIds returns a boolean if a field has been set.
func (o *MeteringUsageRecordReportInfo) HasUsageRecordGroupIds() bool {
	if o != nil && !IsNil(o.UsageRecordGroupIds) {
		return true
	}

	return false
}

// SetUsageRecordGroupIds gets a reference to the given []string and assigns it to the UsageRecordGroupIds field.
func (o *MeteringUsageRecordReportInfo) SetUsageRecordGroupIds(v []string) {
	o.UsageRecordGroupIds = v
}

// GetUsedCommitAmount returns the UsedCommitAmount field value if set, zero value otherwise.
func (o *MeteringUsageRecordReportInfo) GetUsedCommitAmount() float32 {
	if o == nil || IsNil(o.UsedCommitAmount) {
		var ret float32
		return ret
	}
	return *o.UsedCommitAmount
}

// GetUsedCommitAmountOk returns a tuple with the UsedCommitAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordReportInfo) GetUsedCommitAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.UsedCommitAmount) {
		return nil, false
	}
	return o.UsedCommitAmount, true
}

// HasUsedCommitAmount returns a boolean if a field has been set.
func (o *MeteringUsageRecordReportInfo) HasUsedCommitAmount() bool {
	if o != nil && !IsNil(o.UsedCommitAmount) {
		return true
	}

	return false
}

// SetUsedCommitAmount gets a reference to the given float32 and assigns it to the UsedCommitAmount field.
func (o *MeteringUsageRecordReportInfo) SetUsedCommitAmount(v float32) {
	o.UsedCommitAmount = &v
}

// GetUsedCommitAmountIncrement returns the UsedCommitAmountIncrement field value if set, zero value otherwise.
func (o *MeteringUsageRecordReportInfo) GetUsedCommitAmountIncrement() float32 {
	if o == nil || IsNil(o.UsedCommitAmountIncrement) {
		var ret float32
		return ret
	}
	return *o.UsedCommitAmountIncrement
}

// GetUsedCommitAmountIncrementOk returns a tuple with the UsedCommitAmountIncrement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordReportInfo) GetUsedCommitAmountIncrementOk() (*float32, bool) {
	if o == nil || IsNil(o.UsedCommitAmountIncrement) {
		return nil, false
	}
	return o.UsedCommitAmountIncrement, true
}

// HasUsedCommitAmountIncrement returns a boolean if a field has been set.
func (o *MeteringUsageRecordReportInfo) HasUsedCommitAmountIncrement() bool {
	if o != nil && !IsNil(o.UsedCommitAmountIncrement) {
		return true
	}

	return false
}

// SetUsedCommitAmountIncrement gets a reference to the given float32 and assigns it to the UsedCommitAmountIncrement field.
func (o *MeteringUsageRecordReportInfo) SetUsedCommitAmountIncrement(v float32) {
	o.UsedCommitAmountIncrement = &v
}

// GetUsedCreditAmount returns the UsedCreditAmount field value if set, zero value otherwise.
func (o *MeteringUsageRecordReportInfo) GetUsedCreditAmount() float32 {
	if o == nil || IsNil(o.UsedCreditAmount) {
		var ret float32
		return ret
	}
	return *o.UsedCreditAmount
}

// GetUsedCreditAmountOk returns a tuple with the UsedCreditAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordReportInfo) GetUsedCreditAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.UsedCreditAmount) {
		return nil, false
	}
	return o.UsedCreditAmount, true
}

// HasUsedCreditAmount returns a boolean if a field has been set.
func (o *MeteringUsageRecordReportInfo) HasUsedCreditAmount() bool {
	if o != nil && !IsNil(o.UsedCreditAmount) {
		return true
	}

	return false
}

// SetUsedCreditAmount gets a reference to the given float32 and assigns it to the UsedCreditAmount field.
func (o *MeteringUsageRecordReportInfo) SetUsedCreditAmount(v float32) {
	o.UsedCreditAmount = &v
}

// GetUsedCreditAmountIncrement returns the UsedCreditAmountIncrement field value if set, zero value otherwise.
func (o *MeteringUsageRecordReportInfo) GetUsedCreditAmountIncrement() float32 {
	if o == nil || IsNil(o.UsedCreditAmountIncrement) {
		var ret float32
		return ret
	}
	return *o.UsedCreditAmountIncrement
}

// GetUsedCreditAmountIncrementOk returns a tuple with the UsedCreditAmountIncrement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordReportInfo) GetUsedCreditAmountIncrementOk() (*float32, bool) {
	if o == nil || IsNil(o.UsedCreditAmountIncrement) {
		return nil, false
	}
	return o.UsedCreditAmountIncrement, true
}

// HasUsedCreditAmountIncrement returns a boolean if a field has been set.
func (o *MeteringUsageRecordReportInfo) HasUsedCreditAmountIncrement() bool {
	if o != nil && !IsNil(o.UsedCreditAmountIncrement) {
		return true
	}

	return false
}

// SetUsedCreditAmountIncrement gets a reference to the given float32 and assigns it to the UsedCreditAmountIncrement field.
func (o *MeteringUsageRecordReportInfo) SetUsedCreditAmountIncrement(v float32) {
	o.UsedCreditAmountIncrement = &v
}

func (o MeteringUsageRecordReportInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MeteringUsageRecordReportInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AggregatedBillableRecords) {
		toSerialize["aggregatedBillableRecords"] = o.AggregatedBillableRecords
	}
	if !IsNil(o.AlibabaMeteringRequest) {
		toSerialize["alibabaMeteringRequest"] = o.AlibabaMeteringRequest
	}
	if !IsNil(o.AlibabaMeteringResponse) {
		toSerialize["alibabaMeteringResponse"] = o.AlibabaMeteringResponse
	}
	if !IsNil(o.AwsMeteringRequest) {
		toSerialize["awsMeteringRequest"] = o.AwsMeteringRequest
	}
	if !IsNil(o.AwsMeteringResponse) {
		toSerialize["awsMeteringResponse"] = o.AwsMeteringResponse
	}
	if !IsNil(o.AzureMeteringRequest) {
		toSerialize["azureMeteringRequest"] = o.AzureMeteringRequest
	}
	if !IsNil(o.AzureMeteringResponse) {
		toSerialize["azureMeteringResponse"] = o.AzureMeteringResponse
	}
	if !IsNil(o.CommitAmount) {
		toSerialize["commitAmount"] = o.CommitAmount
	}
	if !IsNil(o.CreditAmount) {
		toSerialize["creditAmount"] = o.CreditAmount
	}
	if !IsNil(o.CreditRecords) {
		toSerialize["creditRecords"] = o.CreditRecords
	}
	if !IsNil(o.DecimalParts) {
		toSerialize["decimalParts"] = o.DecimalParts
	}
	if !IsNil(o.DimensionCategories) {
		toSerialize["dimensionCategories"] = o.DimensionCategories
	}
	if !IsNil(o.DimensionUnitListPrice) {
		toSerialize["dimensionUnitListPrice"] = o.DimensionUnitListPrice
	}
	if !IsNil(o.DimensionUnitPrice) {
		toSerialize["dimensionUnitPrice"] = o.DimensionUnitPrice
	}
	if !IsNil(o.EndTime) {
		toSerialize["endTime"] = o.EndTime
	}
	if !IsNil(o.GcpMeteringRequest) {
		toSerialize["gcpMeteringRequest"] = o.GcpMeteringRequest
	}
	if !IsNil(o.GcpMeteringResponse) {
		toSerialize["gcpMeteringResponse"] = o.GcpMeteringResponse
	}
	if !IsNil(o.IncludedRecords) {
		toSerialize["includedRecords"] = o.IncludedRecords
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.NewDecimalParts) {
		toSerialize["newDecimalParts"] = o.NewDecimalParts
	}
	if !IsNil(o.Partner) {
		toSerialize["partner"] = o.Partner
	}
	if !IsNil(o.RecordsToReportBeforeAdjustmentAtListPrice) {
		toSerialize["recordsToReportBeforeAdjustmentAtListPrice"] = o.RecordsToReportBeforeAdjustmentAtListPrice
	}
	if !IsNil(o.ReportedRecords) {
		toSerialize["reportedRecords"] = o.ReportedRecords
	}
	if !IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.UsageRecordGroupIds) {
		toSerialize["usageRecordGroupIds"] = o.UsageRecordGroupIds
	}
	if !IsNil(o.UsedCommitAmount) {
		toSerialize["usedCommitAmount"] = o.UsedCommitAmount
	}
	if !IsNil(o.UsedCommitAmountIncrement) {
		toSerialize["usedCommitAmountIncrement"] = o.UsedCommitAmountIncrement
	}
	if !IsNil(o.UsedCreditAmount) {
		toSerialize["usedCreditAmount"] = o.UsedCreditAmount
	}
	if !IsNil(o.UsedCreditAmountIncrement) {
		toSerialize["usedCreditAmountIncrement"] = o.UsedCreditAmountIncrement
	}
	return toSerialize, nil
}

type NullableMeteringUsageRecordReportInfo struct {
	value *MeteringUsageRecordReportInfo
	isSet bool
}

func (v NullableMeteringUsageRecordReportInfo) Get() *MeteringUsageRecordReportInfo {
	return v.value
}

func (v *NullableMeteringUsageRecordReportInfo) Set(val *MeteringUsageRecordReportInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableMeteringUsageRecordReportInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableMeteringUsageRecordReportInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeteringUsageRecordReportInfo(val *MeteringUsageRecordReportInfo) *NullableMeteringUsageRecordReportInfo {
	return &NullableMeteringUsageRecordReportInfo{value: val, isSet: true}
}

func (v NullableMeteringUsageRecordReportInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeteringUsageRecordReportInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
