/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AzureMarketplaceSubscriptionStatus the model 'AzureMarketplaceSubscriptionStatus'
type AzureMarketplaceSubscriptionStatus string

// List of AzureMarketplaceSubscriptionStatus
const (
	AzureMarketplaceSubscriptionStatus_NotStarted AzureMarketplaceSubscriptionStatus = "NotStarted"
	AzureMarketplaceSubscriptionStatus_PendingFulfillmentStart AzureMarketplaceSubscriptionStatus = "PendingFulfillmentStart"
	AzureMarketplaceSubscriptionStatus_Subscribed AzureMarketplaceSubscriptionStatus = "Subscribed"
	AzureMarketplaceSubscriptionStatus_Suspended AzureMarketplaceSubscriptionStatus = "Suspended"
	AzureMarketplaceSubscriptionStatus_Unsubscribed AzureMarketplaceSubscriptionStatus = "Unsubscribed"
)

// All allowed values of AzureMarketplaceSubscriptionStatus enum
var AllowedAzureMarketplaceSubscriptionStatusEnumValues = []AzureMarketplaceSubscriptionStatus{
	"NotStarted",
	"PendingFulfillmentStart",
	"Subscribed",
	"Suspended",
	"Unsubscribed",
}

func (v *AzureMarketplaceSubscriptionStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AzureMarketplaceSubscriptionStatus(value)
	for _, existing := range AllowedAzureMarketplaceSubscriptionStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AzureMarketplaceSubscriptionStatus", value)
}

// NewAzureMarketplaceSubscriptionStatusFromValue returns a pointer to a valid AzureMarketplaceSubscriptionStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAzureMarketplaceSubscriptionStatusFromValue(v string) (*AzureMarketplaceSubscriptionStatus, error) {
	ev := AzureMarketplaceSubscriptionStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AzureMarketplaceSubscriptionStatus: valid values are %v", v, AllowedAzureMarketplaceSubscriptionStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AzureMarketplaceSubscriptionStatus) IsValid() bool {
	for _, existing := range AllowedAzureMarketplaceSubscriptionStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AzureMarketplaceSubscriptionStatus value
func (v AzureMarketplaceSubscriptionStatus) Ptr() *AzureMarketplaceSubscriptionStatus {
	return &v
}

type NullableAzureMarketplaceSubscriptionStatus struct {
	value *AzureMarketplaceSubscriptionStatus
	isSet bool
}

func (v NullableAzureMarketplaceSubscriptionStatus) Get() *AzureMarketplaceSubscriptionStatus {
	return v.value
}

func (v *NullableAzureMarketplaceSubscriptionStatus) Set(val *AzureMarketplaceSubscriptionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureMarketplaceSubscriptionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureMarketplaceSubscriptionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureMarketplaceSubscriptionStatus(val *AzureMarketplaceSubscriptionStatus) *NullableAzureMarketplaceSubscriptionStatus {
	return &NullableAzureMarketplaceSubscriptionStatus{value: val, isSet: true}
}

func (v NullableAzureMarketplaceSubscriptionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureMarketplaceSubscriptionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

