/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CommitDimensionType the model 'CommitDimensionType'
type CommitDimensionType string

// List of CommitDimensionType
const (
	CommitDimensionType_FLAT_RATE CommitDimensionType = "FLAT_RATE"
	CommitDimensionType_PER_USER CommitDimensionType = "PER_USER"
)

// All allowed values of CommitDimensionType enum
var AllowedCommitDimensionTypeEnumValues = []CommitDimensionType{
	"FLAT_RATE",
	"PER_USER",
}

func (v *CommitDimensionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CommitDimensionType(value)
	for _, existing := range AllowedCommitDimensionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CommitDimensionType", value)
}

// NewCommitDimensionTypeFromValue returns a pointer to a valid CommitDimensionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCommitDimensionTypeFromValue(v string) (*CommitDimensionType, error) {
	ev := CommitDimensionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CommitDimensionType: valid values are %v", v, AllowedCommitDimensionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CommitDimensionType) IsValid() bool {
	for _, existing := range AllowedCommitDimensionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CommitDimensionType value
func (v CommitDimensionType) Ptr() *CommitDimensionType {
	return &v
}

type NullableCommitDimensionType struct {
	value *CommitDimensionType
	isSet bool
}

func (v NullableCommitDimensionType) Get() *CommitDimensionType {
	return v.value
}

func (v *NullableCommitDimensionType) Set(val *CommitDimensionType) {
	v.value = val
	v.isSet = true
}

func (v NullableCommitDimensionType) IsSet() bool {
	return v.isSet
}

func (v *NullableCommitDimensionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommitDimensionType(val *CommitDimensionType) *NullableCommitDimensionType {
	return &NullableCommitDimensionType{value: val, isSet: true}
}

func (v NullableCommitDimensionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommitDimensionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

