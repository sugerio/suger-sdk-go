/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
	"fmt"
)

// OrbBillingMode the model 'OrbBillingMode'
type OrbBillingMode string

// List of OrbBillingMode
const (
	OrbBillingMode_QUANTITY OrbBillingMode = "quantity"
	OrbBillingMode_AMOUNT   OrbBillingMode = "amount"
)

// All allowed values of OrbBillingMode enum
var AllowedOrbBillingModeEnumValues = []OrbBillingMode{
	"quantity",
	"amount",
}

func (v *OrbBillingMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrbBillingMode(value)
	for _, existing := range AllowedOrbBillingModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrbBillingMode", value)
}

// NewOrbBillingModeFromValue returns a pointer to a valid OrbBillingMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrbBillingModeFromValue(v string) (*OrbBillingMode, error) {
	ev := OrbBillingMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrbBillingMode: valid values are %v", v, AllowedOrbBillingModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrbBillingMode) IsValid() bool {
	for _, existing := range AllowedOrbBillingModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrbBillingMode value
func (v OrbBillingMode) Ptr() *OrbBillingMode {
	return &v
}

type NullableOrbBillingMode struct {
	value *OrbBillingMode
	isSet bool
}

func (v NullableOrbBillingMode) Get() *OrbBillingMode {
	return v.value
}

func (v *NullableOrbBillingMode) Set(val *OrbBillingMode) {
	v.value = val
	v.isSet = true
}

func (v NullableOrbBillingMode) IsSet() bool {
	return v.isSet
}

func (v *NullableOrbBillingMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrbBillingMode(val *OrbBillingMode) *NullableOrbBillingMode {
	return &NullableOrbBillingMode{value: val, isSet: true}
}

func (v NullableOrbBillingMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrbBillingMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
