/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NotificationMessageInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationMessageInfo{}

// NotificationMessageInfo struct for NotificationMessageInfo
type NotificationMessageInfo struct {
	// The action of this notification message.
	Action       *NotificationEventAction `json:"action,omitempty"`
	CcRecipients []string                 `json:"ccRecipients,omitempty"`
	// All other fields
	CustomFields map[string]interface{} `json:"customFields,omitempty"`
	// The HTML content of the email.
	HtmlContent   *string  `json:"htmlContent,omitempty"`
	RccRecipients []string `json:"rccRecipients,omitempty"`
	// The standard fields to render the email content.
	StandardFields map[string]interface{} `json:"standardFields,omitempty"`
	Subject        *string                `json:"subject,omitempty"`
	// The text content of the email in case the recipient's email client does not support HTML.
	TextContent *string `json:"textContent,omitempty"`
}

// NewNotificationMessageInfo instantiates a new NotificationMessageInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationMessageInfo() *NotificationMessageInfo {
	this := NotificationMessageInfo{}
	return &this
}

// NewNotificationMessageInfoWithDefaults instantiates a new NotificationMessageInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationMessageInfoWithDefaults() *NotificationMessageInfo {
	this := NotificationMessageInfo{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *NotificationMessageInfo) GetAction() NotificationEventAction {
	if o == nil || IsNil(o.Action) {
		var ret NotificationEventAction
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationMessageInfo) GetActionOk() (*NotificationEventAction, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *NotificationMessageInfo) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given NotificationEventAction and assigns it to the Action field.
func (o *NotificationMessageInfo) SetAction(v NotificationEventAction) {
	o.Action = &v
}

// GetCcRecipients returns the CcRecipients field value if set, zero value otherwise.
func (o *NotificationMessageInfo) GetCcRecipients() []string {
	if o == nil || IsNil(o.CcRecipients) {
		var ret []string
		return ret
	}
	return o.CcRecipients
}

// GetCcRecipientsOk returns a tuple with the CcRecipients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationMessageInfo) GetCcRecipientsOk() ([]string, bool) {
	if o == nil || IsNil(o.CcRecipients) {
		return nil, false
	}
	return o.CcRecipients, true
}

// HasCcRecipients returns a boolean if a field has been set.
func (o *NotificationMessageInfo) HasCcRecipients() bool {
	if o != nil && !IsNil(o.CcRecipients) {
		return true
	}

	return false
}

// SetCcRecipients gets a reference to the given []string and assigns it to the CcRecipients field.
func (o *NotificationMessageInfo) SetCcRecipients(v []string) {
	o.CcRecipients = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *NotificationMessageInfo) GetCustomFields() map[string]interface{} {
	if o == nil || IsNil(o.CustomFields) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationMessageInfo) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *NotificationMessageInfo) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *NotificationMessageInfo) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

// GetHtmlContent returns the HtmlContent field value if set, zero value otherwise.
func (o *NotificationMessageInfo) GetHtmlContent() string {
	if o == nil || IsNil(o.HtmlContent) {
		var ret string
		return ret
	}
	return *o.HtmlContent
}

// GetHtmlContentOk returns a tuple with the HtmlContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationMessageInfo) GetHtmlContentOk() (*string, bool) {
	if o == nil || IsNil(o.HtmlContent) {
		return nil, false
	}
	return o.HtmlContent, true
}

// HasHtmlContent returns a boolean if a field has been set.
func (o *NotificationMessageInfo) HasHtmlContent() bool {
	if o != nil && !IsNil(o.HtmlContent) {
		return true
	}

	return false
}

// SetHtmlContent gets a reference to the given string and assigns it to the HtmlContent field.
func (o *NotificationMessageInfo) SetHtmlContent(v string) {
	o.HtmlContent = &v
}

// GetRccRecipients returns the RccRecipients field value if set, zero value otherwise.
func (o *NotificationMessageInfo) GetRccRecipients() []string {
	if o == nil || IsNil(o.RccRecipients) {
		var ret []string
		return ret
	}
	return o.RccRecipients
}

// GetRccRecipientsOk returns a tuple with the RccRecipients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationMessageInfo) GetRccRecipientsOk() ([]string, bool) {
	if o == nil || IsNil(o.RccRecipients) {
		return nil, false
	}
	return o.RccRecipients, true
}

// HasRccRecipients returns a boolean if a field has been set.
func (o *NotificationMessageInfo) HasRccRecipients() bool {
	if o != nil && !IsNil(o.RccRecipients) {
		return true
	}

	return false
}

// SetRccRecipients gets a reference to the given []string and assigns it to the RccRecipients field.
func (o *NotificationMessageInfo) SetRccRecipients(v []string) {
	o.RccRecipients = v
}

// GetStandardFields returns the StandardFields field value if set, zero value otherwise.
func (o *NotificationMessageInfo) GetStandardFields() map[string]interface{} {
	if o == nil || IsNil(o.StandardFields) {
		var ret map[string]interface{}
		return ret
	}
	return o.StandardFields
}

// GetStandardFieldsOk returns a tuple with the StandardFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationMessageInfo) GetStandardFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.StandardFields) {
		return map[string]interface{}{}, false
	}
	return o.StandardFields, true
}

// HasStandardFields returns a boolean if a field has been set.
func (o *NotificationMessageInfo) HasStandardFields() bool {
	if o != nil && !IsNil(o.StandardFields) {
		return true
	}

	return false
}

// SetStandardFields gets a reference to the given map[string]interface{} and assigns it to the StandardFields field.
func (o *NotificationMessageInfo) SetStandardFields(v map[string]interface{}) {
	o.StandardFields = v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *NotificationMessageInfo) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationMessageInfo) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *NotificationMessageInfo) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *NotificationMessageInfo) SetSubject(v string) {
	o.Subject = &v
}

// GetTextContent returns the TextContent field value if set, zero value otherwise.
func (o *NotificationMessageInfo) GetTextContent() string {
	if o == nil || IsNil(o.TextContent) {
		var ret string
		return ret
	}
	return *o.TextContent
}

// GetTextContentOk returns a tuple with the TextContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationMessageInfo) GetTextContentOk() (*string, bool) {
	if o == nil || IsNil(o.TextContent) {
		return nil, false
	}
	return o.TextContent, true
}

// HasTextContent returns a boolean if a field has been set.
func (o *NotificationMessageInfo) HasTextContent() bool {
	if o != nil && !IsNil(o.TextContent) {
		return true
	}

	return false
}

// SetTextContent gets a reference to the given string and assigns it to the TextContent field.
func (o *NotificationMessageInfo) SetTextContent(v string) {
	o.TextContent = &v
}

func (o NotificationMessageInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationMessageInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !IsNil(o.CcRecipients) {
		toSerialize["ccRecipients"] = o.CcRecipients
	}
	if !IsNil(o.CustomFields) {
		toSerialize["customFields"] = o.CustomFields
	}
	if !IsNil(o.HtmlContent) {
		toSerialize["htmlContent"] = o.HtmlContent
	}
	if !IsNil(o.RccRecipients) {
		toSerialize["rccRecipients"] = o.RccRecipients
	}
	if !IsNil(o.StandardFields) {
		toSerialize["standardFields"] = o.StandardFields
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.TextContent) {
		toSerialize["textContent"] = o.TextContent
	}
	return toSerialize, nil
}

type NullableNotificationMessageInfo struct {
	value *NotificationMessageInfo
	isSet bool
}

func (v NullableNotificationMessageInfo) Get() *NotificationMessageInfo {
	return v.value
}

func (v *NullableNotificationMessageInfo) Set(val *NotificationMessageInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationMessageInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationMessageInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationMessageInfo(val *NotificationMessageInfo) *NullableNotificationMessageInfo {
	return &NullableNotificationMessageInfo{value: val, isSet: true}
}

func (v NullableNotificationMessageInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationMessageInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
