/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PriceModelVolume type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PriceModelVolume{}

// PriceModelVolume struct for PriceModelVolume
type PriceModelVolume struct {
	Tiers []PriceModelVolumeConfig `json:"tiers,omitempty"`
}

// NewPriceModelVolume instantiates a new PriceModelVolume object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPriceModelVolume() *PriceModelVolume {
	this := PriceModelVolume{}
	return &this
}

// NewPriceModelVolumeWithDefaults instantiates a new PriceModelVolume object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPriceModelVolumeWithDefaults() *PriceModelVolume {
	this := PriceModelVolume{}
	return &this
}

// GetTiers returns the Tiers field value if set, zero value otherwise.
func (o *PriceModelVolume) GetTiers() []PriceModelVolumeConfig {
	if o == nil || IsNil(o.Tiers) {
		var ret []PriceModelVolumeConfig
		return ret
	}
	return o.Tiers
}

// GetTiersOk returns a tuple with the Tiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceModelVolume) GetTiersOk() ([]PriceModelVolumeConfig, bool) {
	if o == nil || IsNil(o.Tiers) {
		return nil, false
	}
	return o.Tiers, true
}

// HasTiers returns a boolean if a field has been set.
func (o *PriceModelVolume) HasTiers() bool {
	if o != nil && !IsNil(o.Tiers) {
		return true
	}

	return false
}

// SetTiers gets a reference to the given []PriceModelVolumeConfig and assigns it to the Tiers field.
func (o *PriceModelVolume) SetTiers(v []PriceModelVolumeConfig) {
	o.Tiers = v
}

func (o PriceModelVolume) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PriceModelVolume) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tiers) {
		toSerialize["tiers"] = o.Tiers
	}
	return toSerialize, nil
}

type NullablePriceModelVolume struct {
	value *PriceModelVolume
	isSet bool
}

func (v NullablePriceModelVolume) Get() *PriceModelVolume {
	return v.value
}

func (v *NullablePriceModelVolume) Set(val *PriceModelVolume) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceModelVolume) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceModelVolume) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceModelVolume(val *PriceModelVolume) *NullablePriceModelVolume {
	return &NullablePriceModelVolume{value: val, isSet: true}
}

func (v NullablePriceModelVolume) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceModelVolume) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
