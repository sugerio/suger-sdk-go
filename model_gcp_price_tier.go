/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
)

// checks if the GcpPriceTier type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GcpPriceTier{}

// GcpPriceTier struct for GcpPriceTier
type GcpPriceTier struct {
	// such as 0
	FromAmount *float32       `json:"fromAmount,omitempty"`
	Price      *GcpPriceValue `json:"price,omitempty"`
	// such as \"0\"
	StartingUsageAmount *string `json:"startingUsageAmount,omitempty"`
}

// NewGcpPriceTier instantiates a new GcpPriceTier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGcpPriceTier() *GcpPriceTier {
	this := GcpPriceTier{}
	return &this
}

// NewGcpPriceTierWithDefaults instantiates a new GcpPriceTier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGcpPriceTierWithDefaults() *GcpPriceTier {
	this := GcpPriceTier{}
	return &this
}

// GetFromAmount returns the FromAmount field value if set, zero value otherwise.
func (o *GcpPriceTier) GetFromAmount() float32 {
	if o == nil || IsNil(o.FromAmount) {
		var ret float32
		return ret
	}
	return *o.FromAmount
}

// GetFromAmountOk returns a tuple with the FromAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpPriceTier) GetFromAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.FromAmount) {
		return nil, false
	}
	return o.FromAmount, true
}

// HasFromAmount returns a boolean if a field has been set.
func (o *GcpPriceTier) HasFromAmount() bool {
	if o != nil && !IsNil(o.FromAmount) {
		return true
	}

	return false
}

// SetFromAmount gets a reference to the given float32 and assigns it to the FromAmount field.
func (o *GcpPriceTier) SetFromAmount(v float32) {
	o.FromAmount = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *GcpPriceTier) GetPrice() GcpPriceValue {
	if o == nil || IsNil(o.Price) {
		var ret GcpPriceValue
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpPriceTier) GetPriceOk() (*GcpPriceValue, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *GcpPriceTier) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given GcpPriceValue and assigns it to the Price field.
func (o *GcpPriceTier) SetPrice(v GcpPriceValue) {
	o.Price = &v
}

// GetStartingUsageAmount returns the StartingUsageAmount field value if set, zero value otherwise.
func (o *GcpPriceTier) GetStartingUsageAmount() string {
	if o == nil || IsNil(o.StartingUsageAmount) {
		var ret string
		return ret
	}
	return *o.StartingUsageAmount
}

// GetStartingUsageAmountOk returns a tuple with the StartingUsageAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpPriceTier) GetStartingUsageAmountOk() (*string, bool) {
	if o == nil || IsNil(o.StartingUsageAmount) {
		return nil, false
	}
	return o.StartingUsageAmount, true
}

// HasStartingUsageAmount returns a boolean if a field has been set.
func (o *GcpPriceTier) HasStartingUsageAmount() bool {
	if o != nil && !IsNil(o.StartingUsageAmount) {
		return true
	}

	return false
}

// SetStartingUsageAmount gets a reference to the given string and assigns it to the StartingUsageAmount field.
func (o *GcpPriceTier) SetStartingUsageAmount(v string) {
	o.StartingUsageAmount = &v
}

func (o GcpPriceTier) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GcpPriceTier) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FromAmount) {
		toSerialize["fromAmount"] = o.FromAmount
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.StartingUsageAmount) {
		toSerialize["startingUsageAmount"] = o.StartingUsageAmount
	}
	return toSerialize, nil
}

type NullableGcpPriceTier struct {
	value *GcpPriceTier
	isSet bool
}

func (v NullableGcpPriceTier) Get() *GcpPriceTier {
	return v.value
}

func (v *NullableGcpPriceTier) Set(val *GcpPriceTier) {
	v.value = val
	v.isSet = true
}

func (v NullableGcpPriceTier) IsSet() bool {
	return v.isSet
}

func (v *NullableGcpPriceTier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGcpPriceTier(val *GcpPriceTier) *NullableGcpPriceTier {
	return &NullableGcpPriceTier{value: val, isSet: true}
}

func (v NullableGcpPriceTier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGcpPriceTier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
