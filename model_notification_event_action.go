/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// NotificationEventAction the model 'NotificationEventAction'
type NotificationEventAction string

// List of NotificationEventAction
const (
	NotificationEventAction_ACCEPT NotificationEventAction = "ACCEPT"
	NotificationEventAction_CREATE NotificationEventAction = "CREATE"
	NotificationEventAction_DELETE NotificationEventAction = "DELETE"
	NotificationEventAction_CANCEL NotificationEventAction = "CANCEL"
	NotificationEventAction_PENDING_CANCEL NotificationEventAction = "PENDING_CANCEL"
	NotificationEventAction_EXPIRE NotificationEventAction = "EXPIRE"
	NotificationEventAction_REINSTATE NotificationEventAction = "REINSTATE"
	NotificationEventAction_SUSPEND NotificationEventAction = "SUSPEND"
	NotificationEventAction_UPDATE NotificationEventAction = "UPDATE"
	NotificationEventAction_PENDING_ACCEPTANCE NotificationEventAction = "PENDING_ACCEPTANCE"
	NotificationEventAction_NOTIFY_CONTACTS NotificationEventAction = "NOTIFY_CONTACTS"
	NotificationEventAction_NEW_CLIENT_SIGNUP NotificationEventAction = "NEW_CLIENT_SIGNUP"
	NotificationEventAction_REVENUE_DISBURSEMENT NotificationEventAction = "REVENUE_DISBURSEMENT"
	NotificationEventAction_OPEN_EMAIL NotificationEventAction = "OPEN_EMAIL"
	NotificationEventAction_TEST NotificationEventAction = "TEST"
)

// All allowed values of NotificationEventAction enum
var AllowedNotificationEventActionEnumValues = []NotificationEventAction{
	"ACCEPT",
	"CREATE",
	"DELETE",
	"CANCEL",
	"PENDING_CANCEL",
	"EXPIRE",
	"REINSTATE",
	"SUSPEND",
	"UPDATE",
	"PENDING_ACCEPTANCE",
	"NOTIFY_CONTACTS",
	"NEW_CLIENT_SIGNUP",
	"REVENUE_DISBURSEMENT",
	"OPEN_EMAIL",
	"TEST",
}

func (v *NotificationEventAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NotificationEventAction(value)
	for _, existing := range AllowedNotificationEventActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NotificationEventAction", value)
}

// NewNotificationEventActionFromValue returns a pointer to a valid NotificationEventAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNotificationEventActionFromValue(v string) (*NotificationEventAction, error) {
	ev := NotificationEventAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NotificationEventAction: valid values are %v", v, AllowedNotificationEventActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NotificationEventAction) IsValid() bool {
	for _, existing := range AllowedNotificationEventActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NotificationEventAction value
func (v NotificationEventAction) Ptr() *NotificationEventAction {
	return &v
}

type NullableNotificationEventAction struct {
	value *NotificationEventAction
	isSet bool
}

func (v NullableNotificationEventAction) Get() *NotificationEventAction {
	return v.value
}

func (v *NullableNotificationEventAction) Set(val *NotificationEventAction) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationEventAction) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationEventAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationEventAction(val *NotificationEventAction) *NullableNotificationEventAction {
	return &NullableNotificationEventAction{value: val, isSet: true}
}

func (v NullableNotificationEventAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationEventAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

