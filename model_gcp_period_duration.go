/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
)

// checks if the GcpPeriodDuration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GcpPeriodDuration{}

// GcpPeriodDuration struct for GcpPeriodDuration
type GcpPeriodDuration struct {
	// such as 1, 6, 12
	Count *int32                 `json:"count,omitempty"`
	Unit  *GcpPeriodDurationUnit `json:"unit,omitempty"`
}

// NewGcpPeriodDuration instantiates a new GcpPeriodDuration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGcpPeriodDuration() *GcpPeriodDuration {
	this := GcpPeriodDuration{}
	return &this
}

// NewGcpPeriodDurationWithDefaults instantiates a new GcpPeriodDuration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGcpPeriodDurationWithDefaults() *GcpPeriodDuration {
	this := GcpPeriodDuration{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *GcpPeriodDuration) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpPeriodDuration) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *GcpPeriodDuration) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *GcpPeriodDuration) SetCount(v int32) {
	o.Count = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *GcpPeriodDuration) GetUnit() GcpPeriodDurationUnit {
	if o == nil || IsNil(o.Unit) {
		var ret GcpPeriodDurationUnit
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpPeriodDuration) GetUnitOk() (*GcpPeriodDurationUnit, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *GcpPeriodDuration) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given GcpPeriodDurationUnit and assigns it to the Unit field.
func (o *GcpPeriodDuration) SetUnit(v GcpPeriodDurationUnit) {
	o.Unit = &v
}

func (o GcpPeriodDuration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GcpPeriodDuration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	return toSerialize, nil
}

type NullableGcpPeriodDuration struct {
	value *GcpPeriodDuration
	isSet bool
}

func (v NullableGcpPeriodDuration) Get() *GcpPeriodDuration {
	return v.value
}

func (v *NullableGcpPeriodDuration) Set(val *GcpPeriodDuration) {
	v.value = val
	v.isSet = true
}

func (v NullableGcpPeriodDuration) IsSet() bool {
	return v.isSet
}

func (v *NullableGcpPeriodDuration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGcpPeriodDuration(val *GcpPeriodDuration) *NullableGcpPeriodDuration {
	return &NullableGcpPeriodDuration{value: val, isSet: true}
}

func (v NullableGcpPeriodDuration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGcpPeriodDuration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
