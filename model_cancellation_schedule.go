/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CancellationSchedule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CancellationSchedule{}

// CancellationSchedule struct for CancellationSchedule
type CancellationSchedule struct {
	// The cancellation date of the entitlement. It is required when the type is SpecificDate.
	CancelDate *string `json:"cancelDate,omitempty"`
	// When this cancellation schedule is created.
	CreationDate *string `json:"creationDate,omitempty"`
	// The cancellation note. Max 500 characters.
	Note *string `json:"note,omitempty"`
	// Cancellation type
	Type *CancellationScheduleType `json:"type,omitempty"`
}

// NewCancellationSchedule instantiates a new CancellationSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCancellationSchedule() *CancellationSchedule {
	this := CancellationSchedule{}
	return &this
}

// NewCancellationScheduleWithDefaults instantiates a new CancellationSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCancellationScheduleWithDefaults() *CancellationSchedule {
	this := CancellationSchedule{}
	return &this
}

// GetCancelDate returns the CancelDate field value if set, zero value otherwise.
func (o *CancellationSchedule) GetCancelDate() string {
	if o == nil || IsNil(o.CancelDate) {
		var ret string
		return ret
	}
	return *o.CancelDate
}

// GetCancelDateOk returns a tuple with the CancelDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancellationSchedule) GetCancelDateOk() (*string, bool) {
	if o == nil || IsNil(o.CancelDate) {
		return nil, false
	}
	return o.CancelDate, true
}

// HasCancelDate returns a boolean if a field has been set.
func (o *CancellationSchedule) HasCancelDate() bool {
	if o != nil && !IsNil(o.CancelDate) {
		return true
	}

	return false
}

// SetCancelDate gets a reference to the given string and assigns it to the CancelDate field.
func (o *CancellationSchedule) SetCancelDate(v string) {
	o.CancelDate = &v
}

// GetCreationDate returns the CreationDate field value if set, zero value otherwise.
func (o *CancellationSchedule) GetCreationDate() string {
	if o == nil || IsNil(o.CreationDate) {
		var ret string
		return ret
	}
	return *o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancellationSchedule) GetCreationDateOk() (*string, bool) {
	if o == nil || IsNil(o.CreationDate) {
		return nil, false
	}
	return o.CreationDate, true
}

// HasCreationDate returns a boolean if a field has been set.
func (o *CancellationSchedule) HasCreationDate() bool {
	if o != nil && !IsNil(o.CreationDate) {
		return true
	}

	return false
}

// SetCreationDate gets a reference to the given string and assigns it to the CreationDate field.
func (o *CancellationSchedule) SetCreationDate(v string) {
	o.CreationDate = &v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *CancellationSchedule) GetNote() string {
	if o == nil || IsNil(o.Note) {
		var ret string
		return ret
	}
	return *o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancellationSchedule) GetNoteOk() (*string, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *CancellationSchedule) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given string and assigns it to the Note field.
func (o *CancellationSchedule) SetNote(v string) {
	o.Note = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CancellationSchedule) GetType() CancellationScheduleType {
	if o == nil || IsNil(o.Type) {
		var ret CancellationScheduleType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancellationSchedule) GetTypeOk() (*CancellationScheduleType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CancellationSchedule) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given CancellationScheduleType and assigns it to the Type field.
func (o *CancellationSchedule) SetType(v CancellationScheduleType) {
	o.Type = &v
}

func (o CancellationSchedule) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CancellationSchedule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CancelDate) {
		toSerialize["cancelDate"] = o.CancelDate
	}
	if !IsNil(o.CreationDate) {
		toSerialize["creationDate"] = o.CreationDate
	}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableCancellationSchedule struct {
	value *CancellationSchedule
	isSet bool
}

func (v NullableCancellationSchedule) Get() *CancellationSchedule {
	return v.value
}

func (v *NullableCancellationSchedule) Set(val *CancellationSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableCancellationSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableCancellationSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCancellationSchedule(val *CancellationSchedule) *NullableCancellationSchedule {
	return &NullableCancellationSchedule{value: val, isSet: true}
}

func (v NullableCancellationSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCancellationSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
