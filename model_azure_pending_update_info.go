/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AzurePendingUpdateInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzurePendingUpdateInfo{}

// AzurePendingUpdateInfo struct for AzurePendingUpdateInfo
type AzurePendingUpdateInfo struct {
	Status *string `json:"status,omitempty"`
	UpdateType *string `json:"updateType,omitempty"`
}

// NewAzurePendingUpdateInfo instantiates a new AzurePendingUpdateInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzurePendingUpdateInfo() *AzurePendingUpdateInfo {
	this := AzurePendingUpdateInfo{}
	return &this
}

// NewAzurePendingUpdateInfoWithDefaults instantiates a new AzurePendingUpdateInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzurePendingUpdateInfoWithDefaults() *AzurePendingUpdateInfo {
	this := AzurePendingUpdateInfo{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *AzurePendingUpdateInfo) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzurePendingUpdateInfo) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *AzurePendingUpdateInfo) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *AzurePendingUpdateInfo) SetStatus(v string) {
	o.Status = &v
}

// GetUpdateType returns the UpdateType field value if set, zero value otherwise.
func (o *AzurePendingUpdateInfo) GetUpdateType() string {
	if o == nil || IsNil(o.UpdateType) {
		var ret string
		return ret
	}
	return *o.UpdateType
}

// GetUpdateTypeOk returns a tuple with the UpdateType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzurePendingUpdateInfo) GetUpdateTypeOk() (*string, bool) {
	if o == nil || IsNil(o.UpdateType) {
		return nil, false
	}
	return o.UpdateType, true
}

// HasUpdateType returns a boolean if a field has been set.
func (o *AzurePendingUpdateInfo) HasUpdateType() bool {
	if o != nil && !IsNil(o.UpdateType) {
		return true
	}

	return false
}

// SetUpdateType gets a reference to the given string and assigns it to the UpdateType field.
func (o *AzurePendingUpdateInfo) SetUpdateType(v string) {
	o.UpdateType = &v
}

func (o AzurePendingUpdateInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzurePendingUpdateInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.UpdateType) {
		toSerialize["updateType"] = o.UpdateType
	}
	return toSerialize, nil
}

type NullableAzurePendingUpdateInfo struct {
	value *AzurePendingUpdateInfo
	isSet bool
}

func (v NullableAzurePendingUpdateInfo) Get() *AzurePendingUpdateInfo {
	return v.value
}

func (v *NullableAzurePendingUpdateInfo) Set(val *AzurePendingUpdateInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAzurePendingUpdateInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAzurePendingUpdateInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzurePendingUpdateInfo(val *AzurePendingUpdateInfo) *NullableAzurePendingUpdateInfo {
	return &NullableAzurePendingUpdateInfo{value: val, isSet: true}
}

func (v NullableAzurePendingUpdateInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzurePendingUpdateInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


