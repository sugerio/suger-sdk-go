/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// RevenueReportType the model 'RevenueReportType'
type RevenueReportType string

// List of RevenueReportType
const (
	RevenueReportType_InvoicedAmount RevenueReportType = "InvoicedAmount"
	RevenueReportType_CollectableAmount RevenueReportType = "CollectableAmount"
	RevenueReportType_DisbursedAmount RevenueReportType = "DisbursedAmount"
)

// All allowed values of RevenueReportType enum
var AllowedRevenueReportTypeEnumValues = []RevenueReportType{
	"InvoicedAmount",
	"CollectableAmount",
	"DisbursedAmount",
}

func (v *RevenueReportType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RevenueReportType(value)
	for _, existing := range AllowedRevenueReportTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RevenueReportType", value)
}

// NewRevenueReportTypeFromValue returns a pointer to a valid RevenueReportType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRevenueReportTypeFromValue(v string) (*RevenueReportType, error) {
	ev := RevenueReportType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RevenueReportType: valid values are %v", v, AllowedRevenueReportTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RevenueReportType) IsValid() bool {
	for _, existing := range AllowedRevenueReportTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RevenueReportType value
func (v RevenueReportType) Ptr() *RevenueReportType {
	return &v
}

type NullableRevenueReportType struct {
	value *RevenueReportType
	isSet bool
}

func (v NullableRevenueReportType) Get() *RevenueReportType {
	return v.value
}

func (v *NullableRevenueReportType) Set(val *RevenueReportType) {
	v.value = val
	v.isSet = true
}

func (v NullableRevenueReportType) IsSet() bool {
	return v.isSet
}

func (v *NullableRevenueReportType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRevenueReportType(val *RevenueReportType) *NullableRevenueReportType {
	return &NullableRevenueReportType{value: val, isSet: true}
}

func (v NullableRevenueReportType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRevenueReportType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

