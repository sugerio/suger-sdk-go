/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AzureMarketplaceResourceLifecycleState the model 'AzureMarketplaceResourceLifecycleState'
type AzureMarketplaceResourceLifecycleState string

// List of AzureMarketplaceResourceLifecycleState
const (
	AzureMarketplaceResourceLifecycleState_NotAvailable       AzureMarketplaceResourceLifecycleState = "notAvailable"
	AzureMarketplaceResourceLifecycleState_NeverUsed          AzureMarketplaceResourceLifecycleState = "neverUsed"
	AzureMarketplaceResourceLifecycleState_Test               AzureMarketplaceResourceLifecycleState = "test"
	AzureMarketplaceResourceLifecycleState_Preview            AzureMarketplaceResourceLifecycleState = "preview"
	AzureMarketplaceResourceLifecycleState_GenerallyAvailable AzureMarketplaceResourceLifecycleState = "generallyAvailable"
	AzureMarketplaceResourceLifecycleState_Deprecated         AzureMarketplaceResourceLifecycleState = "deprecated"
	AzureMarketplaceResourceLifecycleState_Decommissioned     AzureMarketplaceResourceLifecycleState = "decommissioned"
	AzureMarketplaceResourceLifecycleState_Deleted            AzureMarketplaceResourceLifecycleState = "deleted"
)

// All allowed values of AzureMarketplaceResourceLifecycleState enum
var AllowedAzureMarketplaceResourceLifecycleStateEnumValues = []AzureMarketplaceResourceLifecycleState{
	"notAvailable",
	"neverUsed",
	"test",
	"preview",
	"generallyAvailable",
	"deprecated",
	"decommissioned",
	"deleted",
}

func (v *AzureMarketplaceResourceLifecycleState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AzureMarketplaceResourceLifecycleState(value)
	for _, existing := range AllowedAzureMarketplaceResourceLifecycleStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AzureMarketplaceResourceLifecycleState", value)
}

// NewAzureMarketplaceResourceLifecycleStateFromValue returns a pointer to a valid AzureMarketplaceResourceLifecycleState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAzureMarketplaceResourceLifecycleStateFromValue(v string) (*AzureMarketplaceResourceLifecycleState, error) {
	ev := AzureMarketplaceResourceLifecycleState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AzureMarketplaceResourceLifecycleState: valid values are %v", v, AllowedAzureMarketplaceResourceLifecycleStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AzureMarketplaceResourceLifecycleState) IsValid() bool {
	for _, existing := range AllowedAzureMarketplaceResourceLifecycleStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AzureMarketplaceResourceLifecycleState value
func (v AzureMarketplaceResourceLifecycleState) Ptr() *AzureMarketplaceResourceLifecycleState {
	return &v
}

type NullableAzureMarketplaceResourceLifecycleState struct {
	value *AzureMarketplaceResourceLifecycleState
	isSet bool
}

func (v NullableAzureMarketplaceResourceLifecycleState) Get() *AzureMarketplaceResourceLifecycleState {
	return v.value
}

func (v *NullableAzureMarketplaceResourceLifecycleState) Set(val *AzureMarketplaceResourceLifecycleState) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureMarketplaceResourceLifecycleState) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureMarketplaceResourceLifecycleState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureMarketplaceResourceLifecycleState(val *AzureMarketplaceResourceLifecycleState) *NullableAzureMarketplaceResourceLifecycleState {
	return &NullableAzureMarketplaceResourceLifecycleState{value: val, isSet: true}
}

func (v NullableAzureMarketplaceResourceLifecycleState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureMarketplaceResourceLifecycleState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
