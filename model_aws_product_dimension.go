/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
)

// checks if the AwsProductDimension type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsProductDimension{}

// AwsProductDimension struct for AwsProductDimension
type AwsProductDimension struct {
	Description *string `json:"Description,omitempty"`
	Key         *string `json:"Key,omitempty"`
	// The term length for the commit amount, such as 6 months, or 1 year. The length is used together with timeUnit. Length and TimeUnit are only used for commit dimension.
	Length *int32  `json:"Length,omitempty"`
	Name   *string `json:"Name,omitempty"`
	// Below three fields are only used for pass data when create or update product's public offer pricing. Rate is only used for update public offer, becasue rate will be set as 0.01 when create new product.
	Rate     *float32  `json:"Rate,omitempty"`
	TimeUnit *TimeUnit `json:"TimeUnit,omitempty"`
	Types    []string  `json:"Types,omitempty"`
	Unit     *string   `json:"Unit,omitempty"`
}

// NewAwsProductDimension instantiates a new AwsProductDimension object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsProductDimension() *AwsProductDimension {
	this := AwsProductDimension{}
	return &this
}

// NewAwsProductDimensionWithDefaults instantiates a new AwsProductDimension object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsProductDimensionWithDefaults() *AwsProductDimension {
	this := AwsProductDimension{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AwsProductDimension) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsProductDimension) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AwsProductDimension) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AwsProductDimension) SetDescription(v string) {
	o.Description = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *AwsProductDimension) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsProductDimension) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *AwsProductDimension) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *AwsProductDimension) SetKey(v string) {
	o.Key = &v
}

// GetLength returns the Length field value if set, zero value otherwise.
func (o *AwsProductDimension) GetLength() int32 {
	if o == nil || IsNil(o.Length) {
		var ret int32
		return ret
	}
	return *o.Length
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsProductDimension) GetLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.Length) {
		return nil, false
	}
	return o.Length, true
}

// HasLength returns a boolean if a field has been set.
func (o *AwsProductDimension) HasLength() bool {
	if o != nil && !IsNil(o.Length) {
		return true
	}

	return false
}

// SetLength gets a reference to the given int32 and assigns it to the Length field.
func (o *AwsProductDimension) SetLength(v int32) {
	o.Length = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AwsProductDimension) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsProductDimension) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AwsProductDimension) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AwsProductDimension) SetName(v string) {
	o.Name = &v
}

// GetRate returns the Rate field value if set, zero value otherwise.
func (o *AwsProductDimension) GetRate() float32 {
	if o == nil || IsNil(o.Rate) {
		var ret float32
		return ret
	}
	return *o.Rate
}

// GetRateOk returns a tuple with the Rate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsProductDimension) GetRateOk() (*float32, bool) {
	if o == nil || IsNil(o.Rate) {
		return nil, false
	}
	return o.Rate, true
}

// HasRate returns a boolean if a field has been set.
func (o *AwsProductDimension) HasRate() bool {
	if o != nil && !IsNil(o.Rate) {
		return true
	}

	return false
}

// SetRate gets a reference to the given float32 and assigns it to the Rate field.
func (o *AwsProductDimension) SetRate(v float32) {
	o.Rate = &v
}

// GetTimeUnit returns the TimeUnit field value if set, zero value otherwise.
func (o *AwsProductDimension) GetTimeUnit() TimeUnit {
	if o == nil || IsNil(o.TimeUnit) {
		var ret TimeUnit
		return ret
	}
	return *o.TimeUnit
}

// GetTimeUnitOk returns a tuple with the TimeUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsProductDimension) GetTimeUnitOk() (*TimeUnit, bool) {
	if o == nil || IsNil(o.TimeUnit) {
		return nil, false
	}
	return o.TimeUnit, true
}

// HasTimeUnit returns a boolean if a field has been set.
func (o *AwsProductDimension) HasTimeUnit() bool {
	if o != nil && !IsNil(o.TimeUnit) {
		return true
	}

	return false
}

// SetTimeUnit gets a reference to the given TimeUnit and assigns it to the TimeUnit field.
func (o *AwsProductDimension) SetTimeUnit(v TimeUnit) {
	o.TimeUnit = &v
}

// GetTypes returns the Types field value if set, zero value otherwise.
func (o *AwsProductDimension) GetTypes() []string {
	if o == nil || IsNil(o.Types) {
		var ret []string
		return ret
	}
	return o.Types
}

// GetTypesOk returns a tuple with the Types field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsProductDimension) GetTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.Types) {
		return nil, false
	}
	return o.Types, true
}

// HasTypes returns a boolean if a field has been set.
func (o *AwsProductDimension) HasTypes() bool {
	if o != nil && !IsNil(o.Types) {
		return true
	}

	return false
}

// SetTypes gets a reference to the given []string and assigns it to the Types field.
func (o *AwsProductDimension) SetTypes(v []string) {
	o.Types = v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *AwsProductDimension) GetUnit() string {
	if o == nil || IsNil(o.Unit) {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsProductDimension) GetUnitOk() (*string, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *AwsProductDimension) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *AwsProductDimension) SetUnit(v string) {
	o.Unit = &v
}

func (o AwsProductDimension) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsProductDimension) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	if !IsNil(o.Key) {
		toSerialize["Key"] = o.Key
	}
	if !IsNil(o.Length) {
		toSerialize["Length"] = o.Length
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.Rate) {
		toSerialize["Rate"] = o.Rate
	}
	if !IsNil(o.TimeUnit) {
		toSerialize["TimeUnit"] = o.TimeUnit
	}
	if !IsNil(o.Types) {
		toSerialize["Types"] = o.Types
	}
	if !IsNil(o.Unit) {
		toSerialize["Unit"] = o.Unit
	}
	return toSerialize, nil
}

type NullableAwsProductDimension struct {
	value *AwsProductDimension
	isSet bool
}

func (v NullableAwsProductDimension) Get() *AwsProductDimension {
	return v.value
}

func (v *NullableAwsProductDimension) Set(val *AwsProductDimension) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsProductDimension) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsProductDimension) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsProductDimension(val *AwsProductDimension) *NullableAwsProductDimension {
	return &NullableAwsProductDimension{value: val, isSet: true}
}

func (v NullableAwsProductDimension) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsProductDimension) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
