/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TimeUnit the model 'TimeUnit'
type TimeUnit string

// List of TimeUnit
const (
	TimeUnit_DAY   TimeUnit = "DAY"
	TimeUnit_MONTH TimeUnit = "MONTH"
	TimeUnit_YEAR  TimeUnit = "YEAR"
)

// All allowed values of TimeUnit enum
var AllowedTimeUnitEnumValues = []TimeUnit{
	"DAY",
	"MONTH",
	"YEAR",
}

func (v *TimeUnit) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TimeUnit(value)
	for _, existing := range AllowedTimeUnitEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TimeUnit", value)
}

// NewTimeUnitFromValue returns a pointer to a valid TimeUnit
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTimeUnitFromValue(v string) (*TimeUnit, error) {
	ev := TimeUnit(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TimeUnit: valid values are %v", v, AllowedTimeUnitEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TimeUnit) IsValid() bool {
	for _, existing := range AllowedTimeUnitEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TimeUnit value
func (v TimeUnit) Ptr() *TimeUnit {
	return &v
}

type NullableTimeUnit struct {
	value *TimeUnit
	isSet bool
}

func (v NullableTimeUnit) Get() *TimeUnit {
	return v.value
}

func (v *NullableTimeUnit) Set(val *TimeUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeUnit(val *TimeUnit) *NullableTimeUnit {
	return &NullableTimeUnit{value: val, isSet: true}
}

func (v NullableTimeUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
