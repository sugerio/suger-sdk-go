/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OrbPriceDiscount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrbPriceDiscount{}

// OrbPriceDiscount struct for OrbPriceDiscount
type OrbPriceDiscount struct {
	// Only available if discount_type is amount.
	AmountDiscount *string `json:"amount_discount,omitempty"`
	AppliesToPriceIds []string `json:"applies_to_price_ids,omitempty"`
	DiscountType *OrbPriceDiscountType `json:"discount_type,omitempty"`
	// Only available if discount_type is percentage.This is a number between 0 and 1.
	PercentageDiscount *float32 `json:"percentage_discount,omitempty"`
	// Only available if discount_type is trial
	TrialAmountDiscount *string `json:"trial_amount_discount,omitempty"`
	// Only available if discount_type is usage. Number of usage units that this discount is for
	UsageDiscount *string `json:"usage_discount,omitempty"`
}

// NewOrbPriceDiscount instantiates a new OrbPriceDiscount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrbPriceDiscount() *OrbPriceDiscount {
	this := OrbPriceDiscount{}
	return &this
}

// NewOrbPriceDiscountWithDefaults instantiates a new OrbPriceDiscount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrbPriceDiscountWithDefaults() *OrbPriceDiscount {
	this := OrbPriceDiscount{}
	return &this
}

// GetAmountDiscount returns the AmountDiscount field value if set, zero value otherwise.
func (o *OrbPriceDiscount) GetAmountDiscount() string {
	if o == nil || IsNil(o.AmountDiscount) {
		var ret string
		return ret
	}
	return *o.AmountDiscount
}

// GetAmountDiscountOk returns a tuple with the AmountDiscount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPriceDiscount) GetAmountDiscountOk() (*string, bool) {
	if o == nil || IsNil(o.AmountDiscount) {
		return nil, false
	}
	return o.AmountDiscount, true
}

// HasAmountDiscount returns a boolean if a field has been set.
func (o *OrbPriceDiscount) HasAmountDiscount() bool {
	if o != nil && !IsNil(o.AmountDiscount) {
		return true
	}

	return false
}

// SetAmountDiscount gets a reference to the given string and assigns it to the AmountDiscount field.
func (o *OrbPriceDiscount) SetAmountDiscount(v string) {
	o.AmountDiscount = &v
}

// GetAppliesToPriceIds returns the AppliesToPriceIds field value if set, zero value otherwise.
func (o *OrbPriceDiscount) GetAppliesToPriceIds() []string {
	if o == nil || IsNil(o.AppliesToPriceIds) {
		var ret []string
		return ret
	}
	return o.AppliesToPriceIds
}

// GetAppliesToPriceIdsOk returns a tuple with the AppliesToPriceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPriceDiscount) GetAppliesToPriceIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.AppliesToPriceIds) {
		return nil, false
	}
	return o.AppliesToPriceIds, true
}

// HasAppliesToPriceIds returns a boolean if a field has been set.
func (o *OrbPriceDiscount) HasAppliesToPriceIds() bool {
	if o != nil && !IsNil(o.AppliesToPriceIds) {
		return true
	}

	return false
}

// SetAppliesToPriceIds gets a reference to the given []string and assigns it to the AppliesToPriceIds field.
func (o *OrbPriceDiscount) SetAppliesToPriceIds(v []string) {
	o.AppliesToPriceIds = v
}

// GetDiscountType returns the DiscountType field value if set, zero value otherwise.
func (o *OrbPriceDiscount) GetDiscountType() OrbPriceDiscountType {
	if o == nil || IsNil(o.DiscountType) {
		var ret OrbPriceDiscountType
		return ret
	}
	return *o.DiscountType
}

// GetDiscountTypeOk returns a tuple with the DiscountType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPriceDiscount) GetDiscountTypeOk() (*OrbPriceDiscountType, bool) {
	if o == nil || IsNil(o.DiscountType) {
		return nil, false
	}
	return o.DiscountType, true
}

// HasDiscountType returns a boolean if a field has been set.
func (o *OrbPriceDiscount) HasDiscountType() bool {
	if o != nil && !IsNil(o.DiscountType) {
		return true
	}

	return false
}

// SetDiscountType gets a reference to the given OrbPriceDiscountType and assigns it to the DiscountType field.
func (o *OrbPriceDiscount) SetDiscountType(v OrbPriceDiscountType) {
	o.DiscountType = &v
}

// GetPercentageDiscount returns the PercentageDiscount field value if set, zero value otherwise.
func (o *OrbPriceDiscount) GetPercentageDiscount() float32 {
	if o == nil || IsNil(o.PercentageDiscount) {
		var ret float32
		return ret
	}
	return *o.PercentageDiscount
}

// GetPercentageDiscountOk returns a tuple with the PercentageDiscount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPriceDiscount) GetPercentageDiscountOk() (*float32, bool) {
	if o == nil || IsNil(o.PercentageDiscount) {
		return nil, false
	}
	return o.PercentageDiscount, true
}

// HasPercentageDiscount returns a boolean if a field has been set.
func (o *OrbPriceDiscount) HasPercentageDiscount() bool {
	if o != nil && !IsNil(o.PercentageDiscount) {
		return true
	}

	return false
}

// SetPercentageDiscount gets a reference to the given float32 and assigns it to the PercentageDiscount field.
func (o *OrbPriceDiscount) SetPercentageDiscount(v float32) {
	o.PercentageDiscount = &v
}

// GetTrialAmountDiscount returns the TrialAmountDiscount field value if set, zero value otherwise.
func (o *OrbPriceDiscount) GetTrialAmountDiscount() string {
	if o == nil || IsNil(o.TrialAmountDiscount) {
		var ret string
		return ret
	}
	return *o.TrialAmountDiscount
}

// GetTrialAmountDiscountOk returns a tuple with the TrialAmountDiscount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPriceDiscount) GetTrialAmountDiscountOk() (*string, bool) {
	if o == nil || IsNil(o.TrialAmountDiscount) {
		return nil, false
	}
	return o.TrialAmountDiscount, true
}

// HasTrialAmountDiscount returns a boolean if a field has been set.
func (o *OrbPriceDiscount) HasTrialAmountDiscount() bool {
	if o != nil && !IsNil(o.TrialAmountDiscount) {
		return true
	}

	return false
}

// SetTrialAmountDiscount gets a reference to the given string and assigns it to the TrialAmountDiscount field.
func (o *OrbPriceDiscount) SetTrialAmountDiscount(v string) {
	o.TrialAmountDiscount = &v
}

// GetUsageDiscount returns the UsageDiscount field value if set, zero value otherwise.
func (o *OrbPriceDiscount) GetUsageDiscount() string {
	if o == nil || IsNil(o.UsageDiscount) {
		var ret string
		return ret
	}
	return *o.UsageDiscount
}

// GetUsageDiscountOk returns a tuple with the UsageDiscount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPriceDiscount) GetUsageDiscountOk() (*string, bool) {
	if o == nil || IsNil(o.UsageDiscount) {
		return nil, false
	}
	return o.UsageDiscount, true
}

// HasUsageDiscount returns a boolean if a field has been set.
func (o *OrbPriceDiscount) HasUsageDiscount() bool {
	if o != nil && !IsNil(o.UsageDiscount) {
		return true
	}

	return false
}

// SetUsageDiscount gets a reference to the given string and assigns it to the UsageDiscount field.
func (o *OrbPriceDiscount) SetUsageDiscount(v string) {
	o.UsageDiscount = &v
}

func (o OrbPriceDiscount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrbPriceDiscount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AmountDiscount) {
		toSerialize["amount_discount"] = o.AmountDiscount
	}
	if !IsNil(o.AppliesToPriceIds) {
		toSerialize["applies_to_price_ids"] = o.AppliesToPriceIds
	}
	if !IsNil(o.DiscountType) {
		toSerialize["discount_type"] = o.DiscountType
	}
	if !IsNil(o.PercentageDiscount) {
		toSerialize["percentage_discount"] = o.PercentageDiscount
	}
	if !IsNil(o.TrialAmountDiscount) {
		toSerialize["trial_amount_discount"] = o.TrialAmountDiscount
	}
	if !IsNil(o.UsageDiscount) {
		toSerialize["usage_discount"] = o.UsageDiscount
	}
	return toSerialize, nil
}

type NullableOrbPriceDiscount struct {
	value *OrbPriceDiscount
	isSet bool
}

func (v NullableOrbPriceDiscount) Get() *OrbPriceDiscount {
	return v.value
}

func (v *NullableOrbPriceDiscount) Set(val *OrbPriceDiscount) {
	v.value = val
	v.isSet = true
}

func (v NullableOrbPriceDiscount) IsSet() bool {
	return v.isSet
}

func (v *NullableOrbPriceDiscount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrbPriceDiscount(val *OrbPriceDiscount) *NullableOrbPriceDiscount {
	return &NullableOrbPriceDiscount{value: val, isSet: true}
}

func (v NullableOrbPriceDiscount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrbPriceDiscount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


