/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
)

// checks if the OrbPlanPhase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrbPlanPhase{}

// OrbPlanPhase struct for OrbPlanPhase
type OrbPlanPhase struct {
	Description  *string           `json:"description,omitempty"`
	Discount     *OrbPriceDiscount `json:"discount,omitempty"`
	Duration     *int32            `json:"duration,omitempty"`
	DurationUnit *OrbCadence       `json:"duration_unit,omitempty"`
	Maximum      *OrbPriceMaximum  `json:"maximum,omitempty"`
	Minimum      *OrbPriceMinimum  `json:"minimum,omitempty"`
	Name         *string           `json:"name,omitempty"`
	Order        *int32            `json:"order,omitempty"`
}

// NewOrbPlanPhase instantiates a new OrbPlanPhase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrbPlanPhase() *OrbPlanPhase {
	this := OrbPlanPhase{}
	return &this
}

// NewOrbPlanPhaseWithDefaults instantiates a new OrbPlanPhase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrbPlanPhaseWithDefaults() *OrbPlanPhase {
	this := OrbPlanPhase{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *OrbPlanPhase) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPlanPhase) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *OrbPlanPhase) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *OrbPlanPhase) SetDescription(v string) {
	o.Description = &v
}

// GetDiscount returns the Discount field value if set, zero value otherwise.
func (o *OrbPlanPhase) GetDiscount() OrbPriceDiscount {
	if o == nil || IsNil(o.Discount) {
		var ret OrbPriceDiscount
		return ret
	}
	return *o.Discount
}

// GetDiscountOk returns a tuple with the Discount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPlanPhase) GetDiscountOk() (*OrbPriceDiscount, bool) {
	if o == nil || IsNil(o.Discount) {
		return nil, false
	}
	return o.Discount, true
}

// HasDiscount returns a boolean if a field has been set.
func (o *OrbPlanPhase) HasDiscount() bool {
	if o != nil && !IsNil(o.Discount) {
		return true
	}

	return false
}

// SetDiscount gets a reference to the given OrbPriceDiscount and assigns it to the Discount field.
func (o *OrbPlanPhase) SetDiscount(v OrbPriceDiscount) {
	o.Discount = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *OrbPlanPhase) GetDuration() int32 {
	if o == nil || IsNil(o.Duration) {
		var ret int32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPlanPhase) GetDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *OrbPlanPhase) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int32 and assigns it to the Duration field.
func (o *OrbPlanPhase) SetDuration(v int32) {
	o.Duration = &v
}

// GetDurationUnit returns the DurationUnit field value if set, zero value otherwise.
func (o *OrbPlanPhase) GetDurationUnit() OrbCadence {
	if o == nil || IsNil(o.DurationUnit) {
		var ret OrbCadence
		return ret
	}
	return *o.DurationUnit
}

// GetDurationUnitOk returns a tuple with the DurationUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPlanPhase) GetDurationUnitOk() (*OrbCadence, bool) {
	if o == nil || IsNil(o.DurationUnit) {
		return nil, false
	}
	return o.DurationUnit, true
}

// HasDurationUnit returns a boolean if a field has been set.
func (o *OrbPlanPhase) HasDurationUnit() bool {
	if o != nil && !IsNil(o.DurationUnit) {
		return true
	}

	return false
}

// SetDurationUnit gets a reference to the given OrbCadence and assigns it to the DurationUnit field.
func (o *OrbPlanPhase) SetDurationUnit(v OrbCadence) {
	o.DurationUnit = &v
}

// GetMaximum returns the Maximum field value if set, zero value otherwise.
func (o *OrbPlanPhase) GetMaximum() OrbPriceMaximum {
	if o == nil || IsNil(o.Maximum) {
		var ret OrbPriceMaximum
		return ret
	}
	return *o.Maximum
}

// GetMaximumOk returns a tuple with the Maximum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPlanPhase) GetMaximumOk() (*OrbPriceMaximum, bool) {
	if o == nil || IsNil(o.Maximum) {
		return nil, false
	}
	return o.Maximum, true
}

// HasMaximum returns a boolean if a field has been set.
func (o *OrbPlanPhase) HasMaximum() bool {
	if o != nil && !IsNil(o.Maximum) {
		return true
	}

	return false
}

// SetMaximum gets a reference to the given OrbPriceMaximum and assigns it to the Maximum field.
func (o *OrbPlanPhase) SetMaximum(v OrbPriceMaximum) {
	o.Maximum = &v
}

// GetMinimum returns the Minimum field value if set, zero value otherwise.
func (o *OrbPlanPhase) GetMinimum() OrbPriceMinimum {
	if o == nil || IsNil(o.Minimum) {
		var ret OrbPriceMinimum
		return ret
	}
	return *o.Minimum
}

// GetMinimumOk returns a tuple with the Minimum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPlanPhase) GetMinimumOk() (*OrbPriceMinimum, bool) {
	if o == nil || IsNil(o.Minimum) {
		return nil, false
	}
	return o.Minimum, true
}

// HasMinimum returns a boolean if a field has been set.
func (o *OrbPlanPhase) HasMinimum() bool {
	if o != nil && !IsNil(o.Minimum) {
		return true
	}

	return false
}

// SetMinimum gets a reference to the given OrbPriceMinimum and assigns it to the Minimum field.
func (o *OrbPlanPhase) SetMinimum(v OrbPriceMinimum) {
	o.Minimum = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *OrbPlanPhase) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPlanPhase) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *OrbPlanPhase) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *OrbPlanPhase) SetName(v string) {
	o.Name = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *OrbPlanPhase) GetOrder() int32 {
	if o == nil || IsNil(o.Order) {
		var ret int32
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPlanPhase) GetOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *OrbPlanPhase) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given int32 and assigns it to the Order field.
func (o *OrbPlanPhase) SetOrder(v int32) {
	o.Order = &v
}

func (o OrbPlanPhase) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrbPlanPhase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Discount) {
		toSerialize["discount"] = o.Discount
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.DurationUnit) {
		toSerialize["duration_unit"] = o.DurationUnit
	}
	if !IsNil(o.Maximum) {
		toSerialize["maximum"] = o.Maximum
	}
	if !IsNil(o.Minimum) {
		toSerialize["minimum"] = o.Minimum
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	return toSerialize, nil
}

type NullableOrbPlanPhase struct {
	value *OrbPlanPhase
	isSet bool
}

func (v NullableOrbPlanPhase) Get() *OrbPlanPhase {
	return v.value
}

func (v *NullableOrbPlanPhase) Set(val *OrbPlanPhase) {
	v.value = val
	v.isSet = true
}

func (v NullableOrbPlanPhase) IsSet() bool {
	return v.isSet
}

func (v *NullableOrbPlanPhase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrbPlanPhase(val *OrbPlanPhase) *NullableOrbPlanPhase {
	return &NullableOrbPlanPhase{value: val, isSet: true}
}

func (v NullableOrbPlanPhase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrbPlanPhase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
