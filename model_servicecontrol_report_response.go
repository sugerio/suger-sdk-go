/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
)

// checks if the ServicecontrolReportResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServicecontrolReportResponse{}

// ServicecontrolReportResponse struct for ServicecontrolReportResponse
type ServicecontrolReportResponse struct {
	// ReportErrors: Partial failures, one for each `Operation` in the request that failed processing. There are three possible combinations of the RPC status: 1. The combination of a successful RPC status and an empty `report_errors` list indicates a complete success where all `Operations` in the request are processed successfully. 2. The combination of a successful RPC status and a non-empty `report_errors` list indicates a partial success where some `Operations` in the request succeeded. Each `Operation` that failed processing has a corresponding item in this list. 3. A failed RPC status indicates a general non-deterministic failure. When this happens, it's impossible to know which of the 'Operations' in the request succeeded or failed.
	ReportErrors []ServicecontrolReportError `json:"reportErrors,omitempty"`
	// ServiceConfigId: The actual config id used to process the request.
	ServiceConfigId *string `json:"serviceConfigId,omitempty"`
	// ServiceRolloutId: The current service rollout id used to process the request.
	ServiceRolloutId *string `json:"serviceRolloutId,omitempty"`
}

// NewServicecontrolReportResponse instantiates a new ServicecontrolReportResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServicecontrolReportResponse() *ServicecontrolReportResponse {
	this := ServicecontrolReportResponse{}
	return &this
}

// NewServicecontrolReportResponseWithDefaults instantiates a new ServicecontrolReportResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServicecontrolReportResponseWithDefaults() *ServicecontrolReportResponse {
	this := ServicecontrolReportResponse{}
	return &this
}

// GetReportErrors returns the ReportErrors field value if set, zero value otherwise.
func (o *ServicecontrolReportResponse) GetReportErrors() []ServicecontrolReportError {
	if o == nil || IsNil(o.ReportErrors) {
		var ret []ServicecontrolReportError
		return ret
	}
	return o.ReportErrors
}

// GetReportErrorsOk returns a tuple with the ReportErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicecontrolReportResponse) GetReportErrorsOk() ([]ServicecontrolReportError, bool) {
	if o == nil || IsNil(o.ReportErrors) {
		return nil, false
	}
	return o.ReportErrors, true
}

// HasReportErrors returns a boolean if a field has been set.
func (o *ServicecontrolReportResponse) HasReportErrors() bool {
	if o != nil && !IsNil(o.ReportErrors) {
		return true
	}

	return false
}

// SetReportErrors gets a reference to the given []ServicecontrolReportError and assigns it to the ReportErrors field.
func (o *ServicecontrolReportResponse) SetReportErrors(v []ServicecontrolReportError) {
	o.ReportErrors = v
}

// GetServiceConfigId returns the ServiceConfigId field value if set, zero value otherwise.
func (o *ServicecontrolReportResponse) GetServiceConfigId() string {
	if o == nil || IsNil(o.ServiceConfigId) {
		var ret string
		return ret
	}
	return *o.ServiceConfigId
}

// GetServiceConfigIdOk returns a tuple with the ServiceConfigId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicecontrolReportResponse) GetServiceConfigIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceConfigId) {
		return nil, false
	}
	return o.ServiceConfigId, true
}

// HasServiceConfigId returns a boolean if a field has been set.
func (o *ServicecontrolReportResponse) HasServiceConfigId() bool {
	if o != nil && !IsNil(o.ServiceConfigId) {
		return true
	}

	return false
}

// SetServiceConfigId gets a reference to the given string and assigns it to the ServiceConfigId field.
func (o *ServicecontrolReportResponse) SetServiceConfigId(v string) {
	o.ServiceConfigId = &v
}

// GetServiceRolloutId returns the ServiceRolloutId field value if set, zero value otherwise.
func (o *ServicecontrolReportResponse) GetServiceRolloutId() string {
	if o == nil || IsNil(o.ServiceRolloutId) {
		var ret string
		return ret
	}
	return *o.ServiceRolloutId
}

// GetServiceRolloutIdOk returns a tuple with the ServiceRolloutId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicecontrolReportResponse) GetServiceRolloutIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceRolloutId) {
		return nil, false
	}
	return o.ServiceRolloutId, true
}

// HasServiceRolloutId returns a boolean if a field has been set.
func (o *ServicecontrolReportResponse) HasServiceRolloutId() bool {
	if o != nil && !IsNil(o.ServiceRolloutId) {
		return true
	}

	return false
}

// SetServiceRolloutId gets a reference to the given string and assigns it to the ServiceRolloutId field.
func (o *ServicecontrolReportResponse) SetServiceRolloutId(v string) {
	o.ServiceRolloutId = &v
}

func (o ServicecontrolReportResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServicecontrolReportResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReportErrors) {
		toSerialize["reportErrors"] = o.ReportErrors
	}
	if !IsNil(o.ServiceConfigId) {
		toSerialize["serviceConfigId"] = o.ServiceConfigId
	}
	if !IsNil(o.ServiceRolloutId) {
		toSerialize["serviceRolloutId"] = o.ServiceRolloutId
	}
	return toSerialize, nil
}

type NullableServicecontrolReportResponse struct {
	value *ServicecontrolReportResponse
	isSet bool
}

func (v NullableServicecontrolReportResponse) Get() *ServicecontrolReportResponse {
	return v.value
}

func (v *NullableServicecontrolReportResponse) Set(val *ServicecontrolReportResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableServicecontrolReportResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableServicecontrolReportResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServicecontrolReportResponse(val *ServicecontrolReportResponse) *NullableServicecontrolReportResponse {
	return &NullableServicecontrolReportResponse{value: val, isSet: true}
}

func (v NullableServicecontrolReportResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServicecontrolReportResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
