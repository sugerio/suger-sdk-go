/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MicrosoftPartnerReferralContactPreference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MicrosoftPartnerReferralContactPreference{}

// MicrosoftPartnerReferralContactPreference struct for MicrosoftPartnerReferralContactPreference
type MicrosoftPartnerReferralContactPreference struct {
	DisableNotifications map[string]interface{} `json:"disableNotifications,omitempty"`
	Locale map[string]interface{} `json:"locale,omitempty"`
}

// NewMicrosoftPartnerReferralContactPreference instantiates a new MicrosoftPartnerReferralContactPreference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMicrosoftPartnerReferralContactPreference() *MicrosoftPartnerReferralContactPreference {
	this := MicrosoftPartnerReferralContactPreference{}
	return &this
}

// NewMicrosoftPartnerReferralContactPreferenceWithDefaults instantiates a new MicrosoftPartnerReferralContactPreference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMicrosoftPartnerReferralContactPreferenceWithDefaults() *MicrosoftPartnerReferralContactPreference {
	this := MicrosoftPartnerReferralContactPreference{}
	return &this
}

// GetDisableNotifications returns the DisableNotifications field value if set, zero value otherwise.
func (o *MicrosoftPartnerReferralContactPreference) GetDisableNotifications() map[string]interface{} {
	if o == nil || IsNil(o.DisableNotifications) {
		var ret map[string]interface{}
		return ret
	}
	return o.DisableNotifications
}

// GetDisableNotificationsOk returns a tuple with the DisableNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftPartnerReferralContactPreference) GetDisableNotificationsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DisableNotifications) {
		return map[string]interface{}{}, false
	}
	return o.DisableNotifications, true
}

// HasDisableNotifications returns a boolean if a field has been set.
func (o *MicrosoftPartnerReferralContactPreference) HasDisableNotifications() bool {
	if o != nil && !IsNil(o.DisableNotifications) {
		return true
	}

	return false
}

// SetDisableNotifications gets a reference to the given map[string]interface{} and assigns it to the DisableNotifications field.
func (o *MicrosoftPartnerReferralContactPreference) SetDisableNotifications(v map[string]interface{}) {
	o.DisableNotifications = v
}

// GetLocale returns the Locale field value if set, zero value otherwise.
func (o *MicrosoftPartnerReferralContactPreference) GetLocale() map[string]interface{} {
	if o == nil || IsNil(o.Locale) {
		var ret map[string]interface{}
		return ret
	}
	return o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftPartnerReferralContactPreference) GetLocaleOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Locale) {
		return map[string]interface{}{}, false
	}
	return o.Locale, true
}

// HasLocale returns a boolean if a field has been set.
func (o *MicrosoftPartnerReferralContactPreference) HasLocale() bool {
	if o != nil && !IsNil(o.Locale) {
		return true
	}

	return false
}

// SetLocale gets a reference to the given map[string]interface{} and assigns it to the Locale field.
func (o *MicrosoftPartnerReferralContactPreference) SetLocale(v map[string]interface{}) {
	o.Locale = v
}

func (o MicrosoftPartnerReferralContactPreference) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MicrosoftPartnerReferralContactPreference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisableNotifications) {
		toSerialize["disableNotifications"] = o.DisableNotifications
	}
	if !IsNil(o.Locale) {
		toSerialize["locale"] = o.Locale
	}
	return toSerialize, nil
}

type NullableMicrosoftPartnerReferralContactPreference struct {
	value *MicrosoftPartnerReferralContactPreference
	isSet bool
}

func (v NullableMicrosoftPartnerReferralContactPreference) Get() *MicrosoftPartnerReferralContactPreference {
	return v.value
}

func (v *NullableMicrosoftPartnerReferralContactPreference) Set(val *MicrosoftPartnerReferralContactPreference) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftPartnerReferralContactPreference) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftPartnerReferralContactPreference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftPartnerReferralContactPreference(val *MicrosoftPartnerReferralContactPreference) *NullableMicrosoftPartnerReferralContactPreference {
	return &NullableMicrosoftPartnerReferralContactPreference{value: val, isSet: true}
}

func (v NullableMicrosoftPartnerReferralContactPreference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftPartnerReferralContactPreference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


