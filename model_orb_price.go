/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
)

// checks if the OrbPrice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrbPrice{}

// OrbPrice struct for OrbPrice
type OrbPrice struct {
	BillableMetric *OrbBillableMetric          `json:"billable_metric,omitempty"`
	BpsConfig      *OrbPriceModelConfigBPS     `json:"bps_config,omitempty"`
	BulkBpsConfig  *OrbPriceModelConfigBULKBPS `json:"bulk_bps_config,omitempty"`
	BulkConfig     *OrbPriceModelConfigBULK    `json:"bulk_config,omitempty"`
	Cadence        *OrbCadence                 `json:"cadence,omitempty"`
	CreatedAt      *string                     `json:"created_at,omitempty"`
	Currency       *string                     `json:"currency,omitempty"`
	Discount       *OrbPriceDiscount           `json:"discount,omitempty"`
	// If the Price represents a fixed cost, this represents the quantity of units applied. Mutually exclusive with billable_metric.
	FixedPriceQuantity *int32                      `json:"fixed_price_quantity,omitempty"`
	Id                 *string                     `json:"id,omitempty"`
	Item               *OrbItem                    `json:"item,omitempty"`
	MatrixConfig       *OrbPriceModelConfigMATRIX  `json:"matrix_config,omitempty"`
	Maximum            *OrbPriceMaximum            `json:"maximum,omitempty"`
	Minimum            *OrbPriceMinimum            `json:"minimum,omitempty"`
	ModelType          *OrbPriceModelType          `json:"model_type,omitempty"`
	Name               *string                     `json:"name,omitempty"`
	PackageConfig      *OrbPriceModelConfigPACKAGE `json:"package_config,omitempty"`
	// The phase order which includes this price, only applicable to a plan with phases.
	PlanPhaseOrder  *int32                        `json:"plan_phase_order,omitempty"`
	TieredBpsConfig *OrbPriceModelConfigTIEREDBPS `json:"tiered_bps_config,omitempty"`
	TieredConfig    *OrbPriceModelConfigTIERED    `json:"tiered_config,omitempty"`
	UnitConfig      *OrbPriceModelConfigUNIT      `json:"unit_config,omitempty"`
}

// NewOrbPrice instantiates a new OrbPrice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrbPrice() *OrbPrice {
	this := OrbPrice{}
	return &this
}

// NewOrbPriceWithDefaults instantiates a new OrbPrice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrbPriceWithDefaults() *OrbPrice {
	this := OrbPrice{}
	return &this
}

// GetBillableMetric returns the BillableMetric field value if set, zero value otherwise.
func (o *OrbPrice) GetBillableMetric() OrbBillableMetric {
	if o == nil || IsNil(o.BillableMetric) {
		var ret OrbBillableMetric
		return ret
	}
	return *o.BillableMetric
}

// GetBillableMetricOk returns a tuple with the BillableMetric field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPrice) GetBillableMetricOk() (*OrbBillableMetric, bool) {
	if o == nil || IsNil(o.BillableMetric) {
		return nil, false
	}
	return o.BillableMetric, true
}

// HasBillableMetric returns a boolean if a field has been set.
func (o *OrbPrice) HasBillableMetric() bool {
	if o != nil && !IsNil(o.BillableMetric) {
		return true
	}

	return false
}

// SetBillableMetric gets a reference to the given OrbBillableMetric and assigns it to the BillableMetric field.
func (o *OrbPrice) SetBillableMetric(v OrbBillableMetric) {
	o.BillableMetric = &v
}

// GetBpsConfig returns the BpsConfig field value if set, zero value otherwise.
func (o *OrbPrice) GetBpsConfig() OrbPriceModelConfigBPS {
	if o == nil || IsNil(o.BpsConfig) {
		var ret OrbPriceModelConfigBPS
		return ret
	}
	return *o.BpsConfig
}

// GetBpsConfigOk returns a tuple with the BpsConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPrice) GetBpsConfigOk() (*OrbPriceModelConfigBPS, bool) {
	if o == nil || IsNil(o.BpsConfig) {
		return nil, false
	}
	return o.BpsConfig, true
}

// HasBpsConfig returns a boolean if a field has been set.
func (o *OrbPrice) HasBpsConfig() bool {
	if o != nil && !IsNil(o.BpsConfig) {
		return true
	}

	return false
}

// SetBpsConfig gets a reference to the given OrbPriceModelConfigBPS and assigns it to the BpsConfig field.
func (o *OrbPrice) SetBpsConfig(v OrbPriceModelConfigBPS) {
	o.BpsConfig = &v
}

// GetBulkBpsConfig returns the BulkBpsConfig field value if set, zero value otherwise.
func (o *OrbPrice) GetBulkBpsConfig() OrbPriceModelConfigBULKBPS {
	if o == nil || IsNil(o.BulkBpsConfig) {
		var ret OrbPriceModelConfigBULKBPS
		return ret
	}
	return *o.BulkBpsConfig
}

// GetBulkBpsConfigOk returns a tuple with the BulkBpsConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPrice) GetBulkBpsConfigOk() (*OrbPriceModelConfigBULKBPS, bool) {
	if o == nil || IsNil(o.BulkBpsConfig) {
		return nil, false
	}
	return o.BulkBpsConfig, true
}

// HasBulkBpsConfig returns a boolean if a field has been set.
func (o *OrbPrice) HasBulkBpsConfig() bool {
	if o != nil && !IsNil(o.BulkBpsConfig) {
		return true
	}

	return false
}

// SetBulkBpsConfig gets a reference to the given OrbPriceModelConfigBULKBPS and assigns it to the BulkBpsConfig field.
func (o *OrbPrice) SetBulkBpsConfig(v OrbPriceModelConfigBULKBPS) {
	o.BulkBpsConfig = &v
}

// GetBulkConfig returns the BulkConfig field value if set, zero value otherwise.
func (o *OrbPrice) GetBulkConfig() OrbPriceModelConfigBULK {
	if o == nil || IsNil(o.BulkConfig) {
		var ret OrbPriceModelConfigBULK
		return ret
	}
	return *o.BulkConfig
}

// GetBulkConfigOk returns a tuple with the BulkConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPrice) GetBulkConfigOk() (*OrbPriceModelConfigBULK, bool) {
	if o == nil || IsNil(o.BulkConfig) {
		return nil, false
	}
	return o.BulkConfig, true
}

// HasBulkConfig returns a boolean if a field has been set.
func (o *OrbPrice) HasBulkConfig() bool {
	if o != nil && !IsNil(o.BulkConfig) {
		return true
	}

	return false
}

// SetBulkConfig gets a reference to the given OrbPriceModelConfigBULK and assigns it to the BulkConfig field.
func (o *OrbPrice) SetBulkConfig(v OrbPriceModelConfigBULK) {
	o.BulkConfig = &v
}

// GetCadence returns the Cadence field value if set, zero value otherwise.
func (o *OrbPrice) GetCadence() OrbCadence {
	if o == nil || IsNil(o.Cadence) {
		var ret OrbCadence
		return ret
	}
	return *o.Cadence
}

// GetCadenceOk returns a tuple with the Cadence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPrice) GetCadenceOk() (*OrbCadence, bool) {
	if o == nil || IsNil(o.Cadence) {
		return nil, false
	}
	return o.Cadence, true
}

// HasCadence returns a boolean if a field has been set.
func (o *OrbPrice) HasCadence() bool {
	if o != nil && !IsNil(o.Cadence) {
		return true
	}

	return false
}

// SetCadence gets a reference to the given OrbCadence and assigns it to the Cadence field.
func (o *OrbPrice) SetCadence(v OrbCadence) {
	o.Cadence = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *OrbPrice) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPrice) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *OrbPrice) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *OrbPrice) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *OrbPrice) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPrice) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *OrbPrice) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *OrbPrice) SetCurrency(v string) {
	o.Currency = &v
}

// GetDiscount returns the Discount field value if set, zero value otherwise.
func (o *OrbPrice) GetDiscount() OrbPriceDiscount {
	if o == nil || IsNil(o.Discount) {
		var ret OrbPriceDiscount
		return ret
	}
	return *o.Discount
}

// GetDiscountOk returns a tuple with the Discount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPrice) GetDiscountOk() (*OrbPriceDiscount, bool) {
	if o == nil || IsNil(o.Discount) {
		return nil, false
	}
	return o.Discount, true
}

// HasDiscount returns a boolean if a field has been set.
func (o *OrbPrice) HasDiscount() bool {
	if o != nil && !IsNil(o.Discount) {
		return true
	}

	return false
}

// SetDiscount gets a reference to the given OrbPriceDiscount and assigns it to the Discount field.
func (o *OrbPrice) SetDiscount(v OrbPriceDiscount) {
	o.Discount = &v
}

// GetFixedPriceQuantity returns the FixedPriceQuantity field value if set, zero value otherwise.
func (o *OrbPrice) GetFixedPriceQuantity() int32 {
	if o == nil || IsNil(o.FixedPriceQuantity) {
		var ret int32
		return ret
	}
	return *o.FixedPriceQuantity
}

// GetFixedPriceQuantityOk returns a tuple with the FixedPriceQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPrice) GetFixedPriceQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.FixedPriceQuantity) {
		return nil, false
	}
	return o.FixedPriceQuantity, true
}

// HasFixedPriceQuantity returns a boolean if a field has been set.
func (o *OrbPrice) HasFixedPriceQuantity() bool {
	if o != nil && !IsNil(o.FixedPriceQuantity) {
		return true
	}

	return false
}

// SetFixedPriceQuantity gets a reference to the given int32 and assigns it to the FixedPriceQuantity field.
func (o *OrbPrice) SetFixedPriceQuantity(v int32) {
	o.FixedPriceQuantity = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OrbPrice) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPrice) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OrbPrice) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *OrbPrice) SetId(v string) {
	o.Id = &v
}

// GetItem returns the Item field value if set, zero value otherwise.
func (o *OrbPrice) GetItem() OrbItem {
	if o == nil || IsNil(o.Item) {
		var ret OrbItem
		return ret
	}
	return *o.Item
}

// GetItemOk returns a tuple with the Item field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPrice) GetItemOk() (*OrbItem, bool) {
	if o == nil || IsNil(o.Item) {
		return nil, false
	}
	return o.Item, true
}

// HasItem returns a boolean if a field has been set.
func (o *OrbPrice) HasItem() bool {
	if o != nil && !IsNil(o.Item) {
		return true
	}

	return false
}

// SetItem gets a reference to the given OrbItem and assigns it to the Item field.
func (o *OrbPrice) SetItem(v OrbItem) {
	o.Item = &v
}

// GetMatrixConfig returns the MatrixConfig field value if set, zero value otherwise.
func (o *OrbPrice) GetMatrixConfig() OrbPriceModelConfigMATRIX {
	if o == nil || IsNil(o.MatrixConfig) {
		var ret OrbPriceModelConfigMATRIX
		return ret
	}
	return *o.MatrixConfig
}

// GetMatrixConfigOk returns a tuple with the MatrixConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPrice) GetMatrixConfigOk() (*OrbPriceModelConfigMATRIX, bool) {
	if o == nil || IsNil(o.MatrixConfig) {
		return nil, false
	}
	return o.MatrixConfig, true
}

// HasMatrixConfig returns a boolean if a field has been set.
func (o *OrbPrice) HasMatrixConfig() bool {
	if o != nil && !IsNil(o.MatrixConfig) {
		return true
	}

	return false
}

// SetMatrixConfig gets a reference to the given OrbPriceModelConfigMATRIX and assigns it to the MatrixConfig field.
func (o *OrbPrice) SetMatrixConfig(v OrbPriceModelConfigMATRIX) {
	o.MatrixConfig = &v
}

// GetMaximum returns the Maximum field value if set, zero value otherwise.
func (o *OrbPrice) GetMaximum() OrbPriceMaximum {
	if o == nil || IsNil(o.Maximum) {
		var ret OrbPriceMaximum
		return ret
	}
	return *o.Maximum
}

// GetMaximumOk returns a tuple with the Maximum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPrice) GetMaximumOk() (*OrbPriceMaximum, bool) {
	if o == nil || IsNil(o.Maximum) {
		return nil, false
	}
	return o.Maximum, true
}

// HasMaximum returns a boolean if a field has been set.
func (o *OrbPrice) HasMaximum() bool {
	if o != nil && !IsNil(o.Maximum) {
		return true
	}

	return false
}

// SetMaximum gets a reference to the given OrbPriceMaximum and assigns it to the Maximum field.
func (o *OrbPrice) SetMaximum(v OrbPriceMaximum) {
	o.Maximum = &v
}

// GetMinimum returns the Minimum field value if set, zero value otherwise.
func (o *OrbPrice) GetMinimum() OrbPriceMinimum {
	if o == nil || IsNil(o.Minimum) {
		var ret OrbPriceMinimum
		return ret
	}
	return *o.Minimum
}

// GetMinimumOk returns a tuple with the Minimum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPrice) GetMinimumOk() (*OrbPriceMinimum, bool) {
	if o == nil || IsNil(o.Minimum) {
		return nil, false
	}
	return o.Minimum, true
}

// HasMinimum returns a boolean if a field has been set.
func (o *OrbPrice) HasMinimum() bool {
	if o != nil && !IsNil(o.Minimum) {
		return true
	}

	return false
}

// SetMinimum gets a reference to the given OrbPriceMinimum and assigns it to the Minimum field.
func (o *OrbPrice) SetMinimum(v OrbPriceMinimum) {
	o.Minimum = &v
}

// GetModelType returns the ModelType field value if set, zero value otherwise.
func (o *OrbPrice) GetModelType() OrbPriceModelType {
	if o == nil || IsNil(o.ModelType) {
		var ret OrbPriceModelType
		return ret
	}
	return *o.ModelType
}

// GetModelTypeOk returns a tuple with the ModelType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPrice) GetModelTypeOk() (*OrbPriceModelType, bool) {
	if o == nil || IsNil(o.ModelType) {
		return nil, false
	}
	return o.ModelType, true
}

// HasModelType returns a boolean if a field has been set.
func (o *OrbPrice) HasModelType() bool {
	if o != nil && !IsNil(o.ModelType) {
		return true
	}

	return false
}

// SetModelType gets a reference to the given OrbPriceModelType and assigns it to the ModelType field.
func (o *OrbPrice) SetModelType(v OrbPriceModelType) {
	o.ModelType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *OrbPrice) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPrice) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *OrbPrice) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *OrbPrice) SetName(v string) {
	o.Name = &v
}

// GetPackageConfig returns the PackageConfig field value if set, zero value otherwise.
func (o *OrbPrice) GetPackageConfig() OrbPriceModelConfigPACKAGE {
	if o == nil || IsNil(o.PackageConfig) {
		var ret OrbPriceModelConfigPACKAGE
		return ret
	}
	return *o.PackageConfig
}

// GetPackageConfigOk returns a tuple with the PackageConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPrice) GetPackageConfigOk() (*OrbPriceModelConfigPACKAGE, bool) {
	if o == nil || IsNil(o.PackageConfig) {
		return nil, false
	}
	return o.PackageConfig, true
}

// HasPackageConfig returns a boolean if a field has been set.
func (o *OrbPrice) HasPackageConfig() bool {
	if o != nil && !IsNil(o.PackageConfig) {
		return true
	}

	return false
}

// SetPackageConfig gets a reference to the given OrbPriceModelConfigPACKAGE and assigns it to the PackageConfig field.
func (o *OrbPrice) SetPackageConfig(v OrbPriceModelConfigPACKAGE) {
	o.PackageConfig = &v
}

// GetPlanPhaseOrder returns the PlanPhaseOrder field value if set, zero value otherwise.
func (o *OrbPrice) GetPlanPhaseOrder() int32 {
	if o == nil || IsNil(o.PlanPhaseOrder) {
		var ret int32
		return ret
	}
	return *o.PlanPhaseOrder
}

// GetPlanPhaseOrderOk returns a tuple with the PlanPhaseOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPrice) GetPlanPhaseOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.PlanPhaseOrder) {
		return nil, false
	}
	return o.PlanPhaseOrder, true
}

// HasPlanPhaseOrder returns a boolean if a field has been set.
func (o *OrbPrice) HasPlanPhaseOrder() bool {
	if o != nil && !IsNil(o.PlanPhaseOrder) {
		return true
	}

	return false
}

// SetPlanPhaseOrder gets a reference to the given int32 and assigns it to the PlanPhaseOrder field.
func (o *OrbPrice) SetPlanPhaseOrder(v int32) {
	o.PlanPhaseOrder = &v
}

// GetTieredBpsConfig returns the TieredBpsConfig field value if set, zero value otherwise.
func (o *OrbPrice) GetTieredBpsConfig() OrbPriceModelConfigTIEREDBPS {
	if o == nil || IsNil(o.TieredBpsConfig) {
		var ret OrbPriceModelConfigTIEREDBPS
		return ret
	}
	return *o.TieredBpsConfig
}

// GetTieredBpsConfigOk returns a tuple with the TieredBpsConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPrice) GetTieredBpsConfigOk() (*OrbPriceModelConfigTIEREDBPS, bool) {
	if o == nil || IsNil(o.TieredBpsConfig) {
		return nil, false
	}
	return o.TieredBpsConfig, true
}

// HasTieredBpsConfig returns a boolean if a field has been set.
func (o *OrbPrice) HasTieredBpsConfig() bool {
	if o != nil && !IsNil(o.TieredBpsConfig) {
		return true
	}

	return false
}

// SetTieredBpsConfig gets a reference to the given OrbPriceModelConfigTIEREDBPS and assigns it to the TieredBpsConfig field.
func (o *OrbPrice) SetTieredBpsConfig(v OrbPriceModelConfigTIEREDBPS) {
	o.TieredBpsConfig = &v
}

// GetTieredConfig returns the TieredConfig field value if set, zero value otherwise.
func (o *OrbPrice) GetTieredConfig() OrbPriceModelConfigTIERED {
	if o == nil || IsNil(o.TieredConfig) {
		var ret OrbPriceModelConfigTIERED
		return ret
	}
	return *o.TieredConfig
}

// GetTieredConfigOk returns a tuple with the TieredConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPrice) GetTieredConfigOk() (*OrbPriceModelConfigTIERED, bool) {
	if o == nil || IsNil(o.TieredConfig) {
		return nil, false
	}
	return o.TieredConfig, true
}

// HasTieredConfig returns a boolean if a field has been set.
func (o *OrbPrice) HasTieredConfig() bool {
	if o != nil && !IsNil(o.TieredConfig) {
		return true
	}

	return false
}

// SetTieredConfig gets a reference to the given OrbPriceModelConfigTIERED and assigns it to the TieredConfig field.
func (o *OrbPrice) SetTieredConfig(v OrbPriceModelConfigTIERED) {
	o.TieredConfig = &v
}

// GetUnitConfig returns the UnitConfig field value if set, zero value otherwise.
func (o *OrbPrice) GetUnitConfig() OrbPriceModelConfigUNIT {
	if o == nil || IsNil(o.UnitConfig) {
		var ret OrbPriceModelConfigUNIT
		return ret
	}
	return *o.UnitConfig
}

// GetUnitConfigOk returns a tuple with the UnitConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPrice) GetUnitConfigOk() (*OrbPriceModelConfigUNIT, bool) {
	if o == nil || IsNil(o.UnitConfig) {
		return nil, false
	}
	return o.UnitConfig, true
}

// HasUnitConfig returns a boolean if a field has been set.
func (o *OrbPrice) HasUnitConfig() bool {
	if o != nil && !IsNil(o.UnitConfig) {
		return true
	}

	return false
}

// SetUnitConfig gets a reference to the given OrbPriceModelConfigUNIT and assigns it to the UnitConfig field.
func (o *OrbPrice) SetUnitConfig(v OrbPriceModelConfigUNIT) {
	o.UnitConfig = &v
}

func (o OrbPrice) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrbPrice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BillableMetric) {
		toSerialize["billable_metric"] = o.BillableMetric
	}
	if !IsNil(o.BpsConfig) {
		toSerialize["bps_config"] = o.BpsConfig
	}
	if !IsNil(o.BulkBpsConfig) {
		toSerialize["bulk_bps_config"] = o.BulkBpsConfig
	}
	if !IsNil(o.BulkConfig) {
		toSerialize["bulk_config"] = o.BulkConfig
	}
	if !IsNil(o.Cadence) {
		toSerialize["cadence"] = o.Cadence
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Discount) {
		toSerialize["discount"] = o.Discount
	}
	if !IsNil(o.FixedPriceQuantity) {
		toSerialize["fixed_price_quantity"] = o.FixedPriceQuantity
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Item) {
		toSerialize["item"] = o.Item
	}
	if !IsNil(o.MatrixConfig) {
		toSerialize["matrix_config"] = o.MatrixConfig
	}
	if !IsNil(o.Maximum) {
		toSerialize["maximum"] = o.Maximum
	}
	if !IsNil(o.Minimum) {
		toSerialize["minimum"] = o.Minimum
	}
	if !IsNil(o.ModelType) {
		toSerialize["model_type"] = o.ModelType
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PackageConfig) {
		toSerialize["package_config"] = o.PackageConfig
	}
	if !IsNil(o.PlanPhaseOrder) {
		toSerialize["plan_phase_order"] = o.PlanPhaseOrder
	}
	if !IsNil(o.TieredBpsConfig) {
		toSerialize["tiered_bps_config"] = o.TieredBpsConfig
	}
	if !IsNil(o.TieredConfig) {
		toSerialize["tiered_config"] = o.TieredConfig
	}
	if !IsNil(o.UnitConfig) {
		toSerialize["unit_config"] = o.UnitConfig
	}
	return toSerialize, nil
}

type NullableOrbPrice struct {
	value *OrbPrice
	isSet bool
}

func (v NullableOrbPrice) Get() *OrbPrice {
	return v.value
}

func (v *NullableOrbPrice) Set(val *OrbPrice) {
	v.value = val
	v.isSet = true
}

func (v NullableOrbPrice) IsSet() bool {
	return v.isSet
}

func (v *NullableOrbPrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrbPrice(val *OrbPrice) *NullableOrbPrice {
	return &NullableOrbPrice{value: val, isSet: true}
}

func (v NullableOrbPrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrbPrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
