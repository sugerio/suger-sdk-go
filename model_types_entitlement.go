/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TypesEntitlement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TypesEntitlement{}

// TypesEntitlement struct for TypesEntitlement
type TypesEntitlement struct {
	// The customer identifier is a handle to each unique customer in an application. Customer identifiers are obtained through the ResolveCustomer operation in AWS Marketplace Metering Service.
	CustomerIdentifier *string `json:"customerIdentifier,omitempty"`
	// The dimension for which the given entitlement applies. Dimensions represent categories of capacity in a product and are specified when the product is listed in AWS Marketplace.
	Dimension *string `json:"dimension,omitempty"`
	// The expiration date represents the minimum date through which this entitlement is expected to remain valid. For contractual products listed on AWS Marketplace, the expiration date is the date at which the customer will renew or cancel their contract. Customers who are opting to renew their contract will still have entitlements with an expiration date.
	ExpirationDate *string `json:"expirationDate,omitempty"`
	// The product code for which the given entitlement applies. Product codes are provided by AWS Marketplace when the product listing is created.
	ProductCode *string `json:"productCode,omitempty"`
	// The EntitlementValue represents the amount of capacity that the customer is entitled to for the product.
	Value *TypesEntitlementValue `json:"value,omitempty"`
}

// NewTypesEntitlement instantiates a new TypesEntitlement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTypesEntitlement() *TypesEntitlement {
	this := TypesEntitlement{}
	return &this
}

// NewTypesEntitlementWithDefaults instantiates a new TypesEntitlement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTypesEntitlementWithDefaults() *TypesEntitlement {
	this := TypesEntitlement{}
	return &this
}

// GetCustomerIdentifier returns the CustomerIdentifier field value if set, zero value otherwise.
func (o *TypesEntitlement) GetCustomerIdentifier() string {
	if o == nil || IsNil(o.CustomerIdentifier) {
		var ret string
		return ret
	}
	return *o.CustomerIdentifier
}

// GetCustomerIdentifierOk returns a tuple with the CustomerIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesEntitlement) GetCustomerIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerIdentifier) {
		return nil, false
	}
	return o.CustomerIdentifier, true
}

// HasCustomerIdentifier returns a boolean if a field has been set.
func (o *TypesEntitlement) HasCustomerIdentifier() bool {
	if o != nil && !IsNil(o.CustomerIdentifier) {
		return true
	}

	return false
}

// SetCustomerIdentifier gets a reference to the given string and assigns it to the CustomerIdentifier field.
func (o *TypesEntitlement) SetCustomerIdentifier(v string) {
	o.CustomerIdentifier = &v
}

// GetDimension returns the Dimension field value if set, zero value otherwise.
func (o *TypesEntitlement) GetDimension() string {
	if o == nil || IsNil(o.Dimension) {
		var ret string
		return ret
	}
	return *o.Dimension
}

// GetDimensionOk returns a tuple with the Dimension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesEntitlement) GetDimensionOk() (*string, bool) {
	if o == nil || IsNil(o.Dimension) {
		return nil, false
	}
	return o.Dimension, true
}

// HasDimension returns a boolean if a field has been set.
func (o *TypesEntitlement) HasDimension() bool {
	if o != nil && !IsNil(o.Dimension) {
		return true
	}

	return false
}

// SetDimension gets a reference to the given string and assigns it to the Dimension field.
func (o *TypesEntitlement) SetDimension(v string) {
	o.Dimension = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *TypesEntitlement) GetExpirationDate() string {
	if o == nil || IsNil(o.ExpirationDate) {
		var ret string
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesEntitlement) GetExpirationDateOk() (*string, bool) {
	if o == nil || IsNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *TypesEntitlement) HasExpirationDate() bool {
	if o != nil && !IsNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given string and assigns it to the ExpirationDate field.
func (o *TypesEntitlement) SetExpirationDate(v string) {
	o.ExpirationDate = &v
}

// GetProductCode returns the ProductCode field value if set, zero value otherwise.
func (o *TypesEntitlement) GetProductCode() string {
	if o == nil || IsNil(o.ProductCode) {
		var ret string
		return ret
	}
	return *o.ProductCode
}

// GetProductCodeOk returns a tuple with the ProductCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesEntitlement) GetProductCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ProductCode) {
		return nil, false
	}
	return o.ProductCode, true
}

// HasProductCode returns a boolean if a field has been set.
func (o *TypesEntitlement) HasProductCode() bool {
	if o != nil && !IsNil(o.ProductCode) {
		return true
	}

	return false
}

// SetProductCode gets a reference to the given string and assigns it to the ProductCode field.
func (o *TypesEntitlement) SetProductCode(v string) {
	o.ProductCode = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *TypesEntitlement) GetValue() TypesEntitlementValue {
	if o == nil || IsNil(o.Value) {
		var ret TypesEntitlementValue
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesEntitlement) GetValueOk() (*TypesEntitlementValue, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *TypesEntitlement) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given TypesEntitlementValue and assigns it to the Value field.
func (o *TypesEntitlement) SetValue(v TypesEntitlementValue) {
	o.Value = &v
}

func (o TypesEntitlement) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TypesEntitlement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CustomerIdentifier) {
		toSerialize["customerIdentifier"] = o.CustomerIdentifier
	}
	if !IsNil(o.Dimension) {
		toSerialize["dimension"] = o.Dimension
	}
	if !IsNil(o.ExpirationDate) {
		toSerialize["expirationDate"] = o.ExpirationDate
	}
	if !IsNil(o.ProductCode) {
		toSerialize["productCode"] = o.ProductCode
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableTypesEntitlement struct {
	value *TypesEntitlement
	isSet bool
}

func (v NullableTypesEntitlement) Get() *TypesEntitlement {
	return v.value
}

func (v *NullableTypesEntitlement) Set(val *TypesEntitlement) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesEntitlement) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesEntitlement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesEntitlement(val *TypesEntitlement) *NullableTypesEntitlement {
	return &NullableTypesEntitlement{value: val, isSet: true}
}

func (v NullableTypesEntitlement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesEntitlement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
