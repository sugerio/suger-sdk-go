/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
	"fmt"
)

// AwsMarketplaceCatalogPricingModel the model 'AwsMarketplaceCatalogPricingModel'
type AwsMarketplaceCatalogPricingModel string

// List of AwsMarketplaceCatalogPricingModel
const (
	AwsMarketplaceCatalogPricingModel_Contract AwsMarketplaceCatalogPricingModel = "Contract"
	AwsMarketplaceCatalogPricingModel_Usage    AwsMarketplaceCatalogPricingModel = "Usage"
	AwsMarketplaceCatalogPricingModel_Byol     AwsMarketplaceCatalogPricingModel = "Byol"
	AwsMarketplaceCatalogPricingModel_Free     AwsMarketplaceCatalogPricingModel = "Free"
	AwsMarketplaceCatalogPricingModel_Unknown  AwsMarketplaceCatalogPricingModel = "Unknown"
)

// All allowed values of AwsMarketplaceCatalogPricingModel enum
var AllowedAwsMarketplaceCatalogPricingModelEnumValues = []AwsMarketplaceCatalogPricingModel{
	"Contract",
	"Usage",
	"Byol",
	"Free",
	"Unknown",
}

func (v *AwsMarketplaceCatalogPricingModel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AwsMarketplaceCatalogPricingModel(value)
	for _, existing := range AllowedAwsMarketplaceCatalogPricingModelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AwsMarketplaceCatalogPricingModel", value)
}

// NewAwsMarketplaceCatalogPricingModelFromValue returns a pointer to a valid AwsMarketplaceCatalogPricingModel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAwsMarketplaceCatalogPricingModelFromValue(v string) (*AwsMarketplaceCatalogPricingModel, error) {
	ev := AwsMarketplaceCatalogPricingModel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AwsMarketplaceCatalogPricingModel: valid values are %v", v, AllowedAwsMarketplaceCatalogPricingModelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AwsMarketplaceCatalogPricingModel) IsValid() bool {
	for _, existing := range AllowedAwsMarketplaceCatalogPricingModelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AwsMarketplaceCatalogPricingModel value
func (v AwsMarketplaceCatalogPricingModel) Ptr() *AwsMarketplaceCatalogPricingModel {
	return &v
}

type NullableAwsMarketplaceCatalogPricingModel struct {
	value *AwsMarketplaceCatalogPricingModel
	isSet bool
}

func (v NullableAwsMarketplaceCatalogPricingModel) Get() *AwsMarketplaceCatalogPricingModel {
	return v.value
}

func (v *NullableAwsMarketplaceCatalogPricingModel) Set(val *AwsMarketplaceCatalogPricingModel) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsMarketplaceCatalogPricingModel) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsMarketplaceCatalogPricingModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsMarketplaceCatalogPricingModel(val *AwsMarketplaceCatalogPricingModel) *NullableAwsMarketplaceCatalogPricingModel {
	return &NullableAwsMarketplaceCatalogPricingModel{value: val, isSet: true}
}

func (v NullableAwsMarketplaceCatalogPricingModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsMarketplaceCatalogPricingModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
