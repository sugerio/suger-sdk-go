/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
)

// checks if the MetronomeBillableMetric type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetronomeBillableMetric{}

// MetronomeBillableMetric struct for MetronomeBillableMetric
type MetronomeBillableMetric struct {
	// the fields to group by when aggregating usage events.
	GroupBy []string `json:"group_by,omitempty"`
	// the uuid of the billable metric.
	Id *string `json:"id,omitempty"`
	// the name of the billable metric.
	Name *string `json:"name,omitempty"`
}

// NewMetronomeBillableMetric instantiates a new MetronomeBillableMetric object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetronomeBillableMetric() *MetronomeBillableMetric {
	this := MetronomeBillableMetric{}
	return &this
}

// NewMetronomeBillableMetricWithDefaults instantiates a new MetronomeBillableMetric object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetronomeBillableMetricWithDefaults() *MetronomeBillableMetric {
	this := MetronomeBillableMetric{}
	return &this
}

// GetGroupBy returns the GroupBy field value if set, zero value otherwise.
func (o *MetronomeBillableMetric) GetGroupBy() []string {
	if o == nil || IsNil(o.GroupBy) {
		var ret []string
		return ret
	}
	return o.GroupBy
}

// GetGroupByOk returns a tuple with the GroupBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetronomeBillableMetric) GetGroupByOk() ([]string, bool) {
	if o == nil || IsNil(o.GroupBy) {
		return nil, false
	}
	return o.GroupBy, true
}

// HasGroupBy returns a boolean if a field has been set.
func (o *MetronomeBillableMetric) HasGroupBy() bool {
	if o != nil && !IsNil(o.GroupBy) {
		return true
	}

	return false
}

// SetGroupBy gets a reference to the given []string and assigns it to the GroupBy field.
func (o *MetronomeBillableMetric) SetGroupBy(v []string) {
	o.GroupBy = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MetronomeBillableMetric) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetronomeBillableMetric) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MetronomeBillableMetric) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MetronomeBillableMetric) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MetronomeBillableMetric) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetronomeBillableMetric) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MetronomeBillableMetric) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MetronomeBillableMetric) SetName(v string) {
	o.Name = &v
}

func (o MetronomeBillableMetric) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetronomeBillableMetric) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GroupBy) {
		toSerialize["group_by"] = o.GroupBy
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableMetronomeBillableMetric struct {
	value *MetronomeBillableMetric
	isSet bool
}

func (v NullableMetronomeBillableMetric) Get() *MetronomeBillableMetric {
	return v.value
}

func (v *NullableMetronomeBillableMetric) Set(val *MetronomeBillableMetric) {
	v.value = val
	v.isSet = true
}

func (v NullableMetronomeBillableMetric) IsSet() bool {
	return v.isSet
}

func (v *NullableMetronomeBillableMetric) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetronomeBillableMetric(val *MetronomeBillableMetric) *NullableMetronomeBillableMetric {
	return &NullableMetronomeBillableMetric{value: val, isSet: true}
}

func (v NullableMetronomeBillableMetric) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetronomeBillableMetric) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
