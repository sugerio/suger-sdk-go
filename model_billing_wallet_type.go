/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// BillingWalletType the model 'BillingWalletType'
type BillingWalletType string

// List of BillingWalletType
const (
	BillingWalletType_ACH_DEBIT  BillingWalletType = "ach_debit"
	BillingWalletType_BACS_DEBIT BillingWalletType = "bacs_debit"
	BillingWalletType_CARD       BillingWalletType = "card"
	BillingWalletType_CREDIT     BillingWalletType = "credit"
	BillingWalletType_SEPA_DEBIT BillingWalletType = "sepa_debit"
)

// All allowed values of BillingWalletType enum
var AllowedBillingWalletTypeEnumValues = []BillingWalletType{
	"ach_debit",
	"bacs_debit",
	"card",
	"credit",
	"sepa_debit",
}

func (v *BillingWalletType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BillingWalletType(value)
	for _, existing := range AllowedBillingWalletTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BillingWalletType", value)
}

// NewBillingWalletTypeFromValue returns a pointer to a valid BillingWalletType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBillingWalletTypeFromValue(v string) (*BillingWalletType, error) {
	ev := BillingWalletType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BillingWalletType: valid values are %v", v, AllowedBillingWalletTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BillingWalletType) IsValid() bool {
	for _, existing := range AllowedBillingWalletTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BillingWalletType value
func (v BillingWalletType) Ptr() *BillingWalletType {
	return &v
}

type NullableBillingWalletType struct {
	value *BillingWalletType
	isSet bool
}

func (v NullableBillingWalletType) Get() *BillingWalletType {
	return v.value
}

func (v *NullableBillingWalletType) Set(val *BillingWalletType) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingWalletType) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingWalletType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingWalletType(val *BillingWalletType) *NullableBillingWalletType {
	return &NullableBillingWalletType{value: val, isSet: true}
}

func (v NullableBillingWalletType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingWalletType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
