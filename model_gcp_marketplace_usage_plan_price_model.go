/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// GcpMarketplaceUsagePlanPriceModel the model 'GcpMarketplaceUsagePlanPriceModel'
type GcpMarketplaceUsagePlanPriceModel string

// List of GcpMarketplaceUsagePlanPriceModel
const (
	GcpMarketplaceUsagePlanPriceModel_UNKNOWN GcpMarketplaceUsagePlanPriceModel = ""
	GcpMarketplaceUsagePlanPriceModel_CUD_LIST_PRICE GcpMarketplaceUsagePlanPriceModel = "CUD_LIST_PRICE"
	GcpMarketplaceUsagePlanPriceModel_CUD_ALL_USAGE_DISCOUNTED GcpMarketplaceUsagePlanPriceModel = "CUD_ALL_USAGE_DISCOUNTED"
	GcpMarketplaceUsagePlanPriceModel_USAGE_DISCOUNT_ONLY GcpMarketplaceUsagePlanPriceModel = "USAGE_DISCOUNT_ONLY"
)

// All allowed values of GcpMarketplaceUsagePlanPriceModel enum
var AllowedGcpMarketplaceUsagePlanPriceModelEnumValues = []GcpMarketplaceUsagePlanPriceModel{
	"",
	"CUD_LIST_PRICE",
	"CUD_ALL_USAGE_DISCOUNTED",
	"USAGE_DISCOUNT_ONLY",
}

func (v *GcpMarketplaceUsagePlanPriceModel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GcpMarketplaceUsagePlanPriceModel(value)
	for _, existing := range AllowedGcpMarketplaceUsagePlanPriceModelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GcpMarketplaceUsagePlanPriceModel", value)
}

// NewGcpMarketplaceUsagePlanPriceModelFromValue returns a pointer to a valid GcpMarketplaceUsagePlanPriceModel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGcpMarketplaceUsagePlanPriceModelFromValue(v string) (*GcpMarketplaceUsagePlanPriceModel, error) {
	ev := GcpMarketplaceUsagePlanPriceModel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GcpMarketplaceUsagePlanPriceModel: valid values are %v", v, AllowedGcpMarketplaceUsagePlanPriceModelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GcpMarketplaceUsagePlanPriceModel) IsValid() bool {
	for _, existing := range AllowedGcpMarketplaceUsagePlanPriceModelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GcpMarketplaceUsagePlanPriceModel value
func (v GcpMarketplaceUsagePlanPriceModel) Ptr() *GcpMarketplaceUsagePlanPriceModel {
	return &v
}

type NullableGcpMarketplaceUsagePlanPriceModel struct {
	value *GcpMarketplaceUsagePlanPriceModel
	isSet bool
}

func (v NullableGcpMarketplaceUsagePlanPriceModel) Get() *GcpMarketplaceUsagePlanPriceModel {
	return v.value
}

func (v *NullableGcpMarketplaceUsagePlanPriceModel) Set(val *GcpMarketplaceUsagePlanPriceModel) {
	v.value = val
	v.isSet = true
}

func (v NullableGcpMarketplaceUsagePlanPriceModel) IsSet() bool {
	return v.isSet
}

func (v *NullableGcpMarketplaceUsagePlanPriceModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGcpMarketplaceUsagePlanPriceModel(val *GcpMarketplaceUsagePlanPriceModel) *NullableGcpMarketplaceUsagePlanPriceModel {
	return &NullableGcpMarketplaceUsagePlanPriceModel{value: val, isSet: true}
}

func (v NullableGcpMarketplaceUsagePlanPriceModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGcpMarketplaceUsagePlanPriceModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

