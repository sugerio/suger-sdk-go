/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
)

// checks if the AzureMarketplacePrice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureMarketplacePrice{}

// AzureMarketplacePrice struct for AzureMarketplacePrice
type AzureMarketplacePrice struct {
	// ISO 4217 currency code
	Currency *string `json:"currency,omitempty"`
	// PriceAndAvailability audience definition
	Markets []string `json:"markets,omitempty"`
	// Prices   interface{} `json:\"prices,omitempty\"`
	Price *float32 `json:"price,omitempty"`
}

// NewAzureMarketplacePrice instantiates a new AzureMarketplacePrice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureMarketplacePrice() *AzureMarketplacePrice {
	this := AzureMarketplacePrice{}
	return &this
}

// NewAzureMarketplacePriceWithDefaults instantiates a new AzureMarketplacePrice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureMarketplacePriceWithDefaults() *AzureMarketplacePrice {
	this := AzureMarketplacePrice{}
	return &this
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *AzureMarketplacePrice) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureMarketplacePrice) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *AzureMarketplacePrice) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *AzureMarketplacePrice) SetCurrency(v string) {
	o.Currency = &v
}

// GetMarkets returns the Markets field value if set, zero value otherwise.
func (o *AzureMarketplacePrice) GetMarkets() []string {
	if o == nil || IsNil(o.Markets) {
		var ret []string
		return ret
	}
	return o.Markets
}

// GetMarketsOk returns a tuple with the Markets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureMarketplacePrice) GetMarketsOk() ([]string, bool) {
	if o == nil || IsNil(o.Markets) {
		return nil, false
	}
	return o.Markets, true
}

// HasMarkets returns a boolean if a field has been set.
func (o *AzureMarketplacePrice) HasMarkets() bool {
	if o != nil && !IsNil(o.Markets) {
		return true
	}

	return false
}

// SetMarkets gets a reference to the given []string and assigns it to the Markets field.
func (o *AzureMarketplacePrice) SetMarkets(v []string) {
	o.Markets = v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *AzureMarketplacePrice) GetPrice() float32 {
	if o == nil || IsNil(o.Price) {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureMarketplacePrice) GetPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *AzureMarketplacePrice) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *AzureMarketplacePrice) SetPrice(v float32) {
	o.Price = &v
}

func (o AzureMarketplacePrice) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureMarketplacePrice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Markets) {
		toSerialize["markets"] = o.Markets
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	return toSerialize, nil
}

type NullableAzureMarketplacePrice struct {
	value *AzureMarketplacePrice
	isSet bool
}

func (v NullableAzureMarketplacePrice) Get() *AzureMarketplacePrice {
	return v.value
}

func (v *NullableAzureMarketplacePrice) Set(val *AzureMarketplacePrice) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureMarketplacePrice) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureMarketplacePrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureMarketplacePrice(val *AzureMarketplacePrice) *NullableAzureMarketplacePrice {
	return &NullableAzureMarketplacePrice{value: val, isSet: true}
}

func (v NullableAzureMarketplacePrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureMarketplacePrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
