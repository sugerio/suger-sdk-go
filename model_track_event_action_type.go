/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
	"fmt"
)

// TrackEventActionType the model 'TrackEventActionType'
type TrackEventActionType string

// List of TrackEventActionType
const (
	TrackEventActionType_OPEN_EMAIL TrackEventActionType = "OPEN_EMAIL"
)

// All allowed values of TrackEventActionType enum
var AllowedTrackEventActionTypeEnumValues = []TrackEventActionType{
	"OPEN_EMAIL",
}

func (v *TrackEventActionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TrackEventActionType(value)
	for _, existing := range AllowedTrackEventActionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TrackEventActionType", value)
}

// NewTrackEventActionTypeFromValue returns a pointer to a valid TrackEventActionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTrackEventActionTypeFromValue(v string) (*TrackEventActionType, error) {
	ev := TrackEventActionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TrackEventActionType: valid values are %v", v, AllowedTrackEventActionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TrackEventActionType) IsValid() bool {
	for _, existing := range AllowedTrackEventActionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TrackEventActionType value
func (v TrackEventActionType) Ptr() *TrackEventActionType {
	return &v
}

type NullableTrackEventActionType struct {
	value *TrackEventActionType
	isSet bool
}

func (v NullableTrackEventActionType) Get() *TrackEventActionType {
	return v.value
}

func (v *NullableTrackEventActionType) Set(val *TrackEventActionType) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackEventActionType) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackEventActionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackEventActionType(val *TrackEventActionType) *NullableTrackEventActionType {
	return &NullableTrackEventActionType{value: val, isSet: true}
}

func (v NullableTrackEventActionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackEventActionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
