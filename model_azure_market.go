/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
)

// checks if the AzureMarket type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureMarket{}

// AzureMarket struct for AzureMarket
type AzureMarket struct {
	FriendlyName *string `json:"friendlyName,omitempty"`
	// ISO Country Code
	MarketCode *string `json:"marketCode,omitempty"`
}

// NewAzureMarket instantiates a new AzureMarket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureMarket() *AzureMarket {
	this := AzureMarket{}
	return &this
}

// NewAzureMarketWithDefaults instantiates a new AzureMarket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureMarketWithDefaults() *AzureMarket {
	this := AzureMarket{}
	return &this
}

// GetFriendlyName returns the FriendlyName field value if set, zero value otherwise.
func (o *AzureMarket) GetFriendlyName() string {
	if o == nil || IsNil(o.FriendlyName) {
		var ret string
		return ret
	}
	return *o.FriendlyName
}

// GetFriendlyNameOk returns a tuple with the FriendlyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureMarket) GetFriendlyNameOk() (*string, bool) {
	if o == nil || IsNil(o.FriendlyName) {
		return nil, false
	}
	return o.FriendlyName, true
}

// HasFriendlyName returns a boolean if a field has been set.
func (o *AzureMarket) HasFriendlyName() bool {
	if o != nil && !IsNil(o.FriendlyName) {
		return true
	}

	return false
}

// SetFriendlyName gets a reference to the given string and assigns it to the FriendlyName field.
func (o *AzureMarket) SetFriendlyName(v string) {
	o.FriendlyName = &v
}

// GetMarketCode returns the MarketCode field value if set, zero value otherwise.
func (o *AzureMarket) GetMarketCode() string {
	if o == nil || IsNil(o.MarketCode) {
		var ret string
		return ret
	}
	return *o.MarketCode
}

// GetMarketCodeOk returns a tuple with the MarketCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureMarket) GetMarketCodeOk() (*string, bool) {
	if o == nil || IsNil(o.MarketCode) {
		return nil, false
	}
	return o.MarketCode, true
}

// HasMarketCode returns a boolean if a field has been set.
func (o *AzureMarket) HasMarketCode() bool {
	if o != nil && !IsNil(o.MarketCode) {
		return true
	}

	return false
}

// SetMarketCode gets a reference to the given string and assigns it to the MarketCode field.
func (o *AzureMarket) SetMarketCode(v string) {
	o.MarketCode = &v
}

func (o AzureMarket) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureMarket) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FriendlyName) {
		toSerialize["friendlyName"] = o.FriendlyName
	}
	if !IsNil(o.MarketCode) {
		toSerialize["marketCode"] = o.MarketCode
	}
	return toSerialize, nil
}

type NullableAzureMarket struct {
	value *AzureMarket
	isSet bool
}

func (v NullableAzureMarket) Get() *AzureMarket {
	return v.value
}

func (v *NullableAzureMarket) Set(val *AzureMarket) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureMarket) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureMarket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureMarket(val *AzureMarket) *NullableAzureMarket {
	return &NullableAzureMarket{value: val, isSet: true}
}

func (v NullableAzureMarket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureMarket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
