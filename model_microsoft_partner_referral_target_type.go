/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftPartnerReferralTargetType the model 'MicrosoftPartnerReferralTargetType'
type MicrosoftPartnerReferralTargetType string

// List of MicrosoftPartnerReferralTargetType
const (
	MicrosoftPartnerReferralTargetType_Unknown MicrosoftPartnerReferralTargetType = ""
	MicrosoftPartnerReferralTargetType_None MicrosoftPartnerReferralTargetType = "None"
	MicrosoftPartnerReferralTargetType_BusinessProfileLocation MicrosoftPartnerReferralTargetType = "BusinessProfileLocation"
	MicrosoftPartnerReferralTargetType_SolutionProfile MicrosoftPartnerReferralTargetType = "SolutionProfile"
)

// All allowed values of MicrosoftPartnerReferralTargetType enum
var AllowedMicrosoftPartnerReferralTargetTypeEnumValues = []MicrosoftPartnerReferralTargetType{
	"",
	"None",
	"BusinessProfileLocation",
	"SolutionProfile",
}

func (v *MicrosoftPartnerReferralTargetType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftPartnerReferralTargetType(value)
	for _, existing := range AllowedMicrosoftPartnerReferralTargetTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftPartnerReferralTargetType", value)
}

// NewMicrosoftPartnerReferralTargetTypeFromValue returns a pointer to a valid MicrosoftPartnerReferralTargetType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftPartnerReferralTargetTypeFromValue(v string) (*MicrosoftPartnerReferralTargetType, error) {
	ev := MicrosoftPartnerReferralTargetType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftPartnerReferralTargetType: valid values are %v", v, AllowedMicrosoftPartnerReferralTargetTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftPartnerReferralTargetType) IsValid() bool {
	for _, existing := range AllowedMicrosoftPartnerReferralTargetTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MicrosoftPartnerReferralTargetType value
func (v MicrosoftPartnerReferralTargetType) Ptr() *MicrosoftPartnerReferralTargetType {
	return &v
}

type NullableMicrosoftPartnerReferralTargetType struct {
	value *MicrosoftPartnerReferralTargetType
	isSet bool
}

func (v NullableMicrosoftPartnerReferralTargetType) Get() *MicrosoftPartnerReferralTargetType {
	return v.value
}

func (v *NullableMicrosoftPartnerReferralTargetType) Set(val *MicrosoftPartnerReferralTargetType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftPartnerReferralTargetType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftPartnerReferralTargetType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftPartnerReferralTargetType(val *MicrosoftPartnerReferralTargetType) *NullableMicrosoftPartnerReferralTargetType {
	return &NullableMicrosoftPartnerReferralTargetType{value: val, isSet: true}
}

func (v NullableMicrosoftPartnerReferralTargetType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftPartnerReferralTargetType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

