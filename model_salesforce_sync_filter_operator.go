/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
	"fmt"
)

// SalesforceSyncFilterOperator the model 'SalesforceSyncFilterOperator'
type SalesforceSyncFilterOperator string

// List of SalesforceSyncFilterOperator
const (
	SalesforceSyncFilterOperator_Eq    SalesforceSyncFilterOperator = "EQ"
	SalesforceSyncFilterOperator_NE    SalesforceSyncFilterOperator = "NE"
	SalesforceSyncFilterOperator_GT    SalesforceSyncFilterOperator = "GT"
	SalesforceSyncFilterOperator_GTE   SalesforceSyncFilterOperator = "GTE"
	SalesforceSyncFilterOperator_LT    SalesforceSyncFilterOperator = "LT"
	SalesforceSyncFilterOperator_LTE   SalesforceSyncFilterOperator = "LTE"
	SalesforceSyncFilterOperator_IN    SalesforceSyncFilterOperator = "IN"
	SalesforceSyncFilterOperator_NOTIN SalesforceSyncFilterOperator = "NOTIN"
)

// All allowed values of SalesforceSyncFilterOperator enum
var AllowedSalesforceSyncFilterOperatorEnumValues = []SalesforceSyncFilterOperator{
	"EQ",
	"NE",
	"GT",
	"GTE",
	"LT",
	"LTE",
	"IN",
	"NOTIN",
}

func (v *SalesforceSyncFilterOperator) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SalesforceSyncFilterOperator(value)
	for _, existing := range AllowedSalesforceSyncFilterOperatorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SalesforceSyncFilterOperator", value)
}

// NewSalesforceSyncFilterOperatorFromValue returns a pointer to a valid SalesforceSyncFilterOperator
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSalesforceSyncFilterOperatorFromValue(v string) (*SalesforceSyncFilterOperator, error) {
	ev := SalesforceSyncFilterOperator(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SalesforceSyncFilterOperator: valid values are %v", v, AllowedSalesforceSyncFilterOperatorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SalesforceSyncFilterOperator) IsValid() bool {
	for _, existing := range AllowedSalesforceSyncFilterOperatorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SalesforceSyncFilterOperator value
func (v SalesforceSyncFilterOperator) Ptr() *SalesforceSyncFilterOperator {
	return &v
}

type NullableSalesforceSyncFilterOperator struct {
	value *SalesforceSyncFilterOperator
	isSet bool
}

func (v NullableSalesforceSyncFilterOperator) Get() *SalesforceSyncFilterOperator {
	return v.value
}

func (v *NullableSalesforceSyncFilterOperator) Set(val *SalesforceSyncFilterOperator) {
	v.value = val
	v.isSet = true
}

func (v NullableSalesforceSyncFilterOperator) IsSet() bool {
	return v.isSet
}

func (v *NullableSalesforceSyncFilterOperator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSalesforceSyncFilterOperator(val *SalesforceSyncFilterOperator) *NullableSalesforceSyncFilterOperator {
	return &NullableSalesforceSyncFilterOperator{value: val, isSet: true}
}

func (v NullableSalesforceSyncFilterOperator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSalesforceSyncFilterOperator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
