/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
)

// checks if the SqlCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SqlCondition{}

// SqlCondition struct for SqlCondition
type SqlCondition struct {
	// The column name.
	Column   *string      `json:"column,omitempty"`
	Operator *SqlOperator `json:"operator,omitempty"`
	// The value.
	Value     map[string]interface{} `json:"value,omitempty"`
	ValueType *SqlValueType          `json:"valueType,omitempty"`
}

// NewSqlCondition instantiates a new SqlCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSqlCondition() *SqlCondition {
	this := SqlCondition{}
	return &this
}

// NewSqlConditionWithDefaults instantiates a new SqlCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSqlConditionWithDefaults() *SqlCondition {
	this := SqlCondition{}
	return &this
}

// GetColumn returns the Column field value if set, zero value otherwise.
func (o *SqlCondition) GetColumn() string {
	if o == nil || IsNil(o.Column) {
		var ret string
		return ret
	}
	return *o.Column
}

// GetColumnOk returns a tuple with the Column field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlCondition) GetColumnOk() (*string, bool) {
	if o == nil || IsNil(o.Column) {
		return nil, false
	}
	return o.Column, true
}

// HasColumn returns a boolean if a field has been set.
func (o *SqlCondition) HasColumn() bool {
	if o != nil && !IsNil(o.Column) {
		return true
	}

	return false
}

// SetColumn gets a reference to the given string and assigns it to the Column field.
func (o *SqlCondition) SetColumn(v string) {
	o.Column = &v
}

// GetOperator returns the Operator field value if set, zero value otherwise.
func (o *SqlCondition) GetOperator() SqlOperator {
	if o == nil || IsNil(o.Operator) {
		var ret SqlOperator
		return ret
	}
	return *o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlCondition) GetOperatorOk() (*SqlOperator, bool) {
	if o == nil || IsNil(o.Operator) {
		return nil, false
	}
	return o.Operator, true
}

// HasOperator returns a boolean if a field has been set.
func (o *SqlCondition) HasOperator() bool {
	if o != nil && !IsNil(o.Operator) {
		return true
	}

	return false
}

// SetOperator gets a reference to the given SqlOperator and assigns it to the Operator field.
func (o *SqlCondition) SetOperator(v SqlOperator) {
	o.Operator = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *SqlCondition) GetValue() map[string]interface{} {
	if o == nil || IsNil(o.Value) {
		var ret map[string]interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlCondition) GetValueOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return map[string]interface{}{}, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *SqlCondition) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]interface{} and assigns it to the Value field.
func (o *SqlCondition) SetValue(v map[string]interface{}) {
	o.Value = v
}

// GetValueType returns the ValueType field value if set, zero value otherwise.
func (o *SqlCondition) GetValueType() SqlValueType {
	if o == nil || IsNil(o.ValueType) {
		var ret SqlValueType
		return ret
	}
	return *o.ValueType
}

// GetValueTypeOk returns a tuple with the ValueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlCondition) GetValueTypeOk() (*SqlValueType, bool) {
	if o == nil || IsNil(o.ValueType) {
		return nil, false
	}
	return o.ValueType, true
}

// HasValueType returns a boolean if a field has been set.
func (o *SqlCondition) HasValueType() bool {
	if o != nil && !IsNil(o.ValueType) {
		return true
	}

	return false
}

// SetValueType gets a reference to the given SqlValueType and assigns it to the ValueType field.
func (o *SqlCondition) SetValueType(v SqlValueType) {
	o.ValueType = &v
}

func (o SqlCondition) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SqlCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Column) {
		toSerialize["column"] = o.Column
	}
	if !IsNil(o.Operator) {
		toSerialize["operator"] = o.Operator
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.ValueType) {
		toSerialize["valueType"] = o.ValueType
	}
	return toSerialize, nil
}

type NullableSqlCondition struct {
	value *SqlCondition
	isSet bool
}

func (v NullableSqlCondition) Get() *SqlCondition {
	return v.value
}

func (v *NullableSqlCondition) Set(val *SqlCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlCondition(val *SqlCondition) *NullableSqlCondition {
	return &NullableSqlCondition{value: val, isSet: true}
}

func (v NullableSqlCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSqlCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
