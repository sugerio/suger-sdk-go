/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GcpUserInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GcpUserInfo{}

// GcpUserInfo struct for GcpUserInfo
type GcpUserInfo struct {
	// An array of strings representing the user's roles. Right now, it can be either: ** account_admin, which indicates that the user is a Billing Account Administrator of the billing account that purchased the product, or ** project_editor, which indicates that the user is a Project Editor, but not a Billing Administrator, of the project under that billing account.
	Roles []string `json:"roles,omitempty"`
	// The user's obfuscated GAIA ID, which can be used to initiate Open ID Connect.
	UserIdentity *string `json:"user_identity,omitempty"`
}

// NewGcpUserInfo instantiates a new GcpUserInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGcpUserInfo() *GcpUserInfo {
	this := GcpUserInfo{}
	return &this
}

// NewGcpUserInfoWithDefaults instantiates a new GcpUserInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGcpUserInfoWithDefaults() *GcpUserInfo {
	this := GcpUserInfo{}
	return &this
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *GcpUserInfo) GetRoles() []string {
	if o == nil || IsNil(o.Roles) {
		var ret []string
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpUserInfo) GetRolesOk() ([]string, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *GcpUserInfo) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *GcpUserInfo) SetRoles(v []string) {
	o.Roles = v
}

// GetUserIdentity returns the UserIdentity field value if set, zero value otherwise.
func (o *GcpUserInfo) GetUserIdentity() string {
	if o == nil || IsNil(o.UserIdentity) {
		var ret string
		return ret
	}
	return *o.UserIdentity
}

// GetUserIdentityOk returns a tuple with the UserIdentity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpUserInfo) GetUserIdentityOk() (*string, bool) {
	if o == nil || IsNil(o.UserIdentity) {
		return nil, false
	}
	return o.UserIdentity, true
}

// HasUserIdentity returns a boolean if a field has been set.
func (o *GcpUserInfo) HasUserIdentity() bool {
	if o != nil && !IsNil(o.UserIdentity) {
		return true
	}

	return false
}

// SetUserIdentity gets a reference to the given string and assigns it to the UserIdentity field.
func (o *GcpUserInfo) SetUserIdentity(v string) {
	o.UserIdentity = &v
}

func (o GcpUserInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GcpUserInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	if !IsNil(o.UserIdentity) {
		toSerialize["user_identity"] = o.UserIdentity
	}
	return toSerialize, nil
}

type NullableGcpUserInfo struct {
	value *GcpUserInfo
	isSet bool
}

func (v NullableGcpUserInfo) Get() *GcpUserInfo {
	return v.value
}

func (v *NullableGcpUserInfo) Set(val *GcpUserInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableGcpUserInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableGcpUserInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGcpUserInfo(val *GcpUserInfo) *NullableGcpUserInfo {
	return &NullableGcpUserInfo{value: val, isSet: true}
}

func (v NullableGcpUserInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGcpUserInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


