/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the WorkloadMetaInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkloadMetaInfo{}

// WorkloadMetaInfo struct for WorkloadMetaInfo
type WorkloadMetaInfo struct {
	// Applicable for AWS Marketplace only, when the IsAgreementBasedOffer is true.
	BaseAgreementId *string `json:"baseAgreementId,omitempty"`
	// The Suger buyer IDs of the private offer if available.
	BuyerIds []string `json:"buyerIds,omitempty"`
	// The contacts of the offer to notify if any updates.
	Contacts []Contact `json:"contacts,omitempty"`
	// The custom meta info of the offer can be updated by seller via API or console.
	CustomMetaInfo *map[string]string `json:"customMetaInfo,omitempty"`
	// The error messages when the offer is invalid or offer related tasks failed. Populated by Suger service.
	ErrorMessages []string `json:"errorMessages,omitempty"`
	// The Internal note of the private offer. It is only visible to the seller/ISV, not visible to the buyer. Up to 1000 characters.
	InternalNote *string `json:"internalNote,omitempty"`
	// Applicable for AWS Marketplace only, If this offer is agreement based offer.
	IsAgreementBasedOffer *bool `json:"isAgreementBasedOffer,omitempty"`
	// Applicable for AWS Marketplace only. If this offer is renewal offer of existing agreement. The existing agreement can be within or outside AWS Marketplace. AWS may audit and verify your offer is a renewal. If AWS is unable to verify your offer, then AWS may revoke the offer and entitlements from your customer.
	IsRenewalOffer *bool `json:"isRenewalOffer,omitempty"`
	// The notifications of the offer if any updates. In most cases, it is to notify contacts/buyers when the offer is pending acceptance.
	Notifications []NotificationEvent `json:"notifications,omitempty"`
	RenewalOfferType *AwsRenewalOfferType `json:"renewalOfferType,omitempty"`
}

// NewWorkloadMetaInfo instantiates a new WorkloadMetaInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkloadMetaInfo() *WorkloadMetaInfo {
	this := WorkloadMetaInfo{}
	return &this
}

// NewWorkloadMetaInfoWithDefaults instantiates a new WorkloadMetaInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkloadMetaInfoWithDefaults() *WorkloadMetaInfo {
	this := WorkloadMetaInfo{}
	return &this
}

// GetBaseAgreementId returns the BaseAgreementId field value if set, zero value otherwise.
func (o *WorkloadMetaInfo) GetBaseAgreementId() string {
	if o == nil || IsNil(o.BaseAgreementId) {
		var ret string
		return ret
	}
	return *o.BaseAgreementId
}

// GetBaseAgreementIdOk returns a tuple with the BaseAgreementId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadMetaInfo) GetBaseAgreementIdOk() (*string, bool) {
	if o == nil || IsNil(o.BaseAgreementId) {
		return nil, false
	}
	return o.BaseAgreementId, true
}

// HasBaseAgreementId returns a boolean if a field has been set.
func (o *WorkloadMetaInfo) HasBaseAgreementId() bool {
	if o != nil && !IsNil(o.BaseAgreementId) {
		return true
	}

	return false
}

// SetBaseAgreementId gets a reference to the given string and assigns it to the BaseAgreementId field.
func (o *WorkloadMetaInfo) SetBaseAgreementId(v string) {
	o.BaseAgreementId = &v
}

// GetBuyerIds returns the BuyerIds field value if set, zero value otherwise.
func (o *WorkloadMetaInfo) GetBuyerIds() []string {
	if o == nil || IsNil(o.BuyerIds) {
		var ret []string
		return ret
	}
	return o.BuyerIds
}

// GetBuyerIdsOk returns a tuple with the BuyerIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadMetaInfo) GetBuyerIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.BuyerIds) {
		return nil, false
	}
	return o.BuyerIds, true
}

// HasBuyerIds returns a boolean if a field has been set.
func (o *WorkloadMetaInfo) HasBuyerIds() bool {
	if o != nil && !IsNil(o.BuyerIds) {
		return true
	}

	return false
}

// SetBuyerIds gets a reference to the given []string and assigns it to the BuyerIds field.
func (o *WorkloadMetaInfo) SetBuyerIds(v []string) {
	o.BuyerIds = v
}

// GetContacts returns the Contacts field value if set, zero value otherwise.
func (o *WorkloadMetaInfo) GetContacts() []Contact {
	if o == nil || IsNil(o.Contacts) {
		var ret []Contact
		return ret
	}
	return o.Contacts
}

// GetContactsOk returns a tuple with the Contacts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadMetaInfo) GetContactsOk() ([]Contact, bool) {
	if o == nil || IsNil(o.Contacts) {
		return nil, false
	}
	return o.Contacts, true
}

// HasContacts returns a boolean if a field has been set.
func (o *WorkloadMetaInfo) HasContacts() bool {
	if o != nil && !IsNil(o.Contacts) {
		return true
	}

	return false
}

// SetContacts gets a reference to the given []Contact and assigns it to the Contacts field.
func (o *WorkloadMetaInfo) SetContacts(v []Contact) {
	o.Contacts = v
}

// GetCustomMetaInfo returns the CustomMetaInfo field value if set, zero value otherwise.
func (o *WorkloadMetaInfo) GetCustomMetaInfo() map[string]string {
	if o == nil || IsNil(o.CustomMetaInfo) {
		var ret map[string]string
		return ret
	}
	return *o.CustomMetaInfo
}

// GetCustomMetaInfoOk returns a tuple with the CustomMetaInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadMetaInfo) GetCustomMetaInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.CustomMetaInfo) {
		return nil, false
	}
	return o.CustomMetaInfo, true
}

// HasCustomMetaInfo returns a boolean if a field has been set.
func (o *WorkloadMetaInfo) HasCustomMetaInfo() bool {
	if o != nil && !IsNil(o.CustomMetaInfo) {
		return true
	}

	return false
}

// SetCustomMetaInfo gets a reference to the given map[string]string and assigns it to the CustomMetaInfo field.
func (o *WorkloadMetaInfo) SetCustomMetaInfo(v map[string]string) {
	o.CustomMetaInfo = &v
}

// GetErrorMessages returns the ErrorMessages field value if set, zero value otherwise.
func (o *WorkloadMetaInfo) GetErrorMessages() []string {
	if o == nil || IsNil(o.ErrorMessages) {
		var ret []string
		return ret
	}
	return o.ErrorMessages
}

// GetErrorMessagesOk returns a tuple with the ErrorMessages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadMetaInfo) GetErrorMessagesOk() ([]string, bool) {
	if o == nil || IsNil(o.ErrorMessages) {
		return nil, false
	}
	return o.ErrorMessages, true
}

// HasErrorMessages returns a boolean if a field has been set.
func (o *WorkloadMetaInfo) HasErrorMessages() bool {
	if o != nil && !IsNil(o.ErrorMessages) {
		return true
	}

	return false
}

// SetErrorMessages gets a reference to the given []string and assigns it to the ErrorMessages field.
func (o *WorkloadMetaInfo) SetErrorMessages(v []string) {
	o.ErrorMessages = v
}

// GetInternalNote returns the InternalNote field value if set, zero value otherwise.
func (o *WorkloadMetaInfo) GetInternalNote() string {
	if o == nil || IsNil(o.InternalNote) {
		var ret string
		return ret
	}
	return *o.InternalNote
}

// GetInternalNoteOk returns a tuple with the InternalNote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadMetaInfo) GetInternalNoteOk() (*string, bool) {
	if o == nil || IsNil(o.InternalNote) {
		return nil, false
	}
	return o.InternalNote, true
}

// HasInternalNote returns a boolean if a field has been set.
func (o *WorkloadMetaInfo) HasInternalNote() bool {
	if o != nil && !IsNil(o.InternalNote) {
		return true
	}

	return false
}

// SetInternalNote gets a reference to the given string and assigns it to the InternalNote field.
func (o *WorkloadMetaInfo) SetInternalNote(v string) {
	o.InternalNote = &v
}

// GetIsAgreementBasedOffer returns the IsAgreementBasedOffer field value if set, zero value otherwise.
func (o *WorkloadMetaInfo) GetIsAgreementBasedOffer() bool {
	if o == nil || IsNil(o.IsAgreementBasedOffer) {
		var ret bool
		return ret
	}
	return *o.IsAgreementBasedOffer
}

// GetIsAgreementBasedOfferOk returns a tuple with the IsAgreementBasedOffer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadMetaInfo) GetIsAgreementBasedOfferOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAgreementBasedOffer) {
		return nil, false
	}
	return o.IsAgreementBasedOffer, true
}

// HasIsAgreementBasedOffer returns a boolean if a field has been set.
func (o *WorkloadMetaInfo) HasIsAgreementBasedOffer() bool {
	if o != nil && !IsNil(o.IsAgreementBasedOffer) {
		return true
	}

	return false
}

// SetIsAgreementBasedOffer gets a reference to the given bool and assigns it to the IsAgreementBasedOffer field.
func (o *WorkloadMetaInfo) SetIsAgreementBasedOffer(v bool) {
	o.IsAgreementBasedOffer = &v
}

// GetIsRenewalOffer returns the IsRenewalOffer field value if set, zero value otherwise.
func (o *WorkloadMetaInfo) GetIsRenewalOffer() bool {
	if o == nil || IsNil(o.IsRenewalOffer) {
		var ret bool
		return ret
	}
	return *o.IsRenewalOffer
}

// GetIsRenewalOfferOk returns a tuple with the IsRenewalOffer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadMetaInfo) GetIsRenewalOfferOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRenewalOffer) {
		return nil, false
	}
	return o.IsRenewalOffer, true
}

// HasIsRenewalOffer returns a boolean if a field has been set.
func (o *WorkloadMetaInfo) HasIsRenewalOffer() bool {
	if o != nil && !IsNil(o.IsRenewalOffer) {
		return true
	}

	return false
}

// SetIsRenewalOffer gets a reference to the given bool and assigns it to the IsRenewalOffer field.
func (o *WorkloadMetaInfo) SetIsRenewalOffer(v bool) {
	o.IsRenewalOffer = &v
}

// GetNotifications returns the Notifications field value if set, zero value otherwise.
func (o *WorkloadMetaInfo) GetNotifications() []NotificationEvent {
	if o == nil || IsNil(o.Notifications) {
		var ret []NotificationEvent
		return ret
	}
	return o.Notifications
}

// GetNotificationsOk returns a tuple with the Notifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadMetaInfo) GetNotificationsOk() ([]NotificationEvent, bool) {
	if o == nil || IsNil(o.Notifications) {
		return nil, false
	}
	return o.Notifications, true
}

// HasNotifications returns a boolean if a field has been set.
func (o *WorkloadMetaInfo) HasNotifications() bool {
	if o != nil && !IsNil(o.Notifications) {
		return true
	}

	return false
}

// SetNotifications gets a reference to the given []NotificationEvent and assigns it to the Notifications field.
func (o *WorkloadMetaInfo) SetNotifications(v []NotificationEvent) {
	o.Notifications = v
}

// GetRenewalOfferType returns the RenewalOfferType field value if set, zero value otherwise.
func (o *WorkloadMetaInfo) GetRenewalOfferType() AwsRenewalOfferType {
	if o == nil || IsNil(o.RenewalOfferType) {
		var ret AwsRenewalOfferType
		return ret
	}
	return *o.RenewalOfferType
}

// GetRenewalOfferTypeOk returns a tuple with the RenewalOfferType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadMetaInfo) GetRenewalOfferTypeOk() (*AwsRenewalOfferType, bool) {
	if o == nil || IsNil(o.RenewalOfferType) {
		return nil, false
	}
	return o.RenewalOfferType, true
}

// HasRenewalOfferType returns a boolean if a field has been set.
func (o *WorkloadMetaInfo) HasRenewalOfferType() bool {
	if o != nil && !IsNil(o.RenewalOfferType) {
		return true
	}

	return false
}

// SetRenewalOfferType gets a reference to the given AwsRenewalOfferType and assigns it to the RenewalOfferType field.
func (o *WorkloadMetaInfo) SetRenewalOfferType(v AwsRenewalOfferType) {
	o.RenewalOfferType = &v
}

func (o WorkloadMetaInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkloadMetaInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BaseAgreementId) {
		toSerialize["baseAgreementId"] = o.BaseAgreementId
	}
	if !IsNil(o.BuyerIds) {
		toSerialize["buyerIds"] = o.BuyerIds
	}
	if !IsNil(o.Contacts) {
		toSerialize["contacts"] = o.Contacts
	}
	if !IsNil(o.CustomMetaInfo) {
		toSerialize["customMetaInfo"] = o.CustomMetaInfo
	}
	if !IsNil(o.ErrorMessages) {
		toSerialize["errorMessages"] = o.ErrorMessages
	}
	if !IsNil(o.InternalNote) {
		toSerialize["internalNote"] = o.InternalNote
	}
	if !IsNil(o.IsAgreementBasedOffer) {
		toSerialize["isAgreementBasedOffer"] = o.IsAgreementBasedOffer
	}
	if !IsNil(o.IsRenewalOffer) {
		toSerialize["isRenewalOffer"] = o.IsRenewalOffer
	}
	if !IsNil(o.Notifications) {
		toSerialize["notifications"] = o.Notifications
	}
	if !IsNil(o.RenewalOfferType) {
		toSerialize["renewalOfferType"] = o.RenewalOfferType
	}
	return toSerialize, nil
}

type NullableWorkloadMetaInfo struct {
	value *WorkloadMetaInfo
	isSet bool
}

func (v NullableWorkloadMetaInfo) Get() *WorkloadMetaInfo {
	return v.value
}

func (v *NullableWorkloadMetaInfo) Set(val *WorkloadMetaInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkloadMetaInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkloadMetaInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkloadMetaInfo(val *WorkloadMetaInfo) *NullableWorkloadMetaInfo {
	return &NullableWorkloadMetaInfo{value: val, isSet: true}
}

func (v NullableWorkloadMetaInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkloadMetaInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


