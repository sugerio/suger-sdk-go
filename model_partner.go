/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// Partner the model 'Partner'
type Partner string

// List of Partner
const (
	Partner_UNKNOWN Partner = ""
	Partner_ALIBABA Partner = "ALIBABA"
	Partner_AWS Partner = "AWS"
	Partner_AZURE Partner = "AZURE"
	Partner_GCP Partner = "GCP"
	Partner_MICROSOFT Partner = "MICROSOFT"
	Partner_DYNAMICS365 Partner = "DYNAMICS365"
	Partner_HUBSPOT Partner = "HUBSPOT"
	Partner_MARKETO Partner = "MARKETO"
	Partner_ORACLE Partner = "ORACLE"
	Partner_REDHAT Partner = "REDHAT"
	Partner_SALESFORCE Partner = "SALESFORCE"
	Partner_SLACK Partner = "SLACK"
	Partner_ZOHO Partner = "ZOHO"
	Partner_METRONOME Partner = "METRONOME"
	Partner_ORB Partner = "ORB"
)

// All allowed values of Partner enum
var AllowedPartnerEnumValues = []Partner{
	"",
	"ALIBABA",
	"AWS",
	"AZURE",
	"GCP",
	"MICROSOFT",
	"DYNAMICS365",
	"HUBSPOT",
	"MARKETO",
	"ORACLE",
	"REDHAT",
	"SALESFORCE",
	"SLACK",
	"ZOHO",
	"METRONOME",
	"ORB",
}

func (v *Partner) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Partner(value)
	for _, existing := range AllowedPartnerEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Partner", value)
}

// NewPartnerFromValue returns a pointer to a valid Partner
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPartnerFromValue(v string) (*Partner, error) {
	ev := Partner(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Partner: valid values are %v", v, AllowedPartnerEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Partner) IsValid() bool {
	for _, existing := range AllowedPartnerEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Partner value
func (v Partner) Ptr() *Partner {
	return &v
}

type NullablePartner struct {
	value *Partner
	isSet bool
}

func (v NullablePartner) Get() *Partner {
	return v.value
}

func (v *NullablePartner) Set(val *Partner) {
	v.value = val
	v.isSet = true
}

func (v NullablePartner) IsSet() bool {
	return v.isSet
}

func (v *NullablePartner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartner(val *Partner) *NullablePartner {
	return &NullablePartner{value: val, isSet: true}
}

func (v NullablePartner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

