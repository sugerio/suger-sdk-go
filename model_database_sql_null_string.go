/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
)

// checks if the DatabaseSqlNullString type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseSqlNullString{}

// DatabaseSqlNullString struct for DatabaseSqlNullString
type DatabaseSqlNullString struct {
	String *string `json:"string,omitempty"`
	// Valid is true if String is not NULL
	Valid *bool `json:"valid,omitempty"`
}

// NewDatabaseSqlNullString instantiates a new DatabaseSqlNullString object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseSqlNullString() *DatabaseSqlNullString {
	this := DatabaseSqlNullString{}
	return &this
}

// NewDatabaseSqlNullStringWithDefaults instantiates a new DatabaseSqlNullString object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseSqlNullStringWithDefaults() *DatabaseSqlNullString {
	this := DatabaseSqlNullString{}
	return &this
}

// GetString returns the String field value if set, zero value otherwise.
func (o *DatabaseSqlNullString) GetString() string {
	if o == nil || IsNil(o.String) {
		var ret string
		return ret
	}
	return *o.String
}

// GetStringOk returns a tuple with the String field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseSqlNullString) GetStringOk() (*string, bool) {
	if o == nil || IsNil(o.String) {
		return nil, false
	}
	return o.String, true
}

// HasString returns a boolean if a field has been set.
func (o *DatabaseSqlNullString) HasString() bool {
	if o != nil && !IsNil(o.String) {
		return true
	}

	return false
}

// SetString gets a reference to the given string and assigns it to the String field.
func (o *DatabaseSqlNullString) SetString(v string) {
	o.String = &v
}

// GetValid returns the Valid field value if set, zero value otherwise.
func (o *DatabaseSqlNullString) GetValid() bool {
	if o == nil || IsNil(o.Valid) {
		var ret bool
		return ret
	}
	return *o.Valid
}

// GetValidOk returns a tuple with the Valid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseSqlNullString) GetValidOk() (*bool, bool) {
	if o == nil || IsNil(o.Valid) {
		return nil, false
	}
	return o.Valid, true
}

// HasValid returns a boolean if a field has been set.
func (o *DatabaseSqlNullString) HasValid() bool {
	if o != nil && !IsNil(o.Valid) {
		return true
	}

	return false
}

// SetValid gets a reference to the given bool and assigns it to the Valid field.
func (o *DatabaseSqlNullString) SetValid(v bool) {
	o.Valid = &v
}

func (o DatabaseSqlNullString) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseSqlNullString) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.String) {
		toSerialize["string"] = o.String
	}
	if !IsNil(o.Valid) {
		toSerialize["valid"] = o.Valid
	}
	return toSerialize, nil
}

type NullableDatabaseSqlNullString struct {
	value *DatabaseSqlNullString
	isSet bool
}

func (v NullableDatabaseSqlNullString) Get() *DatabaseSqlNullString {
	return v.value
}

func (v *NullableDatabaseSqlNullString) Set(val *DatabaseSqlNullString) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseSqlNullString) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseSqlNullString) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseSqlNullString(val *DatabaseSqlNullString) *NullableDatabaseSqlNullString {
	return &NullableDatabaseSqlNullString{value: val, isSet: true}
}

func (v NullableDatabaseSqlNullString) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseSqlNullString) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
