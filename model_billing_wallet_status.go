/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// BillingWalletStatus the model 'BillingWalletStatus'
type BillingWalletStatus string

// List of BillingWalletStatus
const (
	BillingWalletStatus_ACTIVE         BillingWalletStatus = "ACTIVE"
	BillingWalletStatus_DELETED        BillingWalletStatus = "DELETED"
	BillingWalletStatus_PENDING_VERIFY BillingWalletStatus = "PENDING_VERIFY"
	BillingWalletStatus_EXPIRED        BillingWalletStatus = "EXPIRED"
	BillingWalletStatus_CLOSED         BillingWalletStatus = "CLOSED"
)

// All allowed values of BillingWalletStatus enum
var AllowedBillingWalletStatusEnumValues = []BillingWalletStatus{
	"ACTIVE",
	"DELETED",
	"PENDING_VERIFY",
	"EXPIRED",
	"CLOSED",
}

func (v *BillingWalletStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BillingWalletStatus(value)
	for _, existing := range AllowedBillingWalletStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BillingWalletStatus", value)
}

// NewBillingWalletStatusFromValue returns a pointer to a valid BillingWalletStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBillingWalletStatusFromValue(v string) (*BillingWalletStatus, error) {
	ev := BillingWalletStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BillingWalletStatus: valid values are %v", v, AllowedBillingWalletStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BillingWalletStatus) IsValid() bool {
	for _, existing := range AllowedBillingWalletStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BillingWalletStatus value
func (v BillingWalletStatus) Ptr() *BillingWalletStatus {
	return &v
}

type NullableBillingWalletStatus struct {
	value *BillingWalletStatus
	isSet bool
}

func (v NullableBillingWalletStatus) Get() *BillingWalletStatus {
	return v.value
}

func (v *NullableBillingWalletStatus) Set(val *BillingWalletStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingWalletStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingWalletStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingWalletStatus(val *BillingWalletStatus) *NullableBillingWalletStatus {
	return &NullableBillingWalletStatus{value: val, isSet: true}
}

func (v NullableBillingWalletStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingWalletStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
