/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// UsageRecordReportStatus the model 'UsageRecordReportStatus'
type UsageRecordReportStatus string

// List of UsageRecordReportStatus
const (
	UsageRecordReportStatus_UNKNOWN  UsageRecordReportStatus = ""
	UsageRecordReportStatus_SUCCESS  UsageRecordReportStatus = "SUCCESS"
	UsageRecordReportStatus_FAILED   UsageRecordReportStatus = "FAILED"
	UsageRecordReportStatus_CREATED  UsageRecordReportStatus = "CREATED"
	UsageRecordReportStatus_INVOICED UsageRecordReportStatus = "INVOICED"
	UsageRecordReportStatus_DELETED  UsageRecordReportStatus = "DELETED"
	UsageRecordReportStatus_CANCELED UsageRecordReportStatus = "CANCELED"
)

// All allowed values of UsageRecordReportStatus enum
var AllowedUsageRecordReportStatusEnumValues = []UsageRecordReportStatus{
	"",
	"SUCCESS",
	"FAILED",
	"CREATED",
	"INVOICED",
	"DELETED",
	"CANCELED",
}

func (v *UsageRecordReportStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UsageRecordReportStatus(value)
	for _, existing := range AllowedUsageRecordReportStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UsageRecordReportStatus", value)
}

// NewUsageRecordReportStatusFromValue returns a pointer to a valid UsageRecordReportStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUsageRecordReportStatusFromValue(v string) (*UsageRecordReportStatus, error) {
	ev := UsageRecordReportStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UsageRecordReportStatus: valid values are %v", v, AllowedUsageRecordReportStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UsageRecordReportStatus) IsValid() bool {
	for _, existing := range AllowedUsageRecordReportStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UsageRecordReportStatus value
func (v UsageRecordReportStatus) Ptr() *UsageRecordReportStatus {
	return &v
}

type NullableUsageRecordReportStatus struct {
	value *UsageRecordReportStatus
	isSet bool
}

func (v NullableUsageRecordReportStatus) Get() *UsageRecordReportStatus {
	return v.value
}

func (v *NullableUsageRecordReportStatus) Set(val *UsageRecordReportStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageRecordReportStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageRecordReportStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageRecordReportStatus(val *UsageRecordReportStatus) *NullableUsageRecordReportStatus {
	return &NullableUsageRecordReportStatus{value: val, isSet: true}
}

func (v NullableUsageRecordReportStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageRecordReportStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
