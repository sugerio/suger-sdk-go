/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SqlValueType the model 'SqlValueType'
type SqlValueType string

// List of SqlValueType
const (
	SqlValueType_STRING SqlValueType = "STRING"
	SqlValueType_INT SqlValueType = "INT"
	SqlValueType_FLOAT SqlValueType = "FLOAT"
	SqlValueType_BOOL SqlValueType = "BOOL"
	SqlValueType_STRING_ARRAY SqlValueType = "STRING_ARRAY"
	SqlValueType_INT_ARRAY SqlValueType = "INT_ARRAY"
	SqlValueType_FLOAT_ARRAY SqlValueType = "FLOAT_ARRAY"
	SqlValueType_BOOL_ARRAY SqlValueType = "BOOL_ARRAY"
	SqlValueType_NULL SqlValueType = "NULL"
)

// All allowed values of SqlValueType enum
var AllowedSqlValueTypeEnumValues = []SqlValueType{
	"STRING",
	"INT",
	"FLOAT",
	"BOOL",
	"STRING_ARRAY",
	"INT_ARRAY",
	"FLOAT_ARRAY",
	"BOOL_ARRAY",
	"NULL",
}

func (v *SqlValueType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SqlValueType(value)
	for _, existing := range AllowedSqlValueTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SqlValueType", value)
}

// NewSqlValueTypeFromValue returns a pointer to a valid SqlValueType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSqlValueTypeFromValue(v string) (*SqlValueType, error) {
	ev := SqlValueType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SqlValueType: valid values are %v", v, AllowedSqlValueTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SqlValueType) IsValid() bool {
	for _, existing := range AllowedSqlValueTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SqlValueType value
func (v SqlValueType) Ptr() *SqlValueType {
	return &v
}

type NullableSqlValueType struct {
	value *SqlValueType
	isSet bool
}

func (v NullableSqlValueType) Get() *SqlValueType {
	return v.value
}

func (v *NullableSqlValueType) Set(val *SqlValueType) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlValueType) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlValueType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlValueType(val *SqlValueType) *NullableSqlValueType {
	return &NullableSqlValueType{value: val, isSet: true}
}

func (v NullableSqlValueType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSqlValueType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

