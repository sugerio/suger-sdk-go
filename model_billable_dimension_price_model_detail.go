/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
)

// checks if the BillableDimensionPriceModelDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BillableDimensionPriceModelDetail{}

// BillableDimensionPriceModelDetail struct for BillableDimensionPriceModelDetail
type BillableDimensionPriceModelDetail struct {
	// Amount is the amount that is calculated based on the FeeExpression
	Amount *float32 `json:"amount,omitempty"`
	// BillableMetricKey is the key of the billable metric
	BillableMetricKey *MeteringUsageRecordGroupByKey `json:"billableMetricKey,omitempty"`
	// Category of this billable dimension.
	Category *PriceModelCategory `json:"category,omitempty"`
	// Details is the details of the pricing model that is used to show what the amount is for.
	Details []BillableDimensionFeeDetail `json:"details,omitempty"`
	// The discount of this billable dimension if applicable.
	Discount *BillingDiscount `json:"discount,omitempty"`
	// DiscountExpression is the expression used to calculate the discount that is used to show how the discount is calculated.
	DiscountExpression *string `json:"discountExpression,omitempty"`
	// Flag to indicate if this period is a trial period.
	IsTrial *bool `json:"isTrial,omitempty"`
	// MinimumCommit is the minimum commit amount that is used to show the minimum commit amount. Will be ignored if the value is 0 or less.
	MinimumCommit *float32 `json:"minimumCommit,omitempty"`
	// The minimum commit scope. The default value is \"DIMENSION\" if not set.
	MinimumCommitScope *BillingMinimumCommitScope `json:"minimumCommitScope,omitempty"`
	// Name of this billable dimension.
	Name *string `json:"name,omitempty"`
	// Final quantity of the billable dimension in the invoice period, which calculates the fee in price model. It may be the sum value of count/sum/unique_count or latest/max value according to different aggregation type.
	Quantity *float32 `json:"quantity,omitempty"`
}

// NewBillableDimensionPriceModelDetail instantiates a new BillableDimensionPriceModelDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBillableDimensionPriceModelDetail() *BillableDimensionPriceModelDetail {
	this := BillableDimensionPriceModelDetail{}
	return &this
}

// NewBillableDimensionPriceModelDetailWithDefaults instantiates a new BillableDimensionPriceModelDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillableDimensionPriceModelDetailWithDefaults() *BillableDimensionPriceModelDetail {
	this := BillableDimensionPriceModelDetail{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *BillableDimensionPriceModelDetail) GetAmount() float32 {
	if o == nil || IsNil(o.Amount) {
		var ret float32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillableDimensionPriceModelDetail) GetAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *BillableDimensionPriceModelDetail) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float32 and assigns it to the Amount field.
func (o *BillableDimensionPriceModelDetail) SetAmount(v float32) {
	o.Amount = &v
}

// GetBillableMetricKey returns the BillableMetricKey field value if set, zero value otherwise.
func (o *BillableDimensionPriceModelDetail) GetBillableMetricKey() MeteringUsageRecordGroupByKey {
	if o == nil || IsNil(o.BillableMetricKey) {
		var ret MeteringUsageRecordGroupByKey
		return ret
	}
	return *o.BillableMetricKey
}

// GetBillableMetricKeyOk returns a tuple with the BillableMetricKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillableDimensionPriceModelDetail) GetBillableMetricKeyOk() (*MeteringUsageRecordGroupByKey, bool) {
	if o == nil || IsNil(o.BillableMetricKey) {
		return nil, false
	}
	return o.BillableMetricKey, true
}

// HasBillableMetricKey returns a boolean if a field has been set.
func (o *BillableDimensionPriceModelDetail) HasBillableMetricKey() bool {
	if o != nil && !IsNil(o.BillableMetricKey) {
		return true
	}

	return false
}

// SetBillableMetricKey gets a reference to the given MeteringUsageRecordGroupByKey and assigns it to the BillableMetricKey field.
func (o *BillableDimensionPriceModelDetail) SetBillableMetricKey(v MeteringUsageRecordGroupByKey) {
	o.BillableMetricKey = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *BillableDimensionPriceModelDetail) GetCategory() PriceModelCategory {
	if o == nil || IsNil(o.Category) {
		var ret PriceModelCategory
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillableDimensionPriceModelDetail) GetCategoryOk() (*PriceModelCategory, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *BillableDimensionPriceModelDetail) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given PriceModelCategory and assigns it to the Category field.
func (o *BillableDimensionPriceModelDetail) SetCategory(v PriceModelCategory) {
	o.Category = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *BillableDimensionPriceModelDetail) GetDetails() []BillableDimensionFeeDetail {
	if o == nil || IsNil(o.Details) {
		var ret []BillableDimensionFeeDetail
		return ret
	}
	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillableDimensionPriceModelDetail) GetDetailsOk() ([]BillableDimensionFeeDetail, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *BillableDimensionPriceModelDetail) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given []BillableDimensionFeeDetail and assigns it to the Details field.
func (o *BillableDimensionPriceModelDetail) SetDetails(v []BillableDimensionFeeDetail) {
	o.Details = v
}

// GetDiscount returns the Discount field value if set, zero value otherwise.
func (o *BillableDimensionPriceModelDetail) GetDiscount() BillingDiscount {
	if o == nil || IsNil(o.Discount) {
		var ret BillingDiscount
		return ret
	}
	return *o.Discount
}

// GetDiscountOk returns a tuple with the Discount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillableDimensionPriceModelDetail) GetDiscountOk() (*BillingDiscount, bool) {
	if o == nil || IsNil(o.Discount) {
		return nil, false
	}
	return o.Discount, true
}

// HasDiscount returns a boolean if a field has been set.
func (o *BillableDimensionPriceModelDetail) HasDiscount() bool {
	if o != nil && !IsNil(o.Discount) {
		return true
	}

	return false
}

// SetDiscount gets a reference to the given BillingDiscount and assigns it to the Discount field.
func (o *BillableDimensionPriceModelDetail) SetDiscount(v BillingDiscount) {
	o.Discount = &v
}

// GetDiscountExpression returns the DiscountExpression field value if set, zero value otherwise.
func (o *BillableDimensionPriceModelDetail) GetDiscountExpression() string {
	if o == nil || IsNil(o.DiscountExpression) {
		var ret string
		return ret
	}
	return *o.DiscountExpression
}

// GetDiscountExpressionOk returns a tuple with the DiscountExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillableDimensionPriceModelDetail) GetDiscountExpressionOk() (*string, bool) {
	if o == nil || IsNil(o.DiscountExpression) {
		return nil, false
	}
	return o.DiscountExpression, true
}

// HasDiscountExpression returns a boolean if a field has been set.
func (o *BillableDimensionPriceModelDetail) HasDiscountExpression() bool {
	if o != nil && !IsNil(o.DiscountExpression) {
		return true
	}

	return false
}

// SetDiscountExpression gets a reference to the given string and assigns it to the DiscountExpression field.
func (o *BillableDimensionPriceModelDetail) SetDiscountExpression(v string) {
	o.DiscountExpression = &v
}

// GetIsTrial returns the IsTrial field value if set, zero value otherwise.
func (o *BillableDimensionPriceModelDetail) GetIsTrial() bool {
	if o == nil || IsNil(o.IsTrial) {
		var ret bool
		return ret
	}
	return *o.IsTrial
}

// GetIsTrialOk returns a tuple with the IsTrial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillableDimensionPriceModelDetail) GetIsTrialOk() (*bool, bool) {
	if o == nil || IsNil(o.IsTrial) {
		return nil, false
	}
	return o.IsTrial, true
}

// HasIsTrial returns a boolean if a field has been set.
func (o *BillableDimensionPriceModelDetail) HasIsTrial() bool {
	if o != nil && !IsNil(o.IsTrial) {
		return true
	}

	return false
}

// SetIsTrial gets a reference to the given bool and assigns it to the IsTrial field.
func (o *BillableDimensionPriceModelDetail) SetIsTrial(v bool) {
	o.IsTrial = &v
}

// GetMinimumCommit returns the MinimumCommit field value if set, zero value otherwise.
func (o *BillableDimensionPriceModelDetail) GetMinimumCommit() float32 {
	if o == nil || IsNil(o.MinimumCommit) {
		var ret float32
		return ret
	}
	return *o.MinimumCommit
}

// GetMinimumCommitOk returns a tuple with the MinimumCommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillableDimensionPriceModelDetail) GetMinimumCommitOk() (*float32, bool) {
	if o == nil || IsNil(o.MinimumCommit) {
		return nil, false
	}
	return o.MinimumCommit, true
}

// HasMinimumCommit returns a boolean if a field has been set.
func (o *BillableDimensionPriceModelDetail) HasMinimumCommit() bool {
	if o != nil && !IsNil(o.MinimumCommit) {
		return true
	}

	return false
}

// SetMinimumCommit gets a reference to the given float32 and assigns it to the MinimumCommit field.
func (o *BillableDimensionPriceModelDetail) SetMinimumCommit(v float32) {
	o.MinimumCommit = &v
}

// GetMinimumCommitScope returns the MinimumCommitScope field value if set, zero value otherwise.
func (o *BillableDimensionPriceModelDetail) GetMinimumCommitScope() BillingMinimumCommitScope {
	if o == nil || IsNil(o.MinimumCommitScope) {
		var ret BillingMinimumCommitScope
		return ret
	}
	return *o.MinimumCommitScope
}

// GetMinimumCommitScopeOk returns a tuple with the MinimumCommitScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillableDimensionPriceModelDetail) GetMinimumCommitScopeOk() (*BillingMinimumCommitScope, bool) {
	if o == nil || IsNil(o.MinimumCommitScope) {
		return nil, false
	}
	return o.MinimumCommitScope, true
}

// HasMinimumCommitScope returns a boolean if a field has been set.
func (o *BillableDimensionPriceModelDetail) HasMinimumCommitScope() bool {
	if o != nil && !IsNil(o.MinimumCommitScope) {
		return true
	}

	return false
}

// SetMinimumCommitScope gets a reference to the given BillingMinimumCommitScope and assigns it to the MinimumCommitScope field.
func (o *BillableDimensionPriceModelDetail) SetMinimumCommitScope(v BillingMinimumCommitScope) {
	o.MinimumCommitScope = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BillableDimensionPriceModelDetail) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillableDimensionPriceModelDetail) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BillableDimensionPriceModelDetail) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *BillableDimensionPriceModelDetail) SetName(v string) {
	o.Name = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *BillableDimensionPriceModelDetail) GetQuantity() float32 {
	if o == nil || IsNil(o.Quantity) {
		var ret float32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillableDimensionPriceModelDetail) GetQuantityOk() (*float32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *BillableDimensionPriceModelDetail) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given float32 and assigns it to the Quantity field.
func (o *BillableDimensionPriceModelDetail) SetQuantity(v float32) {
	o.Quantity = &v
}

func (o BillableDimensionPriceModelDetail) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BillableDimensionPriceModelDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.BillableMetricKey) {
		toSerialize["billableMetricKey"] = o.BillableMetricKey
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	if !IsNil(o.Discount) {
		toSerialize["discount"] = o.Discount
	}
	if !IsNil(o.DiscountExpression) {
		toSerialize["discountExpression"] = o.DiscountExpression
	}
	if !IsNil(o.IsTrial) {
		toSerialize["isTrial"] = o.IsTrial
	}
	if !IsNil(o.MinimumCommit) {
		toSerialize["minimumCommit"] = o.MinimumCommit
	}
	if !IsNil(o.MinimumCommitScope) {
		toSerialize["minimumCommitScope"] = o.MinimumCommitScope
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	return toSerialize, nil
}

type NullableBillableDimensionPriceModelDetail struct {
	value *BillableDimensionPriceModelDetail
	isSet bool
}

func (v NullableBillableDimensionPriceModelDetail) Get() *BillableDimensionPriceModelDetail {
	return v.value
}

func (v *NullableBillableDimensionPriceModelDetail) Set(val *BillableDimensionPriceModelDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableBillableDimensionPriceModelDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableBillableDimensionPriceModelDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillableDimensionPriceModelDetail(val *BillableDimensionPriceModelDetail) *NullableBillableDimensionPriceModelDetail {
	return &NullableBillableDimensionPriceModelDetail{value: val, isSet: true}
}

func (v NullableBillableDimensionPriceModelDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillableDimensionPriceModelDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
