/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CosellSyncRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CosellSyncRecord{}

// CosellSyncRecord struct for CosellSyncRecord
type CosellSyncRecord struct {
	Message *string `json:"message,omitempty"`
	Ok *bool `json:"ok,omitempty"`
}

// NewCosellSyncRecord instantiates a new CosellSyncRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCosellSyncRecord() *CosellSyncRecord {
	this := CosellSyncRecord{}
	return &this
}

// NewCosellSyncRecordWithDefaults instantiates a new CosellSyncRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCosellSyncRecordWithDefaults() *CosellSyncRecord {
	this := CosellSyncRecord{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *CosellSyncRecord) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CosellSyncRecord) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *CosellSyncRecord) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *CosellSyncRecord) SetMessage(v string) {
	o.Message = &v
}

// GetOk returns the Ok field value if set, zero value otherwise.
func (o *CosellSyncRecord) GetOk() bool {
	if o == nil || IsNil(o.Ok) {
		var ret bool
		return ret
	}
	return *o.Ok
}

// GetOkOk returns a tuple with the Ok field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CosellSyncRecord) GetOkOk() (*bool, bool) {
	if o == nil || IsNil(o.Ok) {
		return nil, false
	}
	return o.Ok, true
}

// HasOk returns a boolean if a field has been set.
func (o *CosellSyncRecord) HasOk() bool {
	if o != nil && !IsNil(o.Ok) {
		return true
	}

	return false
}

// SetOk gets a reference to the given bool and assigns it to the Ok field.
func (o *CosellSyncRecord) SetOk(v bool) {
	o.Ok = &v
}

func (o CosellSyncRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CosellSyncRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Ok) {
		toSerialize["ok"] = o.Ok
	}
	return toSerialize, nil
}

type NullableCosellSyncRecord struct {
	value *CosellSyncRecord
	isSet bool
}

func (v NullableCosellSyncRecord) Get() *CosellSyncRecord {
	return v.value
}

func (v *NullableCosellSyncRecord) Set(val *CosellSyncRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableCosellSyncRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableCosellSyncRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCosellSyncRecord(val *CosellSyncRecord) *NullableCosellSyncRecord {
	return &NullableCosellSyncRecord{value: val, isSet: true}
}

func (v NullableCosellSyncRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCosellSyncRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


