/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
)

// checks if the AzureProductPackageConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureProductPackageConfiguration{}

// AzureProductPackageConfiguration struct for AzureProductPackageConfiguration
type AzureProductPackageConfiguration struct {
	AzureActiveDirectoryApplicationID *string `json:"azureActiveDirectoryApplicationID,omitempty"`
	AzureActiveDirectoryTenantID      *string `json:"azureActiveDirectoryTenantID,omitempty"`
	ConnectionWebhook                 *string `json:"connectionWebhook,omitempty"`
	Id                                *string `json:"id,omitempty"`
	LandingPageUri                    *string `json:"landingPageUri,omitempty"`
	ResourceType                      *string `json:"resourceType,omitempty"`
}

// NewAzureProductPackageConfiguration instantiates a new AzureProductPackageConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureProductPackageConfiguration() *AzureProductPackageConfiguration {
	this := AzureProductPackageConfiguration{}
	return &this
}

// NewAzureProductPackageConfigurationWithDefaults instantiates a new AzureProductPackageConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureProductPackageConfigurationWithDefaults() *AzureProductPackageConfiguration {
	this := AzureProductPackageConfiguration{}
	return &this
}

// GetAzureActiveDirectoryApplicationID returns the AzureActiveDirectoryApplicationID field value if set, zero value otherwise.
func (o *AzureProductPackageConfiguration) GetAzureActiveDirectoryApplicationID() string {
	if o == nil || IsNil(o.AzureActiveDirectoryApplicationID) {
		var ret string
		return ret
	}
	return *o.AzureActiveDirectoryApplicationID
}

// GetAzureActiveDirectoryApplicationIDOk returns a tuple with the AzureActiveDirectoryApplicationID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureProductPackageConfiguration) GetAzureActiveDirectoryApplicationIDOk() (*string, bool) {
	if o == nil || IsNil(o.AzureActiveDirectoryApplicationID) {
		return nil, false
	}
	return o.AzureActiveDirectoryApplicationID, true
}

// HasAzureActiveDirectoryApplicationID returns a boolean if a field has been set.
func (o *AzureProductPackageConfiguration) HasAzureActiveDirectoryApplicationID() bool {
	if o != nil && !IsNil(o.AzureActiveDirectoryApplicationID) {
		return true
	}

	return false
}

// SetAzureActiveDirectoryApplicationID gets a reference to the given string and assigns it to the AzureActiveDirectoryApplicationID field.
func (o *AzureProductPackageConfiguration) SetAzureActiveDirectoryApplicationID(v string) {
	o.AzureActiveDirectoryApplicationID = &v
}

// GetAzureActiveDirectoryTenantID returns the AzureActiveDirectoryTenantID field value if set, zero value otherwise.
func (o *AzureProductPackageConfiguration) GetAzureActiveDirectoryTenantID() string {
	if o == nil || IsNil(o.AzureActiveDirectoryTenantID) {
		var ret string
		return ret
	}
	return *o.AzureActiveDirectoryTenantID
}

// GetAzureActiveDirectoryTenantIDOk returns a tuple with the AzureActiveDirectoryTenantID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureProductPackageConfiguration) GetAzureActiveDirectoryTenantIDOk() (*string, bool) {
	if o == nil || IsNil(o.AzureActiveDirectoryTenantID) {
		return nil, false
	}
	return o.AzureActiveDirectoryTenantID, true
}

// HasAzureActiveDirectoryTenantID returns a boolean if a field has been set.
func (o *AzureProductPackageConfiguration) HasAzureActiveDirectoryTenantID() bool {
	if o != nil && !IsNil(o.AzureActiveDirectoryTenantID) {
		return true
	}

	return false
}

// SetAzureActiveDirectoryTenantID gets a reference to the given string and assigns it to the AzureActiveDirectoryTenantID field.
func (o *AzureProductPackageConfiguration) SetAzureActiveDirectoryTenantID(v string) {
	o.AzureActiveDirectoryTenantID = &v
}

// GetConnectionWebhook returns the ConnectionWebhook field value if set, zero value otherwise.
func (o *AzureProductPackageConfiguration) GetConnectionWebhook() string {
	if o == nil || IsNil(o.ConnectionWebhook) {
		var ret string
		return ret
	}
	return *o.ConnectionWebhook
}

// GetConnectionWebhookOk returns a tuple with the ConnectionWebhook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureProductPackageConfiguration) GetConnectionWebhookOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionWebhook) {
		return nil, false
	}
	return o.ConnectionWebhook, true
}

// HasConnectionWebhook returns a boolean if a field has been set.
func (o *AzureProductPackageConfiguration) HasConnectionWebhook() bool {
	if o != nil && !IsNil(o.ConnectionWebhook) {
		return true
	}

	return false
}

// SetConnectionWebhook gets a reference to the given string and assigns it to the ConnectionWebhook field.
func (o *AzureProductPackageConfiguration) SetConnectionWebhook(v string) {
	o.ConnectionWebhook = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AzureProductPackageConfiguration) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureProductPackageConfiguration) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AzureProductPackageConfiguration) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AzureProductPackageConfiguration) SetId(v string) {
	o.Id = &v
}

// GetLandingPageUri returns the LandingPageUri field value if set, zero value otherwise.
func (o *AzureProductPackageConfiguration) GetLandingPageUri() string {
	if o == nil || IsNil(o.LandingPageUri) {
		var ret string
		return ret
	}
	return *o.LandingPageUri
}

// GetLandingPageUriOk returns a tuple with the LandingPageUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureProductPackageConfiguration) GetLandingPageUriOk() (*string, bool) {
	if o == nil || IsNil(o.LandingPageUri) {
		return nil, false
	}
	return o.LandingPageUri, true
}

// HasLandingPageUri returns a boolean if a field has been set.
func (o *AzureProductPackageConfiguration) HasLandingPageUri() bool {
	if o != nil && !IsNil(o.LandingPageUri) {
		return true
	}

	return false
}

// SetLandingPageUri gets a reference to the given string and assigns it to the LandingPageUri field.
func (o *AzureProductPackageConfiguration) SetLandingPageUri(v string) {
	o.LandingPageUri = &v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *AzureProductPackageConfiguration) GetResourceType() string {
	if o == nil || IsNil(o.ResourceType) {
		var ret string
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureProductPackageConfiguration) GetResourceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceType) {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *AzureProductPackageConfiguration) HasResourceType() bool {
	if o != nil && !IsNil(o.ResourceType) {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *AzureProductPackageConfiguration) SetResourceType(v string) {
	o.ResourceType = &v
}

func (o AzureProductPackageConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureProductPackageConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AzureActiveDirectoryApplicationID) {
		toSerialize["azureActiveDirectoryApplicationID"] = o.AzureActiveDirectoryApplicationID
	}
	if !IsNil(o.AzureActiveDirectoryTenantID) {
		toSerialize["azureActiveDirectoryTenantID"] = o.AzureActiveDirectoryTenantID
	}
	if !IsNil(o.ConnectionWebhook) {
		toSerialize["connectionWebhook"] = o.ConnectionWebhook
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LandingPageUri) {
		toSerialize["landingPageUri"] = o.LandingPageUri
	}
	if !IsNil(o.ResourceType) {
		toSerialize["resourceType"] = o.ResourceType
	}
	return toSerialize, nil
}

type NullableAzureProductPackageConfiguration struct {
	value *AzureProductPackageConfiguration
	isSet bool
}

func (v NullableAzureProductPackageConfiguration) Get() *AzureProductPackageConfiguration {
	return v.value
}

func (v *NullableAzureProductPackageConfiguration) Set(val *AzureProductPackageConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureProductPackageConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureProductPackageConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureProductPackageConfiguration(val *AzureProductPackageConfiguration) *NullableAzureProductPackageConfiguration {
	return &NullableAzureProductPackageConfiguration{value: val, isSet: true}
}

func (v NullableAzureProductPackageConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureProductPackageConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
