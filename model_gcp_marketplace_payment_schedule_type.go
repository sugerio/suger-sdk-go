/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
	"fmt"
)

// GcpMarketplacePaymentScheduleType the model 'GcpMarketplacePaymentScheduleType'
type GcpMarketplacePaymentScheduleType string

// List of GcpMarketplacePaymentScheduleType
const (
	GcpMarketplacePaymentScheduleType_UNKNOWN GcpMarketplacePaymentScheduleType = ""
	GcpMarketplacePaymentScheduleType_PREPAY  GcpMarketplacePaymentScheduleType = "PREPAY"
	GcpMarketplacePaymentScheduleType_POSTPAY GcpMarketplacePaymentScheduleType = "POSTPAY"
)

// All allowed values of GcpMarketplacePaymentScheduleType enum
var AllowedGcpMarketplacePaymentScheduleTypeEnumValues = []GcpMarketplacePaymentScheduleType{
	"",
	"PREPAY",
	"POSTPAY",
}

func (v *GcpMarketplacePaymentScheduleType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GcpMarketplacePaymentScheduleType(value)
	for _, existing := range AllowedGcpMarketplacePaymentScheduleTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GcpMarketplacePaymentScheduleType", value)
}

// NewGcpMarketplacePaymentScheduleTypeFromValue returns a pointer to a valid GcpMarketplacePaymentScheduleType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGcpMarketplacePaymentScheduleTypeFromValue(v string) (*GcpMarketplacePaymentScheduleType, error) {
	ev := GcpMarketplacePaymentScheduleType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GcpMarketplacePaymentScheduleType: valid values are %v", v, AllowedGcpMarketplacePaymentScheduleTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GcpMarketplacePaymentScheduleType) IsValid() bool {
	for _, existing := range AllowedGcpMarketplacePaymentScheduleTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GcpMarketplacePaymentScheduleType value
func (v GcpMarketplacePaymentScheduleType) Ptr() *GcpMarketplacePaymentScheduleType {
	return &v
}

type NullableGcpMarketplacePaymentScheduleType struct {
	value *GcpMarketplacePaymentScheduleType
	isSet bool
}

func (v NullableGcpMarketplacePaymentScheduleType) Get() *GcpMarketplacePaymentScheduleType {
	return v.value
}

func (v *NullableGcpMarketplacePaymentScheduleType) Set(val *GcpMarketplacePaymentScheduleType) {
	v.value = val
	v.isSet = true
}

func (v NullableGcpMarketplacePaymentScheduleType) IsSet() bool {
	return v.isSet
}

func (v *NullableGcpMarketplacePaymentScheduleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGcpMarketplacePaymentScheduleType(val *GcpMarketplacePaymentScheduleType) *NullableGcpMarketplacePaymentScheduleType {
	return &NullableGcpMarketplacePaymentScheduleType{value: val, isSet: true}
}

func (v NullableGcpMarketplacePaymentScheduleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGcpMarketplacePaymentScheduleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
