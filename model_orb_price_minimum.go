/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OrbPriceMinimum type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrbPriceMinimum{}

// OrbPriceMinimum struct for OrbPriceMinimum
type OrbPriceMinimum struct {
	// List of price_ids that this minimum amount applies to. For plan/plan phase minimums, this can be a subset of prices.
	AppliesToPriceIds []string `json:"applies_to_price_ids,omitempty"`
	MinimumAmount *string `json:"minimum_amount,omitempty"`
}

// NewOrbPriceMinimum instantiates a new OrbPriceMinimum object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrbPriceMinimum() *OrbPriceMinimum {
	this := OrbPriceMinimum{}
	return &this
}

// NewOrbPriceMinimumWithDefaults instantiates a new OrbPriceMinimum object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrbPriceMinimumWithDefaults() *OrbPriceMinimum {
	this := OrbPriceMinimum{}
	return &this
}

// GetAppliesToPriceIds returns the AppliesToPriceIds field value if set, zero value otherwise.
func (o *OrbPriceMinimum) GetAppliesToPriceIds() []string {
	if o == nil || IsNil(o.AppliesToPriceIds) {
		var ret []string
		return ret
	}
	return o.AppliesToPriceIds
}

// GetAppliesToPriceIdsOk returns a tuple with the AppliesToPriceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPriceMinimum) GetAppliesToPriceIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.AppliesToPriceIds) {
		return nil, false
	}
	return o.AppliesToPriceIds, true
}

// HasAppliesToPriceIds returns a boolean if a field has been set.
func (o *OrbPriceMinimum) HasAppliesToPriceIds() bool {
	if o != nil && !IsNil(o.AppliesToPriceIds) {
		return true
	}

	return false
}

// SetAppliesToPriceIds gets a reference to the given []string and assigns it to the AppliesToPriceIds field.
func (o *OrbPriceMinimum) SetAppliesToPriceIds(v []string) {
	o.AppliesToPriceIds = v
}

// GetMinimumAmount returns the MinimumAmount field value if set, zero value otherwise.
func (o *OrbPriceMinimum) GetMinimumAmount() string {
	if o == nil || IsNil(o.MinimumAmount) {
		var ret string
		return ret
	}
	return *o.MinimumAmount
}

// GetMinimumAmountOk returns a tuple with the MinimumAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPriceMinimum) GetMinimumAmountOk() (*string, bool) {
	if o == nil || IsNil(o.MinimumAmount) {
		return nil, false
	}
	return o.MinimumAmount, true
}

// HasMinimumAmount returns a boolean if a field has been set.
func (o *OrbPriceMinimum) HasMinimumAmount() bool {
	if o != nil && !IsNil(o.MinimumAmount) {
		return true
	}

	return false
}

// SetMinimumAmount gets a reference to the given string and assigns it to the MinimumAmount field.
func (o *OrbPriceMinimum) SetMinimumAmount(v string) {
	o.MinimumAmount = &v
}

func (o OrbPriceMinimum) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrbPriceMinimum) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AppliesToPriceIds) {
		toSerialize["applies_to_price_ids"] = o.AppliesToPriceIds
	}
	if !IsNil(o.MinimumAmount) {
		toSerialize["minimum_amount"] = o.MinimumAmount
	}
	return toSerialize, nil
}

type NullableOrbPriceMinimum struct {
	value *OrbPriceMinimum
	isSet bool
}

func (v NullableOrbPriceMinimum) Get() *OrbPriceMinimum {
	return v.value
}

func (v *NullableOrbPriceMinimum) Set(val *OrbPriceMinimum) {
	v.value = val
	v.isSet = true
}

func (v NullableOrbPriceMinimum) IsSet() bool {
	return v.isSet
}

func (v *NullableOrbPriceMinimum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrbPriceMinimum(val *OrbPriceMinimum) *NullableOrbPriceMinimum {
	return &NullableOrbPriceMinimum{value: val, isSet: true}
}

func (v NullableOrbPriceMinimum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrbPriceMinimum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


