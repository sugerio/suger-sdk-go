/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
	"fmt"
)

// AwsSnsSubscriptionStatus the model 'AwsSnsSubscriptionStatus'
type AwsSnsSubscriptionStatus string

// List of AwsSnsSubscriptionStatus
const (
	AwsSnsSubscriptionStatus_UNKNOWN              AwsSnsSubscriptionStatus = "UNKNOWN"
	AwsSnsSubscriptionStatus_CONFIRMED            AwsSnsSubscriptionStatus = "CONFIRMED"
	AwsSnsSubscriptionStatus_PENDING_CONFIRMATION AwsSnsSubscriptionStatus = "PENDING_CONFIRMATION"
)

// All allowed values of AwsSnsSubscriptionStatus enum
var AllowedAwsSnsSubscriptionStatusEnumValues = []AwsSnsSubscriptionStatus{
	"UNKNOWN",
	"CONFIRMED",
	"PENDING_CONFIRMATION",
}

func (v *AwsSnsSubscriptionStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AwsSnsSubscriptionStatus(value)
	for _, existing := range AllowedAwsSnsSubscriptionStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AwsSnsSubscriptionStatus", value)
}

// NewAwsSnsSubscriptionStatusFromValue returns a pointer to a valid AwsSnsSubscriptionStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAwsSnsSubscriptionStatusFromValue(v string) (*AwsSnsSubscriptionStatus, error) {
	ev := AwsSnsSubscriptionStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AwsSnsSubscriptionStatus: valid values are %v", v, AllowedAwsSnsSubscriptionStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AwsSnsSubscriptionStatus) IsValid() bool {
	for _, existing := range AllowedAwsSnsSubscriptionStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AwsSnsSubscriptionStatus value
func (v AwsSnsSubscriptionStatus) Ptr() *AwsSnsSubscriptionStatus {
	return &v
}

type NullableAwsSnsSubscriptionStatus struct {
	value *AwsSnsSubscriptionStatus
	isSet bool
}

func (v NullableAwsSnsSubscriptionStatus) Get() *AwsSnsSubscriptionStatus {
	return v.value
}

func (v *NullableAwsSnsSubscriptionStatus) Set(val *AwsSnsSubscriptionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsSnsSubscriptionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsSnsSubscriptionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsSnsSubscriptionStatus(val *AwsSnsSubscriptionStatus) *NullableAwsSnsSubscriptionStatus {
	return &NullableAwsSnsSubscriptionStatus{value: val, isSet: true}
}

func (v NullableAwsSnsSubscriptionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsSnsSubscriptionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
