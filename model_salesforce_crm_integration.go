/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
)

// checks if the SalesforceCrmIntegration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SalesforceCrmIntegration{}

// SalesforceCrmIntegration struct for SalesforceCrmIntegration
type SalesforceCrmIntegration struct {
	Credential  *SalesforceCrmCredential `json:"credential,omitempty"`
	Filters     []SalesforceSyncFilter   `json:"filters,omitempty"`
	InstanceUrl *string                  `json:"instanceUrl,omitempty"`
	IsSandbox   *bool                    `json:"isSandbox,omitempty"`
	Paused      *bool                    `json:"paused,omitempty"`
	SecretKey   *string                  `json:"secretKey,omitempty"`
	// User defined when setting up the integration
	Subdomain         *string `json:"subdomain,omitempty"`
	SugerAppInstalled *bool   `json:"sugerAppInstalled,omitempty"`
}

// NewSalesforceCrmIntegration instantiates a new SalesforceCrmIntegration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSalesforceCrmIntegration() *SalesforceCrmIntegration {
	this := SalesforceCrmIntegration{}
	return &this
}

// NewSalesforceCrmIntegrationWithDefaults instantiates a new SalesforceCrmIntegration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSalesforceCrmIntegrationWithDefaults() *SalesforceCrmIntegration {
	this := SalesforceCrmIntegration{}
	return &this
}

// GetCredential returns the Credential field value if set, zero value otherwise.
func (o *SalesforceCrmIntegration) GetCredential() SalesforceCrmCredential {
	if o == nil || IsNil(o.Credential) {
		var ret SalesforceCrmCredential
		return ret
	}
	return *o.Credential
}

// GetCredentialOk returns a tuple with the Credential field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesforceCrmIntegration) GetCredentialOk() (*SalesforceCrmCredential, bool) {
	if o == nil || IsNil(o.Credential) {
		return nil, false
	}
	return o.Credential, true
}

// HasCredential returns a boolean if a field has been set.
func (o *SalesforceCrmIntegration) HasCredential() bool {
	if o != nil && !IsNil(o.Credential) {
		return true
	}

	return false
}

// SetCredential gets a reference to the given SalesforceCrmCredential and assigns it to the Credential field.
func (o *SalesforceCrmIntegration) SetCredential(v SalesforceCrmCredential) {
	o.Credential = &v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *SalesforceCrmIntegration) GetFilters() []SalesforceSyncFilter {
	if o == nil || IsNil(o.Filters) {
		var ret []SalesforceSyncFilter
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesforceCrmIntegration) GetFiltersOk() ([]SalesforceSyncFilter, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *SalesforceCrmIntegration) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []SalesforceSyncFilter and assigns it to the Filters field.
func (o *SalesforceCrmIntegration) SetFilters(v []SalesforceSyncFilter) {
	o.Filters = v
}

// GetInstanceUrl returns the InstanceUrl field value if set, zero value otherwise.
func (o *SalesforceCrmIntegration) GetInstanceUrl() string {
	if o == nil || IsNil(o.InstanceUrl) {
		var ret string
		return ret
	}
	return *o.InstanceUrl
}

// GetInstanceUrlOk returns a tuple with the InstanceUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesforceCrmIntegration) GetInstanceUrlOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceUrl) {
		return nil, false
	}
	return o.InstanceUrl, true
}

// HasInstanceUrl returns a boolean if a field has been set.
func (o *SalesforceCrmIntegration) HasInstanceUrl() bool {
	if o != nil && !IsNil(o.InstanceUrl) {
		return true
	}

	return false
}

// SetInstanceUrl gets a reference to the given string and assigns it to the InstanceUrl field.
func (o *SalesforceCrmIntegration) SetInstanceUrl(v string) {
	o.InstanceUrl = &v
}

// GetIsSandbox returns the IsSandbox field value if set, zero value otherwise.
func (o *SalesforceCrmIntegration) GetIsSandbox() bool {
	if o == nil || IsNil(o.IsSandbox) {
		var ret bool
		return ret
	}
	return *o.IsSandbox
}

// GetIsSandboxOk returns a tuple with the IsSandbox field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesforceCrmIntegration) GetIsSandboxOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSandbox) {
		return nil, false
	}
	return o.IsSandbox, true
}

// HasIsSandbox returns a boolean if a field has been set.
func (o *SalesforceCrmIntegration) HasIsSandbox() bool {
	if o != nil && !IsNil(o.IsSandbox) {
		return true
	}

	return false
}

// SetIsSandbox gets a reference to the given bool and assigns it to the IsSandbox field.
func (o *SalesforceCrmIntegration) SetIsSandbox(v bool) {
	o.IsSandbox = &v
}

// GetPaused returns the Paused field value if set, zero value otherwise.
func (o *SalesforceCrmIntegration) GetPaused() bool {
	if o == nil || IsNil(o.Paused) {
		var ret bool
		return ret
	}
	return *o.Paused
}

// GetPausedOk returns a tuple with the Paused field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesforceCrmIntegration) GetPausedOk() (*bool, bool) {
	if o == nil || IsNil(o.Paused) {
		return nil, false
	}
	return o.Paused, true
}

// HasPaused returns a boolean if a field has been set.
func (o *SalesforceCrmIntegration) HasPaused() bool {
	if o != nil && !IsNil(o.Paused) {
		return true
	}

	return false
}

// SetPaused gets a reference to the given bool and assigns it to the Paused field.
func (o *SalesforceCrmIntegration) SetPaused(v bool) {
	o.Paused = &v
}

// GetSecretKey returns the SecretKey field value if set, zero value otherwise.
func (o *SalesforceCrmIntegration) GetSecretKey() string {
	if o == nil || IsNil(o.SecretKey) {
		var ret string
		return ret
	}
	return *o.SecretKey
}

// GetSecretKeyOk returns a tuple with the SecretKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesforceCrmIntegration) GetSecretKeyOk() (*string, bool) {
	if o == nil || IsNil(o.SecretKey) {
		return nil, false
	}
	return o.SecretKey, true
}

// HasSecretKey returns a boolean if a field has been set.
func (o *SalesforceCrmIntegration) HasSecretKey() bool {
	if o != nil && !IsNil(o.SecretKey) {
		return true
	}

	return false
}

// SetSecretKey gets a reference to the given string and assigns it to the SecretKey field.
func (o *SalesforceCrmIntegration) SetSecretKey(v string) {
	o.SecretKey = &v
}

// GetSubdomain returns the Subdomain field value if set, zero value otherwise.
func (o *SalesforceCrmIntegration) GetSubdomain() string {
	if o == nil || IsNil(o.Subdomain) {
		var ret string
		return ret
	}
	return *o.Subdomain
}

// GetSubdomainOk returns a tuple with the Subdomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesforceCrmIntegration) GetSubdomainOk() (*string, bool) {
	if o == nil || IsNil(o.Subdomain) {
		return nil, false
	}
	return o.Subdomain, true
}

// HasSubdomain returns a boolean if a field has been set.
func (o *SalesforceCrmIntegration) HasSubdomain() bool {
	if o != nil && !IsNil(o.Subdomain) {
		return true
	}

	return false
}

// SetSubdomain gets a reference to the given string and assigns it to the Subdomain field.
func (o *SalesforceCrmIntegration) SetSubdomain(v string) {
	o.Subdomain = &v
}

// GetSugerAppInstalled returns the SugerAppInstalled field value if set, zero value otherwise.
func (o *SalesforceCrmIntegration) GetSugerAppInstalled() bool {
	if o == nil || IsNil(o.SugerAppInstalled) {
		var ret bool
		return ret
	}
	return *o.SugerAppInstalled
}

// GetSugerAppInstalledOk returns a tuple with the SugerAppInstalled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesforceCrmIntegration) GetSugerAppInstalledOk() (*bool, bool) {
	if o == nil || IsNil(o.SugerAppInstalled) {
		return nil, false
	}
	return o.SugerAppInstalled, true
}

// HasSugerAppInstalled returns a boolean if a field has been set.
func (o *SalesforceCrmIntegration) HasSugerAppInstalled() bool {
	if o != nil && !IsNil(o.SugerAppInstalled) {
		return true
	}

	return false
}

// SetSugerAppInstalled gets a reference to the given bool and assigns it to the SugerAppInstalled field.
func (o *SalesforceCrmIntegration) SetSugerAppInstalled(v bool) {
	o.SugerAppInstalled = &v
}

func (o SalesforceCrmIntegration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SalesforceCrmIntegration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Credential) {
		toSerialize["credential"] = o.Credential
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.InstanceUrl) {
		toSerialize["instanceUrl"] = o.InstanceUrl
	}
	if !IsNil(o.IsSandbox) {
		toSerialize["isSandbox"] = o.IsSandbox
	}
	if !IsNil(o.Paused) {
		toSerialize["paused"] = o.Paused
	}
	if !IsNil(o.SecretKey) {
		toSerialize["secretKey"] = o.SecretKey
	}
	if !IsNil(o.Subdomain) {
		toSerialize["subdomain"] = o.Subdomain
	}
	if !IsNil(o.SugerAppInstalled) {
		toSerialize["sugerAppInstalled"] = o.SugerAppInstalled
	}
	return toSerialize, nil
}

type NullableSalesforceCrmIntegration struct {
	value *SalesforceCrmIntegration
	isSet bool
}

func (v NullableSalesforceCrmIntegration) Get() *SalesforceCrmIntegration {
	return v.value
}

func (v *NullableSalesforceCrmIntegration) Set(val *SalesforceCrmIntegration) {
	v.value = val
	v.isSet = true
}

func (v NullableSalesforceCrmIntegration) IsSet() bool {
	return v.isSet
}

func (v *NullableSalesforceCrmIntegration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSalesforceCrmIntegration(val *SalesforceCrmIntegration) *NullableSalesforceCrmIntegration {
	return &NullableSalesforceCrmIntegration{value: val, isSet: true}
}

func (v NullableSalesforceCrmIntegration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSalesforceCrmIntegration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
