/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ListSupportTicketsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListSupportTicketsResponse{}

// ListSupportTicketsResponse struct for ListSupportTicketsResponse
type ListSupportTicketsResponse struct {
	Items []SupportTicket `json:"items,omitempty"`
	// Only available when the request is made with offset=0.
	TotalCount *int32 `json:"totalCount,omitempty"`
}

// NewListSupportTicketsResponse instantiates a new ListSupportTicketsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListSupportTicketsResponse() *ListSupportTicketsResponse {
	this := ListSupportTicketsResponse{}
	return &this
}

// NewListSupportTicketsResponseWithDefaults instantiates a new ListSupportTicketsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListSupportTicketsResponseWithDefaults() *ListSupportTicketsResponse {
	this := ListSupportTicketsResponse{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *ListSupportTicketsResponse) GetItems() []SupportTicket {
	if o == nil || IsNil(o.Items) {
		var ret []SupportTicket
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListSupportTicketsResponse) GetItemsOk() ([]SupportTicket, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *ListSupportTicketsResponse) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []SupportTicket and assigns it to the Items field.
func (o *ListSupportTicketsResponse) SetItems(v []SupportTicket) {
	o.Items = v
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *ListSupportTicketsResponse) GetTotalCount() int32 {
	if o == nil || IsNil(o.TotalCount) {
		var ret int32
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListSupportTicketsResponse) GetTotalCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalCount) {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *ListSupportTicketsResponse) HasTotalCount() bool {
	if o != nil && !IsNil(o.TotalCount) {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given int32 and assigns it to the TotalCount field.
func (o *ListSupportTicketsResponse) SetTotalCount(v int32) {
	o.TotalCount = &v
}

func (o ListSupportTicketsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListSupportTicketsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	if !IsNil(o.TotalCount) {
		toSerialize["totalCount"] = o.TotalCount
	}
	return toSerialize, nil
}

type NullableListSupportTicketsResponse struct {
	value *ListSupportTicketsResponse
	isSet bool
}

func (v NullableListSupportTicketsResponse) Get() *ListSupportTicketsResponse {
	return v.value
}

func (v *NullableListSupportTicketsResponse) Set(val *ListSupportTicketsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListSupportTicketsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListSupportTicketsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListSupportTicketsResponse(val *ListSupportTicketsResponse) *NullableListSupportTicketsResponse {
	return &NullableListSupportTicketsResponse{value: val, isSet: true}
}

func (v NullableListSupportTicketsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListSupportTicketsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
