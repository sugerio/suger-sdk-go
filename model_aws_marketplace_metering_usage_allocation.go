/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
)

// checks if the AwsMarketplaceMeteringUsageAllocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsMarketplaceMeteringUsageAllocation{}

// AwsMarketplaceMeteringUsageAllocation struct for AwsMarketplaceMeteringUsageAllocation
type AwsMarketplaceMeteringUsageAllocation struct {
	// The total quantity allocated to this bucket of usage.
	AllocatedUsageQuantity *int32 `json:"AllocatedUsageQuantity,omitempty"`
	// The set of tags that define the bucket of usage. For the bucket of items with no tags, this parameter can be left out.
	Tags []AwsMarketplaceMeteringTag `json:"Tags,omitempty"`
}

// NewAwsMarketplaceMeteringUsageAllocation instantiates a new AwsMarketplaceMeteringUsageAllocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsMarketplaceMeteringUsageAllocation() *AwsMarketplaceMeteringUsageAllocation {
	this := AwsMarketplaceMeteringUsageAllocation{}
	return &this
}

// NewAwsMarketplaceMeteringUsageAllocationWithDefaults instantiates a new AwsMarketplaceMeteringUsageAllocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsMarketplaceMeteringUsageAllocationWithDefaults() *AwsMarketplaceMeteringUsageAllocation {
	this := AwsMarketplaceMeteringUsageAllocation{}
	return &this
}

// GetAllocatedUsageQuantity returns the AllocatedUsageQuantity field value if set, zero value otherwise.
func (o *AwsMarketplaceMeteringUsageAllocation) GetAllocatedUsageQuantity() int32 {
	if o == nil || IsNil(o.AllocatedUsageQuantity) {
		var ret int32
		return ret
	}
	return *o.AllocatedUsageQuantity
}

// GetAllocatedUsageQuantityOk returns a tuple with the AllocatedUsageQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsMarketplaceMeteringUsageAllocation) GetAllocatedUsageQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.AllocatedUsageQuantity) {
		return nil, false
	}
	return o.AllocatedUsageQuantity, true
}

// HasAllocatedUsageQuantity returns a boolean if a field has been set.
func (o *AwsMarketplaceMeteringUsageAllocation) HasAllocatedUsageQuantity() bool {
	if o != nil && !IsNil(o.AllocatedUsageQuantity) {
		return true
	}

	return false
}

// SetAllocatedUsageQuantity gets a reference to the given int32 and assigns it to the AllocatedUsageQuantity field.
func (o *AwsMarketplaceMeteringUsageAllocation) SetAllocatedUsageQuantity(v int32) {
	o.AllocatedUsageQuantity = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *AwsMarketplaceMeteringUsageAllocation) GetTags() []AwsMarketplaceMeteringTag {
	if o == nil || IsNil(o.Tags) {
		var ret []AwsMarketplaceMeteringTag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsMarketplaceMeteringUsageAllocation) GetTagsOk() ([]AwsMarketplaceMeteringTag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *AwsMarketplaceMeteringUsageAllocation) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []AwsMarketplaceMeteringTag and assigns it to the Tags field.
func (o *AwsMarketplaceMeteringUsageAllocation) SetTags(v []AwsMarketplaceMeteringTag) {
	o.Tags = v
}

func (o AwsMarketplaceMeteringUsageAllocation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsMarketplaceMeteringUsageAllocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllocatedUsageQuantity) {
		toSerialize["AllocatedUsageQuantity"] = o.AllocatedUsageQuantity
	}
	if !IsNil(o.Tags) {
		toSerialize["Tags"] = o.Tags
	}
	return toSerialize, nil
}

type NullableAwsMarketplaceMeteringUsageAllocation struct {
	value *AwsMarketplaceMeteringUsageAllocation
	isSet bool
}

func (v NullableAwsMarketplaceMeteringUsageAllocation) Get() *AwsMarketplaceMeteringUsageAllocation {
	return v.value
}

func (v *NullableAwsMarketplaceMeteringUsageAllocation) Set(val *AwsMarketplaceMeteringUsageAllocation) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsMarketplaceMeteringUsageAllocation) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsMarketplaceMeteringUsageAllocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsMarketplaceMeteringUsageAllocation(val *AwsMarketplaceMeteringUsageAllocation) *NullableAwsMarketplaceMeteringUsageAllocation {
	return &NullableAwsMarketplaceMeteringUsageAllocation{value: val, isSet: true}
}

func (v NullableAwsMarketplaceMeteringUsageAllocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsMarketplaceMeteringUsageAllocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
