/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the StripeProduct type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StripeProduct{}

// StripeProduct struct for StripeProduct
type StripeProduct struct {
	// Whether the product is currently available for purchase.
	Active *bool `json:"active,omitempty"`
	// Time at which the object was created. Measured in seconds since the Unix epoch.
	Created *int32 `json:"created,omitempty"`
	// The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.
	Description *string `json:"description,omitempty"`
	// Unique identifier for the product in Stripe.
	Id *string `json:"id,omitempty"`
	// A list of up to 8 URLs of images for this product, meant to be displayable to the customer.
	Images []string `json:"images,omitempty"`
	// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
	Livemode *bool `json:"livemode,omitempty"`
	// A list of up to 15 marketing features for this product. These are displayed in [pricing tables](https://stripe.com/docs/payments/checkout/pricing-table).
	MarketingFeatures []StripeProductMarketingFeature `json:"marketing_features,omitempty"`
	// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
	Metadata *map[string]string `json:"metadata,omitempty"`
	// The product's name, meant to be displayable to the customer.
	Name *string `json:"name,omitempty"`
	// String representing the object's type. Always has the value `product`.
	Object *string `json:"object,omitempty"`
	// The dimensions of this product for shipping purposes.
	PackageDimensions *StripeProductPackageDimensions `json:"package_dimensions,omitempty"`
	// Whether this product is shipped (i.e., physical goods).
	Shippable *bool `json:"shippable,omitempty"`
	// Extra information about a product which will appear on your customer's credit card statement. In the case that multiple products are billed at once, the first statement descriptor will be used.
	StatementDescriptor *string `json:"statement_descriptor,omitempty"`
	// A [tax code](https://stripe.com/docs/tax/tax-categories) ID.
	TaxCode map[string]interface{} `json:"tax_code,omitempty"`
	// A label that represents units of this product. When set, this will be included in customers' receipts, invoices, Checkout, and the customer portal.
	UnitLabel *string `json:"unit_label,omitempty"`
	// Time at which the product was last updated. Measured in seconds since the Unix epoch.
	Updated *int32 `json:"updated,omitempty"`
	// A URL of a publicly-accessible webpage for this product.
	Url *string `json:"url,omitempty"`
}

// NewStripeProduct instantiates a new StripeProduct object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStripeProduct() *StripeProduct {
	this := StripeProduct{}
	return &this
}

// NewStripeProductWithDefaults instantiates a new StripeProduct object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStripeProductWithDefaults() *StripeProduct {
	this := StripeProduct{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *StripeProduct) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeProduct) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *StripeProduct) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *StripeProduct) SetActive(v bool) {
	o.Active = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *StripeProduct) GetCreated() int32 {
	if o == nil || IsNil(o.Created) {
		var ret int32
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeProduct) GetCreatedOk() (*int32, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *StripeProduct) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given int32 and assigns it to the Created field.
func (o *StripeProduct) SetCreated(v int32) {
	o.Created = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *StripeProduct) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeProduct) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *StripeProduct) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *StripeProduct) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *StripeProduct) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeProduct) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *StripeProduct) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *StripeProduct) SetId(v string) {
	o.Id = &v
}

// GetImages returns the Images field value if set, zero value otherwise.
func (o *StripeProduct) GetImages() []string {
	if o == nil || IsNil(o.Images) {
		var ret []string
		return ret
	}
	return o.Images
}

// GetImagesOk returns a tuple with the Images field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeProduct) GetImagesOk() ([]string, bool) {
	if o == nil || IsNil(o.Images) {
		return nil, false
	}
	return o.Images, true
}

// HasImages returns a boolean if a field has been set.
func (o *StripeProduct) HasImages() bool {
	if o != nil && !IsNil(o.Images) {
		return true
	}

	return false
}

// SetImages gets a reference to the given []string and assigns it to the Images field.
func (o *StripeProduct) SetImages(v []string) {
	o.Images = v
}

// GetLivemode returns the Livemode field value if set, zero value otherwise.
func (o *StripeProduct) GetLivemode() bool {
	if o == nil || IsNil(o.Livemode) {
		var ret bool
		return ret
	}
	return *o.Livemode
}

// GetLivemodeOk returns a tuple with the Livemode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeProduct) GetLivemodeOk() (*bool, bool) {
	if o == nil || IsNil(o.Livemode) {
		return nil, false
	}
	return o.Livemode, true
}

// HasLivemode returns a boolean if a field has been set.
func (o *StripeProduct) HasLivemode() bool {
	if o != nil && !IsNil(o.Livemode) {
		return true
	}

	return false
}

// SetLivemode gets a reference to the given bool and assigns it to the Livemode field.
func (o *StripeProduct) SetLivemode(v bool) {
	o.Livemode = &v
}

// GetMarketingFeatures returns the MarketingFeatures field value if set, zero value otherwise.
func (o *StripeProduct) GetMarketingFeatures() []StripeProductMarketingFeature {
	if o == nil || IsNil(o.MarketingFeatures) {
		var ret []StripeProductMarketingFeature
		return ret
	}
	return o.MarketingFeatures
}

// GetMarketingFeaturesOk returns a tuple with the MarketingFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeProduct) GetMarketingFeaturesOk() ([]StripeProductMarketingFeature, bool) {
	if o == nil || IsNil(o.MarketingFeatures) {
		return nil, false
	}
	return o.MarketingFeatures, true
}

// HasMarketingFeatures returns a boolean if a field has been set.
func (o *StripeProduct) HasMarketingFeatures() bool {
	if o != nil && !IsNil(o.MarketingFeatures) {
		return true
	}

	return false
}

// SetMarketingFeatures gets a reference to the given []StripeProductMarketingFeature and assigns it to the MarketingFeatures field.
func (o *StripeProduct) SetMarketingFeatures(v []StripeProductMarketingFeature) {
	o.MarketingFeatures = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *StripeProduct) GetMetadata() map[string]string {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeProduct) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *StripeProduct) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *StripeProduct) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *StripeProduct) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeProduct) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *StripeProduct) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *StripeProduct) SetName(v string) {
	o.Name = &v
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *StripeProduct) GetObject() string {
	if o == nil || IsNil(o.Object) {
		var ret string
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeProduct) GetObjectOk() (*string, bool) {
	if o == nil || IsNil(o.Object) {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *StripeProduct) HasObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given string and assigns it to the Object field.
func (o *StripeProduct) SetObject(v string) {
	o.Object = &v
}

// GetPackageDimensions returns the PackageDimensions field value if set, zero value otherwise.
func (o *StripeProduct) GetPackageDimensions() StripeProductPackageDimensions {
	if o == nil || IsNil(o.PackageDimensions) {
		var ret StripeProductPackageDimensions
		return ret
	}
	return *o.PackageDimensions
}

// GetPackageDimensionsOk returns a tuple with the PackageDimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeProduct) GetPackageDimensionsOk() (*StripeProductPackageDimensions, bool) {
	if o == nil || IsNil(o.PackageDimensions) {
		return nil, false
	}
	return o.PackageDimensions, true
}

// HasPackageDimensions returns a boolean if a field has been set.
func (o *StripeProduct) HasPackageDimensions() bool {
	if o != nil && !IsNil(o.PackageDimensions) {
		return true
	}

	return false
}

// SetPackageDimensions gets a reference to the given StripeProductPackageDimensions and assigns it to the PackageDimensions field.
func (o *StripeProduct) SetPackageDimensions(v StripeProductPackageDimensions) {
	o.PackageDimensions = &v
}

// GetShippable returns the Shippable field value if set, zero value otherwise.
func (o *StripeProduct) GetShippable() bool {
	if o == nil || IsNil(o.Shippable) {
		var ret bool
		return ret
	}
	return *o.Shippable
}

// GetShippableOk returns a tuple with the Shippable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeProduct) GetShippableOk() (*bool, bool) {
	if o == nil || IsNil(o.Shippable) {
		return nil, false
	}
	return o.Shippable, true
}

// HasShippable returns a boolean if a field has been set.
func (o *StripeProduct) HasShippable() bool {
	if o != nil && !IsNil(o.Shippable) {
		return true
	}

	return false
}

// SetShippable gets a reference to the given bool and assigns it to the Shippable field.
func (o *StripeProduct) SetShippable(v bool) {
	o.Shippable = &v
}

// GetStatementDescriptor returns the StatementDescriptor field value if set, zero value otherwise.
func (o *StripeProduct) GetStatementDescriptor() string {
	if o == nil || IsNil(o.StatementDescriptor) {
		var ret string
		return ret
	}
	return *o.StatementDescriptor
}

// GetStatementDescriptorOk returns a tuple with the StatementDescriptor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeProduct) GetStatementDescriptorOk() (*string, bool) {
	if o == nil || IsNil(o.StatementDescriptor) {
		return nil, false
	}
	return o.StatementDescriptor, true
}

// HasStatementDescriptor returns a boolean if a field has been set.
func (o *StripeProduct) HasStatementDescriptor() bool {
	if o != nil && !IsNil(o.StatementDescriptor) {
		return true
	}

	return false
}

// SetStatementDescriptor gets a reference to the given string and assigns it to the StatementDescriptor field.
func (o *StripeProduct) SetStatementDescriptor(v string) {
	o.StatementDescriptor = &v
}

// GetTaxCode returns the TaxCode field value if set, zero value otherwise.
func (o *StripeProduct) GetTaxCode() map[string]interface{} {
	if o == nil || IsNil(o.TaxCode) {
		var ret map[string]interface{}
		return ret
	}
	return o.TaxCode
}

// GetTaxCodeOk returns a tuple with the TaxCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeProduct) GetTaxCodeOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.TaxCode) {
		return map[string]interface{}{}, false
	}
	return o.TaxCode, true
}

// HasTaxCode returns a boolean if a field has been set.
func (o *StripeProduct) HasTaxCode() bool {
	if o != nil && !IsNil(o.TaxCode) {
		return true
	}

	return false
}

// SetTaxCode gets a reference to the given map[string]interface{} and assigns it to the TaxCode field.
func (o *StripeProduct) SetTaxCode(v map[string]interface{}) {
	o.TaxCode = v
}

// GetUnitLabel returns the UnitLabel field value if set, zero value otherwise.
func (o *StripeProduct) GetUnitLabel() string {
	if o == nil || IsNil(o.UnitLabel) {
		var ret string
		return ret
	}
	return *o.UnitLabel
}

// GetUnitLabelOk returns a tuple with the UnitLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeProduct) GetUnitLabelOk() (*string, bool) {
	if o == nil || IsNil(o.UnitLabel) {
		return nil, false
	}
	return o.UnitLabel, true
}

// HasUnitLabel returns a boolean if a field has been set.
func (o *StripeProduct) HasUnitLabel() bool {
	if o != nil && !IsNil(o.UnitLabel) {
		return true
	}

	return false
}

// SetUnitLabel gets a reference to the given string and assigns it to the UnitLabel field.
func (o *StripeProduct) SetUnitLabel(v string) {
	o.UnitLabel = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *StripeProduct) GetUpdated() int32 {
	if o == nil || IsNil(o.Updated) {
		var ret int32
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeProduct) GetUpdatedOk() (*int32, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *StripeProduct) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given int32 and assigns it to the Updated field.
func (o *StripeProduct) SetUpdated(v int32) {
	o.Updated = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *StripeProduct) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeProduct) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *StripeProduct) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *StripeProduct) SetUrl(v string) {
	o.Url = &v
}

func (o StripeProduct) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StripeProduct) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Images) {
		toSerialize["images"] = o.Images
	}
	if !IsNil(o.Livemode) {
		toSerialize["livemode"] = o.Livemode
	}
	if !IsNil(o.MarketingFeatures) {
		toSerialize["marketing_features"] = o.MarketingFeatures
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Object) {
		toSerialize["object"] = o.Object
	}
	if !IsNil(o.PackageDimensions) {
		toSerialize["package_dimensions"] = o.PackageDimensions
	}
	if !IsNil(o.Shippable) {
		toSerialize["shippable"] = o.Shippable
	}
	if !IsNil(o.StatementDescriptor) {
		toSerialize["statement_descriptor"] = o.StatementDescriptor
	}
	if !IsNil(o.TaxCode) {
		toSerialize["tax_code"] = o.TaxCode
	}
	if !IsNil(o.UnitLabel) {
		toSerialize["unit_label"] = o.UnitLabel
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableStripeProduct struct {
	value *StripeProduct
	isSet bool
}

func (v NullableStripeProduct) Get() *StripeProduct {
	return v.value
}

func (v *NullableStripeProduct) Set(val *StripeProduct) {
	v.value = val
	v.isSet = true
}

func (v NullableStripeProduct) IsSet() bool {
	return v.isSet
}

func (v *NullableStripeProduct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStripeProduct(val *StripeProduct) *NullableStripeProduct {
	return &NullableStripeProduct{value: val, isSet: true}
}

func (v NullableStripeProduct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStripeProduct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
