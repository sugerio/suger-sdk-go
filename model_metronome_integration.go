/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
)

// checks if the MetronomeIntegration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetronomeIntegration{}

// MetronomeIntegration struct for MetronomeIntegration
type MetronomeIntegration struct {
	// The Bearer token for the metronome API. Required only when the metronome integration is created or updated with new API token.
	ApiToken *string `json:"apiToken,omitempty"`
	// The full list of billable metrics fetched from metronome API for the available metronome customers.
	BillableMetricFullList []MetronomeBillableMetric `json:"billableMetricFullList,omitempty"`
	// The whitelist of billable metrics. Only the metrics in the whitelist will be metered & reported to cloud marketplace.
	BillableMetricWhitelist []MetronomeBillableMetric `json:"billableMetricWhitelist,omitempty"`
	// Whether to enable the auto usage report for the metronome integration. If enabled, cron job runs every hour to fetch usage events from Metronome to Suger as UsageRecordGroups.
	EnableAutoReportUsage *bool `json:"enableAutoReportUsage,omitempty"`
	// Enable whitelist for billable metrics. If enabled, only the metrics in the whitelist will be metered & reported to cloud marketplace. Otherwise all the metrics in the billableMetricFullList will be metered & reported to cloud marketplace.
	EnableBillableMetricWhitelist *bool `json:"enableBillableMetricWhitelist,omitempty"`
	// The secret key used to store the ApiToken in AWS Secret manager. For internal usage only.
	SecretKey *string `json:"secretKey,omitempty"`
}

// NewMetronomeIntegration instantiates a new MetronomeIntegration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetronomeIntegration() *MetronomeIntegration {
	this := MetronomeIntegration{}
	return &this
}

// NewMetronomeIntegrationWithDefaults instantiates a new MetronomeIntegration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetronomeIntegrationWithDefaults() *MetronomeIntegration {
	this := MetronomeIntegration{}
	return &this
}

// GetApiToken returns the ApiToken field value if set, zero value otherwise.
func (o *MetronomeIntegration) GetApiToken() string {
	if o == nil || IsNil(o.ApiToken) {
		var ret string
		return ret
	}
	return *o.ApiToken
}

// GetApiTokenOk returns a tuple with the ApiToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetronomeIntegration) GetApiTokenOk() (*string, bool) {
	if o == nil || IsNil(o.ApiToken) {
		return nil, false
	}
	return o.ApiToken, true
}

// HasApiToken returns a boolean if a field has been set.
func (o *MetronomeIntegration) HasApiToken() bool {
	if o != nil && !IsNil(o.ApiToken) {
		return true
	}

	return false
}

// SetApiToken gets a reference to the given string and assigns it to the ApiToken field.
func (o *MetronomeIntegration) SetApiToken(v string) {
	o.ApiToken = &v
}

// GetBillableMetricFullList returns the BillableMetricFullList field value if set, zero value otherwise.
func (o *MetronomeIntegration) GetBillableMetricFullList() []MetronomeBillableMetric {
	if o == nil || IsNil(o.BillableMetricFullList) {
		var ret []MetronomeBillableMetric
		return ret
	}
	return o.BillableMetricFullList
}

// GetBillableMetricFullListOk returns a tuple with the BillableMetricFullList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetronomeIntegration) GetBillableMetricFullListOk() ([]MetronomeBillableMetric, bool) {
	if o == nil || IsNil(o.BillableMetricFullList) {
		return nil, false
	}
	return o.BillableMetricFullList, true
}

// HasBillableMetricFullList returns a boolean if a field has been set.
func (o *MetronomeIntegration) HasBillableMetricFullList() bool {
	if o != nil && !IsNil(o.BillableMetricFullList) {
		return true
	}

	return false
}

// SetBillableMetricFullList gets a reference to the given []MetronomeBillableMetric and assigns it to the BillableMetricFullList field.
func (o *MetronomeIntegration) SetBillableMetricFullList(v []MetronomeBillableMetric) {
	o.BillableMetricFullList = v
}

// GetBillableMetricWhitelist returns the BillableMetricWhitelist field value if set, zero value otherwise.
func (o *MetronomeIntegration) GetBillableMetricWhitelist() []MetronomeBillableMetric {
	if o == nil || IsNil(o.BillableMetricWhitelist) {
		var ret []MetronomeBillableMetric
		return ret
	}
	return o.BillableMetricWhitelist
}

// GetBillableMetricWhitelistOk returns a tuple with the BillableMetricWhitelist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetronomeIntegration) GetBillableMetricWhitelistOk() ([]MetronomeBillableMetric, bool) {
	if o == nil || IsNil(o.BillableMetricWhitelist) {
		return nil, false
	}
	return o.BillableMetricWhitelist, true
}

// HasBillableMetricWhitelist returns a boolean if a field has been set.
func (o *MetronomeIntegration) HasBillableMetricWhitelist() bool {
	if o != nil && !IsNil(o.BillableMetricWhitelist) {
		return true
	}

	return false
}

// SetBillableMetricWhitelist gets a reference to the given []MetronomeBillableMetric and assigns it to the BillableMetricWhitelist field.
func (o *MetronomeIntegration) SetBillableMetricWhitelist(v []MetronomeBillableMetric) {
	o.BillableMetricWhitelist = v
}

// GetEnableAutoReportUsage returns the EnableAutoReportUsage field value if set, zero value otherwise.
func (o *MetronomeIntegration) GetEnableAutoReportUsage() bool {
	if o == nil || IsNil(o.EnableAutoReportUsage) {
		var ret bool
		return ret
	}
	return *o.EnableAutoReportUsage
}

// GetEnableAutoReportUsageOk returns a tuple with the EnableAutoReportUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetronomeIntegration) GetEnableAutoReportUsageOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableAutoReportUsage) {
		return nil, false
	}
	return o.EnableAutoReportUsage, true
}

// HasEnableAutoReportUsage returns a boolean if a field has been set.
func (o *MetronomeIntegration) HasEnableAutoReportUsage() bool {
	if o != nil && !IsNil(o.EnableAutoReportUsage) {
		return true
	}

	return false
}

// SetEnableAutoReportUsage gets a reference to the given bool and assigns it to the EnableAutoReportUsage field.
func (o *MetronomeIntegration) SetEnableAutoReportUsage(v bool) {
	o.EnableAutoReportUsage = &v
}

// GetEnableBillableMetricWhitelist returns the EnableBillableMetricWhitelist field value if set, zero value otherwise.
func (o *MetronomeIntegration) GetEnableBillableMetricWhitelist() bool {
	if o == nil || IsNil(o.EnableBillableMetricWhitelist) {
		var ret bool
		return ret
	}
	return *o.EnableBillableMetricWhitelist
}

// GetEnableBillableMetricWhitelistOk returns a tuple with the EnableBillableMetricWhitelist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetronomeIntegration) GetEnableBillableMetricWhitelistOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableBillableMetricWhitelist) {
		return nil, false
	}
	return o.EnableBillableMetricWhitelist, true
}

// HasEnableBillableMetricWhitelist returns a boolean if a field has been set.
func (o *MetronomeIntegration) HasEnableBillableMetricWhitelist() bool {
	if o != nil && !IsNil(o.EnableBillableMetricWhitelist) {
		return true
	}

	return false
}

// SetEnableBillableMetricWhitelist gets a reference to the given bool and assigns it to the EnableBillableMetricWhitelist field.
func (o *MetronomeIntegration) SetEnableBillableMetricWhitelist(v bool) {
	o.EnableBillableMetricWhitelist = &v
}

// GetSecretKey returns the SecretKey field value if set, zero value otherwise.
func (o *MetronomeIntegration) GetSecretKey() string {
	if o == nil || IsNil(o.SecretKey) {
		var ret string
		return ret
	}
	return *o.SecretKey
}

// GetSecretKeyOk returns a tuple with the SecretKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetronomeIntegration) GetSecretKeyOk() (*string, bool) {
	if o == nil || IsNil(o.SecretKey) {
		return nil, false
	}
	return o.SecretKey, true
}

// HasSecretKey returns a boolean if a field has been set.
func (o *MetronomeIntegration) HasSecretKey() bool {
	if o != nil && !IsNil(o.SecretKey) {
		return true
	}

	return false
}

// SetSecretKey gets a reference to the given string and assigns it to the SecretKey field.
func (o *MetronomeIntegration) SetSecretKey(v string) {
	o.SecretKey = &v
}

func (o MetronomeIntegration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetronomeIntegration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiToken) {
		toSerialize["apiToken"] = o.ApiToken
	}
	if !IsNil(o.BillableMetricFullList) {
		toSerialize["billableMetricFullList"] = o.BillableMetricFullList
	}
	if !IsNil(o.BillableMetricWhitelist) {
		toSerialize["billableMetricWhitelist"] = o.BillableMetricWhitelist
	}
	if !IsNil(o.EnableAutoReportUsage) {
		toSerialize["enableAutoReportUsage"] = o.EnableAutoReportUsage
	}
	if !IsNil(o.EnableBillableMetricWhitelist) {
		toSerialize["enableBillableMetricWhitelist"] = o.EnableBillableMetricWhitelist
	}
	if !IsNil(o.SecretKey) {
		toSerialize["secretKey"] = o.SecretKey
	}
	return toSerialize, nil
}

type NullableMetronomeIntegration struct {
	value *MetronomeIntegration
	isSet bool
}

func (v NullableMetronomeIntegration) Get() *MetronomeIntegration {
	return v.value
}

func (v *NullableMetronomeIntegration) Set(val *MetronomeIntegration) {
	v.value = val
	v.isSet = true
}

func (v NullableMetronomeIntegration) IsSet() bool {
	return v.isSet
}

func (v *NullableMetronomeIntegration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetronomeIntegration(val *MetronomeIntegration) *NullableMetronomeIntegration {
	return &NullableMetronomeIntegration{value: val, isSet: true}
}

func (v NullableMetronomeIntegration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetronomeIntegration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
