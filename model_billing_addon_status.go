/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
	"fmt"
)

// BillingAddonStatus the model 'BillingAddonStatus'
type BillingAddonStatus string

// List of BillingAddonStatus
const (
	BillingAddonStatus_ACTIVE  BillingAddonStatus = "ACTIVE"
	BillingAddonStatus_DELETED BillingAddonStatus = "DELETED"
)

// All allowed values of BillingAddonStatus enum
var AllowedBillingAddonStatusEnumValues = []BillingAddonStatus{
	"ACTIVE",
	"DELETED",
}

func (v *BillingAddonStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BillingAddonStatus(value)
	for _, existing := range AllowedBillingAddonStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BillingAddonStatus", value)
}

// NewBillingAddonStatusFromValue returns a pointer to a valid BillingAddonStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBillingAddonStatusFromValue(v string) (*BillingAddonStatus, error) {
	ev := BillingAddonStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BillingAddonStatus: valid values are %v", v, AllowedBillingAddonStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BillingAddonStatus) IsValid() bool {
	for _, existing := range AllowedBillingAddonStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BillingAddonStatus value
func (v BillingAddonStatus) Ptr() *BillingAddonStatus {
	return &v
}

type NullableBillingAddonStatus struct {
	value *BillingAddonStatus
	isSet bool
}

func (v NullableBillingAddonStatus) Get() *BillingAddonStatus {
	return v.value
}

func (v *NullableBillingAddonStatus) Set(val *BillingAddonStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingAddonStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingAddonStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingAddonStatus(val *BillingAddonStatus) *NullableBillingAddonStatus {
	return &NullableBillingAddonStatus{value: val, isSet: true}
}

func (v NullableBillingAddonStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingAddonStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
