/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UsageMeteringConfigInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsageMeteringConfigInfo{}

// UsageMeteringConfigInfo struct for UsageMeteringConfigInfo
type UsageMeteringConfigInfo struct {
	// The usage metering configuration for each Partner, such as AWS, AZURE & GCP.
	PartnerUsageMeteringConfigs []PartnerUsageMeteringConfig `json:"partnerUsageMeteringConfigs,omitempty"`
}

// NewUsageMeteringConfigInfo instantiates a new UsageMeteringConfigInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsageMeteringConfigInfo() *UsageMeteringConfigInfo {
	this := UsageMeteringConfigInfo{}
	return &this
}

// NewUsageMeteringConfigInfoWithDefaults instantiates a new UsageMeteringConfigInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageMeteringConfigInfoWithDefaults() *UsageMeteringConfigInfo {
	this := UsageMeteringConfigInfo{}
	return &this
}

// GetPartnerUsageMeteringConfigs returns the PartnerUsageMeteringConfigs field value if set, zero value otherwise.
func (o *UsageMeteringConfigInfo) GetPartnerUsageMeteringConfigs() []PartnerUsageMeteringConfig {
	if o == nil || IsNil(o.PartnerUsageMeteringConfigs) {
		var ret []PartnerUsageMeteringConfig
		return ret
	}
	return o.PartnerUsageMeteringConfigs
}

// GetPartnerUsageMeteringConfigsOk returns a tuple with the PartnerUsageMeteringConfigs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageMeteringConfigInfo) GetPartnerUsageMeteringConfigsOk() ([]PartnerUsageMeteringConfig, bool) {
	if o == nil || IsNil(o.PartnerUsageMeteringConfigs) {
		return nil, false
	}
	return o.PartnerUsageMeteringConfigs, true
}

// HasPartnerUsageMeteringConfigs returns a boolean if a field has been set.
func (o *UsageMeteringConfigInfo) HasPartnerUsageMeteringConfigs() bool {
	if o != nil && !IsNil(o.PartnerUsageMeteringConfigs) {
		return true
	}

	return false
}

// SetPartnerUsageMeteringConfigs gets a reference to the given []PartnerUsageMeteringConfig and assigns it to the PartnerUsageMeteringConfigs field.
func (o *UsageMeteringConfigInfo) SetPartnerUsageMeteringConfigs(v []PartnerUsageMeteringConfig) {
	o.PartnerUsageMeteringConfigs = v
}

func (o UsageMeteringConfigInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsageMeteringConfigInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PartnerUsageMeteringConfigs) {
		toSerialize["partnerUsageMeteringConfigs"] = o.PartnerUsageMeteringConfigs
	}
	return toSerialize, nil
}

type NullableUsageMeteringConfigInfo struct {
	value *UsageMeteringConfigInfo
	isSet bool
}

func (v NullableUsageMeteringConfigInfo) Get() *UsageMeteringConfigInfo {
	return v.value
}

func (v *NullableUsageMeteringConfigInfo) Set(val *UsageMeteringConfigInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageMeteringConfigInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageMeteringConfigInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageMeteringConfigInfo(val *UsageMeteringConfigInfo) *NullableUsageMeteringConfigInfo {
	return &NullableUsageMeteringConfigInfo{value: val, isSet: true}
}

func (v NullableUsageMeteringConfigInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageMeteringConfigInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


