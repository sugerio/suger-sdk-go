/*
Suger API

Testing OfferAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/sugerio/suger-sdk-go"
)

func Test_openapi_OfferAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OfferAPIService CancelOffer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var offerId string

		resp, httpRes, err := apiClient.OfferAPI.CancelOffer(context.Background(), orgId, offerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OfferAPIService CreateOffer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.OfferAPI.CreateOffer(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OfferAPIService CreateOrUpdateDraftOffer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.OfferAPI.CreateOrUpdateDraftOffer(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OfferAPIService DeleteOffer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var offerId string

		resp, httpRes, err := apiClient.OfferAPI.DeleteOffer(context.Background(), orgId, offerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OfferAPIService ExtendPrivateOfferExpiryDate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var offerId string

		resp, httpRes, err := apiClient.OfferAPI.ExtendPrivateOfferExpiryDate(context.Background(), orgId, offerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OfferAPIService GetOffer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var offerId string

		resp, httpRes, err := apiClient.OfferAPI.GetOffer(context.Background(), orgId, offerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OfferAPIService GetOfferEula", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var offerId string

		resp, httpRes, err := apiClient.OfferAPI.GetOfferEula(context.Background(), orgId, offerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OfferAPIService ListOffersByContact", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var contactId string

		resp, httpRes, err := apiClient.OfferAPI.ListOffersByContact(context.Background(), orgId, contactId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OfferAPIService ListOffersByOrganization", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.OfferAPI.ListOffersByOrganization(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OfferAPIService ListOffersByPartner", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var partner string

		resp, httpRes, err := apiClient.OfferAPI.ListOffersByPartner(context.Background(), orgId, partner).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OfferAPIService ListOffersByProduct", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var productId string

		resp, httpRes, err := apiClient.OfferAPI.ListOffersByProduct(context.Background(), orgId, productId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OfferAPIService SendOfferNotifications", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var offerId string

		resp, httpRes, err := apiClient.OfferAPI.SendOfferNotifications(context.Background(), orgId, offerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OfferAPIService UpdateOfferMetaInfo", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var offerId string

		resp, httpRes, err := apiClient.OfferAPI.UpdateOfferMetaInfo(context.Background(), orgId, offerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
