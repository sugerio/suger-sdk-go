/*
Suger API

Testing BillingAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/sugerio/suger-sdk-go"
	"testing"
)

func Test_openapi_BillingAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)
	header := apiClient.GetConfig().DefaultHeader
	header["Authorization"] = "Key b277c95e5e92ff7a8e96e74baf6ee2fb080db3e6507977c0067791abc1f52da4220e866e2081117a1721788aa2e9dc6fe009f2a699f17a7bba23973af6954db4"

	t.Run("Test BillingAPIService CreateAddon", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.BillingAPI.CreateAddon(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BillingAPIService CreateRefund", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var buyerId string
		var paymentTransactionId string

		resp, httpRes, err := apiClient.BillingAPI.CreateRefund(context.Background(), orgId, buyerId, paymentTransactionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BillingAPIService DeleteAddon", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var addonId string

		resp, httpRes, err := apiClient.BillingAPI.DeleteAddon(context.Background(), orgId, addonId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BillingAPIService GetAddon", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var addonId string

		resp, httpRes, err := apiClient.BillingAPI.GetAddon(context.Background(), orgId, addonId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BillingAPIService GetInvoice", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var entitlementId string
		var invoiceId string

		resp, httpRes, err := apiClient.BillingAPI.GetInvoice(context.Background(), orgId, entitlementId, invoiceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BillingAPIService IssueInvoice", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var entitlementId string
		var invoiceId string

		resp, httpRes, err := apiClient.BillingAPI.IssueInvoice(context.Background(), orgId, entitlementId, invoiceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BillingAPIService ListAddons", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.BillingAPI.ListAddons(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BillingAPIService ListInvoices", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.BillingAPI.ListInvoices(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BillingAPIService ListPaymentTransactions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.BillingAPI.ListPaymentTransactions(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BillingAPIService ListRefundOfPaymentTransaction", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var buyerId string
		var paymentTransactionId string

		resp, httpRes, err := apiClient.BillingAPI.ListRefundOfPaymentTransaction(context.Background(), orgId, buyerId, paymentTransactionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BillingAPIService PayInvoice", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var entitlementId string
		var invoiceId string

		resp, httpRes, err := apiClient.BillingAPI.PayInvoice(context.Background(), orgId, entitlementId, invoiceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BillingAPIService UpdateAddon", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var addonId string

		resp, httpRes, err := apiClient.BillingAPI.UpdateAddon(context.Background(), orgId, addonId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BillingAPIService VoidInvoice", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var entitlementId string
		var invoiceId string

		resp, httpRes, err := apiClient.BillingAPI.VoidInvoice(context.Background(), orgId, entitlementId, invoiceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
