/*
Suger API

Testing ContactAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package suger

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/sugerio/suger-sdk-go"
	"testing"
)

func Test_suger_ContactAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ContactAPIService AddContactToBuyer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var buyerId string
		var contactId string

		resp, httpRes, err := apiClient.ContactAPI.AddContactToBuyer(context.Background(), orgId, buyerId, contactId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactAPIService AddContactToOffer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var contactId string
		var offerId string

		resp, httpRes, err := apiClient.ContactAPI.AddContactToOffer(context.Background(), orgId, contactId, offerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactAPIService BatchCreateContacts", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.ContactAPI.BatchCreateContacts(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactAPIService CreateContact", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.ContactAPI.CreateContact(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactAPIService GetContact", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var contactId string

		resp, httpRes, err := apiClient.ContactAPI.GetContact(context.Background(), orgId, contactId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactAPIService ListContactsByOrganization", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.ContactAPI.ListContactsByOrganization(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactAPIService RemoveContactFromBuyer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var buyerId string
		var contactId string

		resp, httpRes, err := apiClient.ContactAPI.RemoveContactFromBuyer(context.Background(), orgId, buyerId, contactId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactAPIService RemoveContactFromOffer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var contactId string
		var offerId string

		resp, httpRes, err := apiClient.ContactAPI.RemoveContactFromOffer(context.Background(), orgId, contactId, offerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactAPIService UpdateContact", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var contactId string

		resp, httpRes, err := apiClient.ContactAPI.UpdateContact(context.Background(), orgId, contactId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
