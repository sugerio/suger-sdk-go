/*
Suger API

Testing IntegrationAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/sugerio/suger-sdk-go"
)

func Test_openapi_IntegrationAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test IntegrationAPIService CreateIntegration", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.IntegrationAPI.CreateIntegration(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IntegrationAPIService DeleteIntegration", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var partner string
		var service string

		resp, httpRes, err := apiClient.IntegrationAPI.DeleteIntegration(context.Background(), orgId, partner, service).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IntegrationAPIService GetIntegration", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var partner string
		var service string

		resp, httpRes, err := apiClient.IntegrationAPI.GetIntegration(context.Background(), orgId, partner, service).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IntegrationAPIService ListIntegrationsByOrganization", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.IntegrationAPI.ListIntegrationsByOrganization(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IntegrationAPIService UpdateIntegration", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var partner string
		var service string

		resp, httpRes, err := apiClient.IntegrationAPI.UpdateIntegration(context.Background(), orgId, partner, service).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IntegrationAPIService VerifyIntegration", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var partner string
		var service string

		resp, httpRes, err := apiClient.IntegrationAPI.VerifyIntegration(context.Background(), orgId, partner, service).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
