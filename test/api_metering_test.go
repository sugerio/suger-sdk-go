/*
Suger API

Testing MeteringAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/sugerio/suger-sdk-go"
	"testing"
)

func Test_openapi_MeteringAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MeteringAPIService BatchReportUsageRecordGroups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.MeteringAPI.BatchReportUsageRecordGroups(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MeteringAPIService BatchValidateUsageRecordGroups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.MeteringAPI.BatchValidateUsageRecordGroups(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MeteringAPIService CreateBillableMetric", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.MeteringAPI.CreateBillableMetric(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MeteringAPIService DeleteUsageRecordGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var usageRecordGroupId string

		resp, httpRes, err := apiClient.MeteringAPI.DeleteUsageRecordGroup(context.Background(), orgId, usageRecordGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MeteringAPIService GetBillableMetric", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var billableMetricId string

		resp, httpRes, err := apiClient.MeteringAPI.GetBillableMetric(context.Background(), orgId, billableMetricId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MeteringAPIService GetUsageMeteringConfigInfo", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.MeteringAPI.GetUsageMeteringConfigInfo(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MeteringAPIService ListBillableMetrics", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.MeteringAPI.ListBillableMetrics(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MeteringAPIService ListUsageRecordGroups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.MeteringAPI.ListUsageRecordGroups(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MeteringAPIService ListUsageRecordReports", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.MeteringAPI.ListUsageRecordReports(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MeteringAPIService ReportUsageRecordGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var entitlementId string

		resp, httpRes, err := apiClient.MeteringAPI.ReportUsageRecordGroup(context.Background(), orgId, entitlementId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MeteringAPIService RetryUsageRecordGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var usageRecordGroupId string

		resp, httpRes, err := apiClient.MeteringAPI.RetryUsageRecordGroup(context.Background(), orgId, usageRecordGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MeteringAPIService UpdateBillableMetric", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var billableMetricId string

		resp, httpRes, err := apiClient.MeteringAPI.UpdateBillableMetric(context.Background(), orgId, billableMetricId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MeteringAPIService UpdateUsageMeteringConfigInfo", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.MeteringAPI.UpdateUsageMeteringConfigInfo(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
