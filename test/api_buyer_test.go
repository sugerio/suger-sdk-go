/*
Suger API

Testing BuyerAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/sugerio/suger-sdk-go"
	"testing"
)

func Test_openapi_BuyerAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BuyerAPIService CloseCreditWallet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var buyerId string
		var walletId string

		resp, httpRes, err := apiClient.BuyerAPI.CloseCreditWallet(context.Background(), orgId, buyerId, walletId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BuyerAPIService CreateBuyer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.BuyerAPI.CreateBuyer(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BuyerAPIService CreateCreditWallet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var buyerId string

		resp, httpRes, err := apiClient.BuyerAPI.CreateCreditWallet(context.Background(), orgId, buyerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BuyerAPIService DeleteBuyerWallet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var buyerId string
		var walletId string

		resp, httpRes, err := apiClient.BuyerAPI.DeleteBuyerWallet(context.Background(), orgId, buyerId, walletId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BuyerAPIService GetBuyer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var buyerId string

		resp, httpRes, err := apiClient.BuyerAPI.GetBuyer(context.Background(), orgId, buyerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BuyerAPIService ListBuyerWallets", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var buyerId string

		resp, httpRes, err := apiClient.BuyerAPI.ListBuyerWallets(context.Background(), orgId, buyerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BuyerAPIService ListBuyers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.BuyerAPI.ListBuyers(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BuyerAPIService SetBuyerDefaultWallet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var buyerId string
		var walletId string

		resp, httpRes, err := apiClient.BuyerAPI.SetBuyerDefaultWallet(context.Background(), orgId, buyerId, walletId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BuyerAPIService UpdateBuyer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var buyerId string

		resp, httpRes, err := apiClient.BuyerAPI.UpdateBuyer(context.Background(), orgId, buyerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BuyerAPIService UpdateCreditWallet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var buyerId string
		var walletId string

		resp, httpRes, err := apiClient.BuyerAPI.UpdateCreditWallet(context.Background(), orgId, buyerId, walletId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
