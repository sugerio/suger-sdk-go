/*
Suger API

Testing SupportAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/sugerio/suger-sdk-go"
	"testing"
)

func Test_openapi_SupportAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SupportAPIService CloseSupportTicket", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var ticketId string

		resp, httpRes, err := apiClient.SupportAPI.CloseSupportTicket(context.Background(), orgId, ticketId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SupportAPIService CreateSupportTicket", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.SupportAPI.CreateSupportTicket(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SupportAPIService CreateSupportTicketAttachment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var ticketId string

		resp, httpRes, err := apiClient.SupportAPI.CreateSupportTicketAttachment(context.Background(), orgId, ticketId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SupportAPIService CreateSupportTicketComment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var ticketId string

		resp, httpRes, err := apiClient.SupportAPI.CreateSupportTicketComment(context.Background(), orgId, ticketId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SupportAPIService GetSupportTicket", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var ticketId string

		resp, httpRes, err := apiClient.SupportAPI.GetSupportTicket(context.Background(), orgId, ticketId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SupportAPIService ListSupportTickets", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.SupportAPI.ListSupportTickets(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SupportAPIService ReopenSupportTicket", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var ticketId string

		resp, httpRes, err := apiClient.SupportAPI.ReopenSupportTicket(context.Background(), orgId, ticketId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SupportAPIService UpdateSupportTicket", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var ticketId string

		resp, httpRes, err := apiClient.SupportAPI.UpdateSupportTicket(context.Background(), orgId, ticketId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
