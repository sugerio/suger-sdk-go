/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the RevenueReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RevenueReport{}

// RevenueReport struct for RevenueReport
type RevenueReport struct {
	BuyerID *string `json:"buyerID,omitempty"`
	EntitlementID *string `json:"entitlementID,omitempty"`
	OrganizationID *string `json:"organizationID,omitempty"`
	Partner *string `json:"partner,omitempty"`
	ProductID *string `json:"productID,omitempty"`
	ReportDate *time.Time `json:"reportDate,omitempty"`
	ReportType *RevenueReportType `json:"reportType,omitempty"`
	RevenueRecords []RevenueRecord `json:"revenueRecords,omitempty"`
	Service *string `json:"service,omitempty"`
}

// NewRevenueReport instantiates a new RevenueReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRevenueReport() *RevenueReport {
	this := RevenueReport{}
	return &this
}

// NewRevenueReportWithDefaults instantiates a new RevenueReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRevenueReportWithDefaults() *RevenueReport {
	this := RevenueReport{}
	return &this
}

// GetBuyerID returns the BuyerID field value if set, zero value otherwise.
func (o *RevenueReport) GetBuyerID() string {
	if o == nil || IsNil(o.BuyerID) {
		var ret string
		return ret
	}
	return *o.BuyerID
}

// GetBuyerIDOk returns a tuple with the BuyerID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevenueReport) GetBuyerIDOk() (*string, bool) {
	if o == nil || IsNil(o.BuyerID) {
		return nil, false
	}
	return o.BuyerID, true
}

// HasBuyerID returns a boolean if a field has been set.
func (o *RevenueReport) HasBuyerID() bool {
	if o != nil && !IsNil(o.BuyerID) {
		return true
	}

	return false
}

// SetBuyerID gets a reference to the given string and assigns it to the BuyerID field.
func (o *RevenueReport) SetBuyerID(v string) {
	o.BuyerID = &v
}

// GetEntitlementID returns the EntitlementID field value if set, zero value otherwise.
func (o *RevenueReport) GetEntitlementID() string {
	if o == nil || IsNil(o.EntitlementID) {
		var ret string
		return ret
	}
	return *o.EntitlementID
}

// GetEntitlementIDOk returns a tuple with the EntitlementID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevenueReport) GetEntitlementIDOk() (*string, bool) {
	if o == nil || IsNil(o.EntitlementID) {
		return nil, false
	}
	return o.EntitlementID, true
}

// HasEntitlementID returns a boolean if a field has been set.
func (o *RevenueReport) HasEntitlementID() bool {
	if o != nil && !IsNil(o.EntitlementID) {
		return true
	}

	return false
}

// SetEntitlementID gets a reference to the given string and assigns it to the EntitlementID field.
func (o *RevenueReport) SetEntitlementID(v string) {
	o.EntitlementID = &v
}

// GetOrganizationID returns the OrganizationID field value if set, zero value otherwise.
func (o *RevenueReport) GetOrganizationID() string {
	if o == nil || IsNil(o.OrganizationID) {
		var ret string
		return ret
	}
	return *o.OrganizationID
}

// GetOrganizationIDOk returns a tuple with the OrganizationID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevenueReport) GetOrganizationIDOk() (*string, bool) {
	if o == nil || IsNil(o.OrganizationID) {
		return nil, false
	}
	return o.OrganizationID, true
}

// HasOrganizationID returns a boolean if a field has been set.
func (o *RevenueReport) HasOrganizationID() bool {
	if o != nil && !IsNil(o.OrganizationID) {
		return true
	}

	return false
}

// SetOrganizationID gets a reference to the given string and assigns it to the OrganizationID field.
func (o *RevenueReport) SetOrganizationID(v string) {
	o.OrganizationID = &v
}

// GetPartner returns the Partner field value if set, zero value otherwise.
func (o *RevenueReport) GetPartner() string {
	if o == nil || IsNil(o.Partner) {
		var ret string
		return ret
	}
	return *o.Partner
}

// GetPartnerOk returns a tuple with the Partner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevenueReport) GetPartnerOk() (*string, bool) {
	if o == nil || IsNil(o.Partner) {
		return nil, false
	}
	return o.Partner, true
}

// HasPartner returns a boolean if a field has been set.
func (o *RevenueReport) HasPartner() bool {
	if o != nil && !IsNil(o.Partner) {
		return true
	}

	return false
}

// SetPartner gets a reference to the given string and assigns it to the Partner field.
func (o *RevenueReport) SetPartner(v string) {
	o.Partner = &v
}

// GetProductID returns the ProductID field value if set, zero value otherwise.
func (o *RevenueReport) GetProductID() string {
	if o == nil || IsNil(o.ProductID) {
		var ret string
		return ret
	}
	return *o.ProductID
}

// GetProductIDOk returns a tuple with the ProductID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevenueReport) GetProductIDOk() (*string, bool) {
	if o == nil || IsNil(o.ProductID) {
		return nil, false
	}
	return o.ProductID, true
}

// HasProductID returns a boolean if a field has been set.
func (o *RevenueReport) HasProductID() bool {
	if o != nil && !IsNil(o.ProductID) {
		return true
	}

	return false
}

// SetProductID gets a reference to the given string and assigns it to the ProductID field.
func (o *RevenueReport) SetProductID(v string) {
	o.ProductID = &v
}

// GetReportDate returns the ReportDate field value if set, zero value otherwise.
func (o *RevenueReport) GetReportDate() time.Time {
	if o == nil || IsNil(o.ReportDate) {
		var ret time.Time
		return ret
	}
	return *o.ReportDate
}

// GetReportDateOk returns a tuple with the ReportDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevenueReport) GetReportDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ReportDate) {
		return nil, false
	}
	return o.ReportDate, true
}

// HasReportDate returns a boolean if a field has been set.
func (o *RevenueReport) HasReportDate() bool {
	if o != nil && !IsNil(o.ReportDate) {
		return true
	}

	return false
}

// SetReportDate gets a reference to the given time.Time and assigns it to the ReportDate field.
func (o *RevenueReport) SetReportDate(v time.Time) {
	o.ReportDate = &v
}

// GetReportType returns the ReportType field value if set, zero value otherwise.
func (o *RevenueReport) GetReportType() RevenueReportType {
	if o == nil || IsNil(o.ReportType) {
		var ret RevenueReportType
		return ret
	}
	return *o.ReportType
}

// GetReportTypeOk returns a tuple with the ReportType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevenueReport) GetReportTypeOk() (*RevenueReportType, bool) {
	if o == nil || IsNil(o.ReportType) {
		return nil, false
	}
	return o.ReportType, true
}

// HasReportType returns a boolean if a field has been set.
func (o *RevenueReport) HasReportType() bool {
	if o != nil && !IsNil(o.ReportType) {
		return true
	}

	return false
}

// SetReportType gets a reference to the given RevenueReportType and assigns it to the ReportType field.
func (o *RevenueReport) SetReportType(v RevenueReportType) {
	o.ReportType = &v
}

// GetRevenueRecords returns the RevenueRecords field value if set, zero value otherwise.
func (o *RevenueReport) GetRevenueRecords() []RevenueRecord {
	if o == nil || IsNil(o.RevenueRecords) {
		var ret []RevenueRecord
		return ret
	}
	return o.RevenueRecords
}

// GetRevenueRecordsOk returns a tuple with the RevenueRecords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevenueReport) GetRevenueRecordsOk() ([]RevenueRecord, bool) {
	if o == nil || IsNil(o.RevenueRecords) {
		return nil, false
	}
	return o.RevenueRecords, true
}

// HasRevenueRecords returns a boolean if a field has been set.
func (o *RevenueReport) HasRevenueRecords() bool {
	if o != nil && !IsNil(o.RevenueRecords) {
		return true
	}

	return false
}

// SetRevenueRecords gets a reference to the given []RevenueRecord and assigns it to the RevenueRecords field.
func (o *RevenueReport) SetRevenueRecords(v []RevenueRecord) {
	o.RevenueRecords = v
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *RevenueReport) GetService() string {
	if o == nil || IsNil(o.Service) {
		var ret string
		return ret
	}
	return *o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevenueReport) GetServiceOk() (*string, bool) {
	if o == nil || IsNil(o.Service) {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *RevenueReport) HasService() bool {
	if o != nil && !IsNil(o.Service) {
		return true
	}

	return false
}

// SetService gets a reference to the given string and assigns it to the Service field.
func (o *RevenueReport) SetService(v string) {
	o.Service = &v
}

func (o RevenueReport) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RevenueReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BuyerID) {
		toSerialize["buyerID"] = o.BuyerID
	}
	if !IsNil(o.EntitlementID) {
		toSerialize["entitlementID"] = o.EntitlementID
	}
	if !IsNil(o.OrganizationID) {
		toSerialize["organizationID"] = o.OrganizationID
	}
	if !IsNil(o.Partner) {
		toSerialize["partner"] = o.Partner
	}
	if !IsNil(o.ProductID) {
		toSerialize["productID"] = o.ProductID
	}
	if !IsNil(o.ReportDate) {
		toSerialize["reportDate"] = o.ReportDate
	}
	if !IsNil(o.ReportType) {
		toSerialize["reportType"] = o.ReportType
	}
	if !IsNil(o.RevenueRecords) {
		toSerialize["revenueRecords"] = o.RevenueRecords
	}
	if !IsNil(o.Service) {
		toSerialize["service"] = o.Service
	}
	return toSerialize, nil
}

type NullableRevenueReport struct {
	value *RevenueReport
	isSet bool
}

func (v NullableRevenueReport) Get() *RevenueReport {
	return v.value
}

func (v *NullableRevenueReport) Set(val *RevenueReport) {
	v.value = val
	v.isSet = true
}

func (v NullableRevenueReport) IsSet() bool {
	return v.isSet
}

func (v *NullableRevenueReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRevenueReport(val *RevenueReport) *NullableRevenueReport {
	return &NullableRevenueReport{value: val, isSet: true}
}

func (v NullableRevenueReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRevenueReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


