/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
	"fmt"
)

// AzureMarketplaceProductType the model 'AzureMarketplaceProductType'
type AzureMarketplaceProductType string

// List of AzureMarketplaceProductType
const (
	AzureMarketplaceProductType_azureApplication                 AzureMarketplaceProductType = "azureApplication"
	AzureMarketplaceProductType_azureContainer                   AzureMarketplaceProductType = "azureContainer"
	AzureMarketplaceProductType_azureVirtualMachine              AzureMarketplaceProductType = "azureVirtualMachine"
	AzureMarketplaceProductType_consultingService                AzureMarketplaceProductType = "consultingService"
	AzureMarketplaceProductType_containerApp                     AzureMarketplaceProductType = "containerApp"
	AzureMarketplaceProductType_coreVirtualMachine               AzureMarketplaceProductType = "coreVirtualMachine"
	AzureMarketplaceProductType_cosellOnly                       AzureMarketplaceProductType = "cosellOnly"
	AzureMarketplaceProductType_dynamics365BusinessCentral       AzureMarketplaceProductType = "dynamics365BusinessCentral"
	AzureMarketplaceProductType_dynamics365ForCustomerEngagement AzureMarketplaceProductType = "dynamics365ForCustomerEngagement"
	AzureMarketplaceProductType_dynamics365ForOperations         AzureMarketplaceProductType = "dynamics365ForOperations"
	AzureMarketplaceProductType_iotEdgeModule                    AzureMarketplaceProductType = "iotEdgeModule"
	AzureMarketplaceProductType_managedService                   AzureMarketplaceProductType = "managedService"
	AzureMarketplaceProductType_powerBiApp                       AzureMarketplaceProductType = "powerBiApp"
	AzureMarketplaceProductType_powerBiVisual                    AzureMarketplaceProductType = "powerBiVisual"
	AzureMarketplaceProductType_softwareAsAService               AzureMarketplaceProductType = "softwareAsAService"
	AzureMarketplaceProductType_xbox360NonBackcompat             AzureMarketplaceProductType = "xbox360NonBackcompat"
)

// All allowed values of AzureMarketplaceProductType enum
var AllowedAzureMarketplaceProductTypeEnumValues = []AzureMarketplaceProductType{
	"azureApplication",
	"azureContainer",
	"azureVirtualMachine",
	"consultingService",
	"containerApp",
	"coreVirtualMachine",
	"cosellOnly",
	"dynamics365BusinessCentral",
	"dynamics365ForCustomerEngagement",
	"dynamics365ForOperations",
	"iotEdgeModule",
	"managedService",
	"powerBiApp",
	"powerBiVisual",
	"softwareAsAService",
	"xbox360NonBackcompat",
}

func (v *AzureMarketplaceProductType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AzureMarketplaceProductType(value)
	for _, existing := range AllowedAzureMarketplaceProductTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AzureMarketplaceProductType", value)
}

// NewAzureMarketplaceProductTypeFromValue returns a pointer to a valid AzureMarketplaceProductType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAzureMarketplaceProductTypeFromValue(v string) (*AzureMarketplaceProductType, error) {
	ev := AzureMarketplaceProductType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AzureMarketplaceProductType: valid values are %v", v, AllowedAzureMarketplaceProductTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AzureMarketplaceProductType) IsValid() bool {
	for _, existing := range AllowedAzureMarketplaceProductTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AzureMarketplaceProductType value
func (v AzureMarketplaceProductType) Ptr() *AzureMarketplaceProductType {
	return &v
}

type NullableAzureMarketplaceProductType struct {
	value *AzureMarketplaceProductType
	isSet bool
}

func (v NullableAzureMarketplaceProductType) Get() *AzureMarketplaceProductType {
	return v.value
}

func (v *NullableAzureMarketplaceProductType) Set(val *AzureMarketplaceProductType) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureMarketplaceProductType) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureMarketplaceProductType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureMarketplaceProductType(val *AzureMarketplaceProductType) *NullableAzureMarketplaceProductType {
	return &NullableAzureMarketplaceProductType{value: val, isSet: true}
}

func (v NullableAzureMarketplaceProductType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureMarketplaceProductType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
