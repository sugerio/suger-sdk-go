/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OrbPriceDiscountType the model 'OrbPriceDiscountType'
type OrbPriceDiscountType string

// List of OrbPriceDiscountType
const (
	OrbPriceDiscountType_PERCENTAGE OrbPriceDiscountType = "percentage"
	OrbPriceDiscountType_TRIAL OrbPriceDiscountType = "trial"
	OrbPriceDiscountType_USAGE OrbPriceDiscountType = "usage"
	OrbPriceDiscountType_AMOUNT OrbPriceDiscountType = "amount"
)

// All allowed values of OrbPriceDiscountType enum
var AllowedOrbPriceDiscountTypeEnumValues = []OrbPriceDiscountType{
	"percentage",
	"trial",
	"usage",
	"amount",
}

func (v *OrbPriceDiscountType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrbPriceDiscountType(value)
	for _, existing := range AllowedOrbPriceDiscountTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrbPriceDiscountType", value)
}

// NewOrbPriceDiscountTypeFromValue returns a pointer to a valid OrbPriceDiscountType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrbPriceDiscountTypeFromValue(v string) (*OrbPriceDiscountType, error) {
	ev := OrbPriceDiscountType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrbPriceDiscountType: valid values are %v", v, AllowedOrbPriceDiscountTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrbPriceDiscountType) IsValid() bool {
	for _, existing := range AllowedOrbPriceDiscountTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrbPriceDiscountType value
func (v OrbPriceDiscountType) Ptr() *OrbPriceDiscountType {
	return &v
}

type NullableOrbPriceDiscountType struct {
	value *OrbPriceDiscountType
	isSet bool
}

func (v NullableOrbPriceDiscountType) Get() *OrbPriceDiscountType {
	return v.value
}

func (v *NullableOrbPriceDiscountType) Set(val *OrbPriceDiscountType) {
	v.value = val
	v.isSet = true
}

func (v NullableOrbPriceDiscountType) IsSet() bool {
	return v.isSet
}

func (v *NullableOrbPriceDiscountType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrbPriceDiscountType(val *OrbPriceDiscountType) *NullableOrbPriceDiscountType {
	return &NullableOrbPriceDiscountType{value: val, isSet: true}
}

func (v NullableOrbPriceDiscountType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrbPriceDiscountType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

