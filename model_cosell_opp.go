/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CosellOpp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CosellOpp{}

// CosellOpp struct for CosellOpp
type CosellOpp struct {
	Id *string `json:"id,omitempty"`
	Info *CosellOppInfo `json:"info,omitempty"`
	Partner *Partner `json:"partner,omitempty"`
}

// NewCosellOpp instantiates a new CosellOpp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCosellOpp() *CosellOpp {
	this := CosellOpp{}
	return &this
}

// NewCosellOppWithDefaults instantiates a new CosellOpp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCosellOppWithDefaults() *CosellOpp {
	this := CosellOpp{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CosellOpp) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CosellOpp) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CosellOpp) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CosellOpp) SetId(v string) {
	o.Id = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *CosellOpp) GetInfo() CosellOppInfo {
	if o == nil || IsNil(o.Info) {
		var ret CosellOppInfo
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CosellOpp) GetInfoOk() (*CosellOppInfo, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *CosellOpp) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given CosellOppInfo and assigns it to the Info field.
func (o *CosellOpp) SetInfo(v CosellOppInfo) {
	o.Info = &v
}

// GetPartner returns the Partner field value if set, zero value otherwise.
func (o *CosellOpp) GetPartner() Partner {
	if o == nil || IsNil(o.Partner) {
		var ret Partner
		return ret
	}
	return *o.Partner
}

// GetPartnerOk returns a tuple with the Partner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CosellOpp) GetPartnerOk() (*Partner, bool) {
	if o == nil || IsNil(o.Partner) {
		return nil, false
	}
	return o.Partner, true
}

// HasPartner returns a boolean if a field has been set.
func (o *CosellOpp) HasPartner() bool {
	if o != nil && !IsNil(o.Partner) {
		return true
	}

	return false
}

// SetPartner gets a reference to the given Partner and assigns it to the Partner field.
func (o *CosellOpp) SetPartner(v Partner) {
	o.Partner = &v
}

func (o CosellOpp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CosellOpp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Info) {
		toSerialize["info"] = o.Info
	}
	if !IsNil(o.Partner) {
		toSerialize["partner"] = o.Partner
	}
	return toSerialize, nil
}

type NullableCosellOpp struct {
	value *CosellOpp
	isSet bool
}

func (v NullableCosellOpp) Get() *CosellOpp {
	return v.value
}

func (v *NullableCosellOpp) Set(val *CosellOpp) {
	v.value = val
	v.isSet = true
}

func (v NullableCosellOpp) IsSet() bool {
	return v.isSet
}

func (v *NullableCosellOpp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCosellOpp(val *CosellOpp) *NullableCosellOpp {
	return &NullableCosellOpp{value: val, isSet: true}
}

func (v NullableCosellOpp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCosellOpp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


