/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GcpMarketplaceUserAccountApproval type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GcpMarketplaceUserAccountApproval{}

// GcpMarketplaceUserAccountApproval struct for GcpMarketplaceUserAccountApproval
type GcpMarketplaceUserAccountApproval struct {
	Name *string `json:"name,omitempty"`
	// An explanation for the state of the approval.
	Reason *string `json:"reason,omitempty"`
	State *GcpMarketplaceUserAccountApprovalState `json:"state,omitempty"`
	// RFC3339 UTC timestamp
	UpdateTime *string `json:"updateTime,omitempty"`
}

// NewGcpMarketplaceUserAccountApproval instantiates a new GcpMarketplaceUserAccountApproval object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGcpMarketplaceUserAccountApproval() *GcpMarketplaceUserAccountApproval {
	this := GcpMarketplaceUserAccountApproval{}
	return &this
}

// NewGcpMarketplaceUserAccountApprovalWithDefaults instantiates a new GcpMarketplaceUserAccountApproval object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGcpMarketplaceUserAccountApprovalWithDefaults() *GcpMarketplaceUserAccountApproval {
	this := GcpMarketplaceUserAccountApproval{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GcpMarketplaceUserAccountApproval) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpMarketplaceUserAccountApproval) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GcpMarketplaceUserAccountApproval) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GcpMarketplaceUserAccountApproval) SetName(v string) {
	o.Name = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *GcpMarketplaceUserAccountApproval) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpMarketplaceUserAccountApproval) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *GcpMarketplaceUserAccountApproval) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *GcpMarketplaceUserAccountApproval) SetReason(v string) {
	o.Reason = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *GcpMarketplaceUserAccountApproval) GetState() GcpMarketplaceUserAccountApprovalState {
	if o == nil || IsNil(o.State) {
		var ret GcpMarketplaceUserAccountApprovalState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpMarketplaceUserAccountApproval) GetStateOk() (*GcpMarketplaceUserAccountApprovalState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *GcpMarketplaceUserAccountApproval) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given GcpMarketplaceUserAccountApprovalState and assigns it to the State field.
func (o *GcpMarketplaceUserAccountApproval) SetState(v GcpMarketplaceUserAccountApprovalState) {
	o.State = &v
}

// GetUpdateTime returns the UpdateTime field value if set, zero value otherwise.
func (o *GcpMarketplaceUserAccountApproval) GetUpdateTime() string {
	if o == nil || IsNil(o.UpdateTime) {
		var ret string
		return ret
	}
	return *o.UpdateTime
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpMarketplaceUserAccountApproval) GetUpdateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.UpdateTime) {
		return nil, false
	}
	return o.UpdateTime, true
}

// HasUpdateTime returns a boolean if a field has been set.
func (o *GcpMarketplaceUserAccountApproval) HasUpdateTime() bool {
	if o != nil && !IsNil(o.UpdateTime) {
		return true
	}

	return false
}

// SetUpdateTime gets a reference to the given string and assigns it to the UpdateTime field.
func (o *GcpMarketplaceUserAccountApproval) SetUpdateTime(v string) {
	o.UpdateTime = &v
}

func (o GcpMarketplaceUserAccountApproval) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GcpMarketplaceUserAccountApproval) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.UpdateTime) {
		toSerialize["updateTime"] = o.UpdateTime
	}
	return toSerialize, nil
}

type NullableGcpMarketplaceUserAccountApproval struct {
	value *GcpMarketplaceUserAccountApproval
	isSet bool
}

func (v NullableGcpMarketplaceUserAccountApproval) Get() *GcpMarketplaceUserAccountApproval {
	return v.value
}

func (v *NullableGcpMarketplaceUserAccountApproval) Set(val *GcpMarketplaceUserAccountApproval) {
	v.value = val
	v.isSet = true
}

func (v NullableGcpMarketplaceUserAccountApproval) IsSet() bool {
	return v.isSet
}

func (v *NullableGcpMarketplaceUserAccountApproval) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGcpMarketplaceUserAccountApproval(val *GcpMarketplaceUserAccountApproval) *NullableGcpMarketplaceUserAccountApproval {
	return &NullableGcpMarketplaceUserAccountApproval{value: val, isSet: true}
}

func (v NullableGcpMarketplaceUserAccountApproval) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGcpMarketplaceUserAccountApproval) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


