/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the CreateUsageRecordGroupParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateUsageRecordGroupParams{}

// CreateUsageRecordGroupParams struct for CreateUsageRecordGroupParams
type CreateUsageRecordGroupParams struct {
	// for usage metering API v2, don't use it together with the records v1.
	BillableRecords []MeteringUsageRecord `json:"billableRecords,omitempty"`
	EntitlementID   string                `json:"entitlementID"`
	// The uuid of the UsageRecordGroup (the size is up to 36 characters). Optional, if not provided, suger will generate one.
	Id *string `json:"id,omitempty"`
	// read-only, don't set it up when reporting the usage record group.
	MetaInfo       *MeteringUsageRecordGroupMetaInfo `json:"metaInfo,omitempty"`
	OrganizationID string                            `json:"organizationID"`
	// for usage metering API v1, don't use it together with the billableRecords v2.
	Records map[string]float32 `json:"records"`
	// The timestamp of when the usage records were generated. Optional, if not provided, the current report timestamp will be used. This is not the timestamp of when the usage records were reported to Suger.
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

type _CreateUsageRecordGroupParams CreateUsageRecordGroupParams

// NewCreateUsageRecordGroupParams instantiates a new CreateUsageRecordGroupParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateUsageRecordGroupParams(entitlementID string, organizationID string, records map[string]float32) *CreateUsageRecordGroupParams {
	this := CreateUsageRecordGroupParams{}
	this.EntitlementID = entitlementID
	this.OrganizationID = organizationID
	this.Records = records
	return &this
}

// NewCreateUsageRecordGroupParamsWithDefaults instantiates a new CreateUsageRecordGroupParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateUsageRecordGroupParamsWithDefaults() *CreateUsageRecordGroupParams {
	this := CreateUsageRecordGroupParams{}
	return &this
}

// GetBillableRecords returns the BillableRecords field value if set, zero value otherwise.
func (o *CreateUsageRecordGroupParams) GetBillableRecords() []MeteringUsageRecord {
	if o == nil || IsNil(o.BillableRecords) {
		var ret []MeteringUsageRecord
		return ret
	}
	return o.BillableRecords
}

// GetBillableRecordsOk returns a tuple with the BillableRecords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUsageRecordGroupParams) GetBillableRecordsOk() ([]MeteringUsageRecord, bool) {
	if o == nil || IsNil(o.BillableRecords) {
		return nil, false
	}
	return o.BillableRecords, true
}

// HasBillableRecords returns a boolean if a field has been set.
func (o *CreateUsageRecordGroupParams) HasBillableRecords() bool {
	if o != nil && !IsNil(o.BillableRecords) {
		return true
	}

	return false
}

// SetBillableRecords gets a reference to the given []MeteringUsageRecord and assigns it to the BillableRecords field.
func (o *CreateUsageRecordGroupParams) SetBillableRecords(v []MeteringUsageRecord) {
	o.BillableRecords = v
}

// GetEntitlementID returns the EntitlementID field value
func (o *CreateUsageRecordGroupParams) GetEntitlementID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntitlementID
}

// GetEntitlementIDOk returns a tuple with the EntitlementID field value
// and a boolean to check if the value has been set.
func (o *CreateUsageRecordGroupParams) GetEntitlementIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntitlementID, true
}

// SetEntitlementID sets field value
func (o *CreateUsageRecordGroupParams) SetEntitlementID(v string) {
	o.EntitlementID = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CreateUsageRecordGroupParams) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUsageRecordGroupParams) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CreateUsageRecordGroupParams) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CreateUsageRecordGroupParams) SetId(v string) {
	o.Id = &v
}

// GetMetaInfo returns the MetaInfo field value if set, zero value otherwise.
func (o *CreateUsageRecordGroupParams) GetMetaInfo() MeteringUsageRecordGroupMetaInfo {
	if o == nil || IsNil(o.MetaInfo) {
		var ret MeteringUsageRecordGroupMetaInfo
		return ret
	}
	return *o.MetaInfo
}

// GetMetaInfoOk returns a tuple with the MetaInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUsageRecordGroupParams) GetMetaInfoOk() (*MeteringUsageRecordGroupMetaInfo, bool) {
	if o == nil || IsNil(o.MetaInfo) {
		return nil, false
	}
	return o.MetaInfo, true
}

// HasMetaInfo returns a boolean if a field has been set.
func (o *CreateUsageRecordGroupParams) HasMetaInfo() bool {
	if o != nil && !IsNil(o.MetaInfo) {
		return true
	}

	return false
}

// SetMetaInfo gets a reference to the given MeteringUsageRecordGroupMetaInfo and assigns it to the MetaInfo field.
func (o *CreateUsageRecordGroupParams) SetMetaInfo(v MeteringUsageRecordGroupMetaInfo) {
	o.MetaInfo = &v
}

// GetOrganizationID returns the OrganizationID field value
func (o *CreateUsageRecordGroupParams) GetOrganizationID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrganizationID
}

// GetOrganizationIDOk returns a tuple with the OrganizationID field value
// and a boolean to check if the value has been set.
func (o *CreateUsageRecordGroupParams) GetOrganizationIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrganizationID, true
}

// SetOrganizationID sets field value
func (o *CreateUsageRecordGroupParams) SetOrganizationID(v string) {
	o.OrganizationID = v
}

// GetRecords returns the Records field value
func (o *CreateUsageRecordGroupParams) GetRecords() map[string]float32 {
	if o == nil {
		var ret map[string]float32
		return ret
	}

	return o.Records
}

// GetRecordsOk returns a tuple with the Records field value
// and a boolean to check if the value has been set.
func (o *CreateUsageRecordGroupParams) GetRecordsOk() (*map[string]float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Records, true
}

// SetRecords sets field value
func (o *CreateUsageRecordGroupParams) SetRecords(v map[string]float32) {
	o.Records = v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *CreateUsageRecordGroupParams) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUsageRecordGroupParams) GetTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *CreateUsageRecordGroupParams) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *CreateUsageRecordGroupParams) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

func (o CreateUsageRecordGroupParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateUsageRecordGroupParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BillableRecords) {
		toSerialize["billableRecords"] = o.BillableRecords
	}
	toSerialize["entitlementID"] = o.EntitlementID
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.MetaInfo) {
		toSerialize["metaInfo"] = o.MetaInfo
	}
	toSerialize["organizationID"] = o.OrganizationID
	toSerialize["records"] = o.Records
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	return toSerialize, nil
}

func (o *CreateUsageRecordGroupParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"entitlementID",
		"organizationID",
		"records",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateUsageRecordGroupParams := _CreateUsageRecordGroupParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateUsageRecordGroupParams)

	if err != nil {
		return err
	}

	*o = CreateUsageRecordGroupParams(varCreateUsageRecordGroupParams)

	return err
}

type NullableCreateUsageRecordGroupParams struct {
	value *CreateUsageRecordGroupParams
	isSet bool
}

func (v NullableCreateUsageRecordGroupParams) Get() *CreateUsageRecordGroupParams {
	return v.value
}

func (v *NullableCreateUsageRecordGroupParams) Set(val *CreateUsageRecordGroupParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateUsageRecordGroupParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateUsageRecordGroupParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateUsageRecordGroupParams(val *CreateUsageRecordGroupParams) *NullableCreateUsageRecordGroupParams {
	return &NullableCreateUsageRecordGroupParams{value: val, isSet: true}
}

func (v NullableCreateUsageRecordGroupParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateUsageRecordGroupParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
