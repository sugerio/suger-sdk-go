/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
	"fmt"
)

// GcpMarketplacePriceModel the model 'GcpMarketplacePriceModel'
type GcpMarketplacePriceModel string

// List of GcpMarketplacePriceModel
const (
	GcpMarketplacePriceModel_FREE                    GcpMarketplacePriceModel = "FREE"
	GcpMarketplacePriceModel_SUBSCRIPTION            GcpMarketplacePriceModel = "SUBSCRIPTION"
	GcpMarketplacePriceModel_USAGE                   GcpMarketplacePriceModel = "USAGE"
	GcpMarketplacePriceModel_SUBSCRIPTION_PLUS_USAGE GcpMarketplacePriceModel = "SUBSCRIPTION_PLUS_USAGE"
)

// All allowed values of GcpMarketplacePriceModel enum
var AllowedGcpMarketplacePriceModelEnumValues = []GcpMarketplacePriceModel{
	"FREE",
	"SUBSCRIPTION",
	"USAGE",
	"SUBSCRIPTION_PLUS_USAGE",
}

func (v *GcpMarketplacePriceModel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GcpMarketplacePriceModel(value)
	for _, existing := range AllowedGcpMarketplacePriceModelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GcpMarketplacePriceModel", value)
}

// NewGcpMarketplacePriceModelFromValue returns a pointer to a valid GcpMarketplacePriceModel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGcpMarketplacePriceModelFromValue(v string) (*GcpMarketplacePriceModel, error) {
	ev := GcpMarketplacePriceModel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GcpMarketplacePriceModel: valid values are %v", v, AllowedGcpMarketplacePriceModelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GcpMarketplacePriceModel) IsValid() bool {
	for _, existing := range AllowedGcpMarketplacePriceModelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GcpMarketplacePriceModel value
func (v GcpMarketplacePriceModel) Ptr() *GcpMarketplacePriceModel {
	return &v
}

type NullableGcpMarketplacePriceModel struct {
	value *GcpMarketplacePriceModel
	isSet bool
}

func (v NullableGcpMarketplacePriceModel) Get() *GcpMarketplacePriceModel {
	return v.value
}

func (v *NullableGcpMarketplacePriceModel) Set(val *GcpMarketplacePriceModel) {
	v.value = val
	v.isSet = true
}

func (v NullableGcpMarketplacePriceModel) IsSet() bool {
	return v.isSet
}

func (v *NullableGcpMarketplacePriceModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGcpMarketplacePriceModel(val *GcpMarketplacePriceModel) *NullableGcpMarketplacePriceModel {
	return &NullableGcpMarketplacePriceModel{value: val, isSet: true}
}

func (v NullableGcpMarketplacePriceModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGcpMarketplacePriceModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
