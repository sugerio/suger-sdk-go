/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the GetRevenueReportParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetRevenueReportParams{}

// GetRevenueReportParams struct for GetRevenueReportParams
type GetRevenueReportParams struct {
	// Optional, if available, return the report for the Buyer.
	BuyerID *string `json:"buyerID,omitempty"`
	// Optional, if available, return the report for the Entitlement.
	EntitlementID *string `json:"entitlementID,omitempty"`
	// Required. If the productID & entitlementID are emtpy, return the report for the entire Organization.
	OrganizationID string `json:"organizationID"`
	Partner        string `json:"partner"`
	// Optional, if available, return the report for the Product.
	ProductID  *string           `json:"productID,omitempty"`
	ReportType RevenueReportType `json:"reportType"`
	Service    string            `json:"service"`
}

type _GetRevenueReportParams GetRevenueReportParams

// NewGetRevenueReportParams instantiates a new GetRevenueReportParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetRevenueReportParams(organizationID string, partner string, reportType RevenueReportType, service string) *GetRevenueReportParams {
	this := GetRevenueReportParams{}
	this.OrganizationID = organizationID
	this.Partner = partner
	this.ReportType = reportType
	this.Service = service
	return &this
}

// NewGetRevenueReportParamsWithDefaults instantiates a new GetRevenueReportParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetRevenueReportParamsWithDefaults() *GetRevenueReportParams {
	this := GetRevenueReportParams{}
	return &this
}

// GetBuyerID returns the BuyerID field value if set, zero value otherwise.
func (o *GetRevenueReportParams) GetBuyerID() string {
	if o == nil || IsNil(o.BuyerID) {
		var ret string
		return ret
	}
	return *o.BuyerID
}

// GetBuyerIDOk returns a tuple with the BuyerID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRevenueReportParams) GetBuyerIDOk() (*string, bool) {
	if o == nil || IsNil(o.BuyerID) {
		return nil, false
	}
	return o.BuyerID, true
}

// HasBuyerID returns a boolean if a field has been set.
func (o *GetRevenueReportParams) HasBuyerID() bool {
	if o != nil && !IsNil(o.BuyerID) {
		return true
	}

	return false
}

// SetBuyerID gets a reference to the given string and assigns it to the BuyerID field.
func (o *GetRevenueReportParams) SetBuyerID(v string) {
	o.BuyerID = &v
}

// GetEntitlementID returns the EntitlementID field value if set, zero value otherwise.
func (o *GetRevenueReportParams) GetEntitlementID() string {
	if o == nil || IsNil(o.EntitlementID) {
		var ret string
		return ret
	}
	return *o.EntitlementID
}

// GetEntitlementIDOk returns a tuple with the EntitlementID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRevenueReportParams) GetEntitlementIDOk() (*string, bool) {
	if o == nil || IsNil(o.EntitlementID) {
		return nil, false
	}
	return o.EntitlementID, true
}

// HasEntitlementID returns a boolean if a field has been set.
func (o *GetRevenueReportParams) HasEntitlementID() bool {
	if o != nil && !IsNil(o.EntitlementID) {
		return true
	}

	return false
}

// SetEntitlementID gets a reference to the given string and assigns it to the EntitlementID field.
func (o *GetRevenueReportParams) SetEntitlementID(v string) {
	o.EntitlementID = &v
}

// GetOrganizationID returns the OrganizationID field value
func (o *GetRevenueReportParams) GetOrganizationID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrganizationID
}

// GetOrganizationIDOk returns a tuple with the OrganizationID field value
// and a boolean to check if the value has been set.
func (o *GetRevenueReportParams) GetOrganizationIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrganizationID, true
}

// SetOrganizationID sets field value
func (o *GetRevenueReportParams) SetOrganizationID(v string) {
	o.OrganizationID = v
}

// GetPartner returns the Partner field value
func (o *GetRevenueReportParams) GetPartner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Partner
}

// GetPartnerOk returns a tuple with the Partner field value
// and a boolean to check if the value has been set.
func (o *GetRevenueReportParams) GetPartnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Partner, true
}

// SetPartner sets field value
func (o *GetRevenueReportParams) SetPartner(v string) {
	o.Partner = v
}

// GetProductID returns the ProductID field value if set, zero value otherwise.
func (o *GetRevenueReportParams) GetProductID() string {
	if o == nil || IsNil(o.ProductID) {
		var ret string
		return ret
	}
	return *o.ProductID
}

// GetProductIDOk returns a tuple with the ProductID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRevenueReportParams) GetProductIDOk() (*string, bool) {
	if o == nil || IsNil(o.ProductID) {
		return nil, false
	}
	return o.ProductID, true
}

// HasProductID returns a boolean if a field has been set.
func (o *GetRevenueReportParams) HasProductID() bool {
	if o != nil && !IsNil(o.ProductID) {
		return true
	}

	return false
}

// SetProductID gets a reference to the given string and assigns it to the ProductID field.
func (o *GetRevenueReportParams) SetProductID(v string) {
	o.ProductID = &v
}

// GetReportType returns the ReportType field value
func (o *GetRevenueReportParams) GetReportType() RevenueReportType {
	if o == nil {
		var ret RevenueReportType
		return ret
	}

	return o.ReportType
}

// GetReportTypeOk returns a tuple with the ReportType field value
// and a boolean to check if the value has been set.
func (o *GetRevenueReportParams) GetReportTypeOk() (*RevenueReportType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReportType, true
}

// SetReportType sets field value
func (o *GetRevenueReportParams) SetReportType(v RevenueReportType) {
	o.ReportType = v
}

// GetService returns the Service field value
func (o *GetRevenueReportParams) GetService() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Service
}

// GetServiceOk returns a tuple with the Service field value
// and a boolean to check if the value has been set.
func (o *GetRevenueReportParams) GetServiceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Service, true
}

// SetService sets field value
func (o *GetRevenueReportParams) SetService(v string) {
	o.Service = v
}

func (o GetRevenueReportParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetRevenueReportParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BuyerID) {
		toSerialize["buyerID"] = o.BuyerID
	}
	if !IsNil(o.EntitlementID) {
		toSerialize["entitlementID"] = o.EntitlementID
	}
	toSerialize["organizationID"] = o.OrganizationID
	toSerialize["partner"] = o.Partner
	if !IsNil(o.ProductID) {
		toSerialize["productID"] = o.ProductID
	}
	toSerialize["reportType"] = o.ReportType
	toSerialize["service"] = o.Service
	return toSerialize, nil
}

func (o *GetRevenueReportParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"organizationID",
		"partner",
		"reportType",
		"service",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetRevenueReportParams := _GetRevenueReportParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetRevenueReportParams)

	if err != nil {
		return err
	}

	*o = GetRevenueReportParams(varGetRevenueReportParams)

	return err
}

type NullableGetRevenueReportParams struct {
	value *GetRevenueReportParams
	isSet bool
}

func (v NullableGetRevenueReportParams) Get() *GetRevenueReportParams {
	return v.value
}

func (v *NullableGetRevenueReportParams) Set(val *GetRevenueReportParams) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRevenueReportParams) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRevenueReportParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRevenueReportParams(val *GetRevenueReportParams) *NullableGetRevenueReportParams {
	return &NullableGetRevenueReportParams{value: val, isSet: true}
}

func (v NullableGetRevenueReportParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRevenueReportParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
