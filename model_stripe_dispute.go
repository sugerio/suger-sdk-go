/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the StripeDispute type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StripeDispute{}

// StripeDispute struct for StripeDispute
type StripeDispute struct {
	// Disputed amount. Usually the amount of the charge, but it can differ (usually because of currency fluctuation or because only part of the order is disputed).
	Amount *int32 `json:"amount,omitempty"`
	// ID of the charge that's disputed.
	ChargeId *string `json:"chargeId,omitempty"`
	// Time at which the object was created. Measured in seconds since the Unix epoch.
	Created *int32 `json:"created,omitempty"`
	// Unique identifier for the object.
	Id *string `json:"id,omitempty"`
	// If true, it's still possible to refund the disputed payment. After the payment has been fully refunded, no further funds are withdrawn from your Stripe account as a result of this dispute.
	IsChargeRefundable *bool `json:"is_charge_refundable,omitempty"`
	// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
	Livemode *bool `json:"livemode,omitempty"`
	// ID of the PaymentIntent that's disputed.
	PaymentIntentId *string `json:"paymentIntentId,omitempty"`
	// Reason given by cardholder for dispute. Possible values are `bank_cannot_process`, `check_returned`, `credit_not_processed`, `customer_initiated`, `debit_not_authorized`, `duplicate`, `fraudulent`, `general`, `incorrect_account_details`, `insufficient_funds`, `product_not_received`, `product_unacceptable`, `subscription_canceled`, or `unrecognized`. Learn more about [dispute reasons](https://stripe.com/docs/disputes/categories).
	Reason *string `json:"reason,omitempty"`
	// Current status of dispute. Possible values are `warning_needs_response`, `warning_under_review`, `warning_closed`, `needs_response`, `under_review`, `won`, or `lost`.
	Status *string `json:"status,omitempty"`
}

// NewStripeDispute instantiates a new StripeDispute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStripeDispute() *StripeDispute {
	this := StripeDispute{}
	return &this
}

// NewStripeDisputeWithDefaults instantiates a new StripeDispute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStripeDisputeWithDefaults() *StripeDispute {
	this := StripeDispute{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *StripeDispute) GetAmount() int32 {
	if o == nil || IsNil(o.Amount) {
		var ret int32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeDispute) GetAmountOk() (*int32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *StripeDispute) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given int32 and assigns it to the Amount field.
func (o *StripeDispute) SetAmount(v int32) {
	o.Amount = &v
}

// GetChargeId returns the ChargeId field value if set, zero value otherwise.
func (o *StripeDispute) GetChargeId() string {
	if o == nil || IsNil(o.ChargeId) {
		var ret string
		return ret
	}
	return *o.ChargeId
}

// GetChargeIdOk returns a tuple with the ChargeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeDispute) GetChargeIdOk() (*string, bool) {
	if o == nil || IsNil(o.ChargeId) {
		return nil, false
	}
	return o.ChargeId, true
}

// HasChargeId returns a boolean if a field has been set.
func (o *StripeDispute) HasChargeId() bool {
	if o != nil && !IsNil(o.ChargeId) {
		return true
	}

	return false
}

// SetChargeId gets a reference to the given string and assigns it to the ChargeId field.
func (o *StripeDispute) SetChargeId(v string) {
	o.ChargeId = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *StripeDispute) GetCreated() int32 {
	if o == nil || IsNil(o.Created) {
		var ret int32
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeDispute) GetCreatedOk() (*int32, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *StripeDispute) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given int32 and assigns it to the Created field.
func (o *StripeDispute) SetCreated(v int32) {
	o.Created = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *StripeDispute) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeDispute) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *StripeDispute) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *StripeDispute) SetId(v string) {
	o.Id = &v
}

// GetIsChargeRefundable returns the IsChargeRefundable field value if set, zero value otherwise.
func (o *StripeDispute) GetIsChargeRefundable() bool {
	if o == nil || IsNil(o.IsChargeRefundable) {
		var ret bool
		return ret
	}
	return *o.IsChargeRefundable
}

// GetIsChargeRefundableOk returns a tuple with the IsChargeRefundable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeDispute) GetIsChargeRefundableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsChargeRefundable) {
		return nil, false
	}
	return o.IsChargeRefundable, true
}

// HasIsChargeRefundable returns a boolean if a field has been set.
func (o *StripeDispute) HasIsChargeRefundable() bool {
	if o != nil && !IsNil(o.IsChargeRefundable) {
		return true
	}

	return false
}

// SetIsChargeRefundable gets a reference to the given bool and assigns it to the IsChargeRefundable field.
func (o *StripeDispute) SetIsChargeRefundable(v bool) {
	o.IsChargeRefundable = &v
}

// GetLivemode returns the Livemode field value if set, zero value otherwise.
func (o *StripeDispute) GetLivemode() bool {
	if o == nil || IsNil(o.Livemode) {
		var ret bool
		return ret
	}
	return *o.Livemode
}

// GetLivemodeOk returns a tuple with the Livemode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeDispute) GetLivemodeOk() (*bool, bool) {
	if o == nil || IsNil(o.Livemode) {
		return nil, false
	}
	return o.Livemode, true
}

// HasLivemode returns a boolean if a field has been set.
func (o *StripeDispute) HasLivemode() bool {
	if o != nil && !IsNil(o.Livemode) {
		return true
	}

	return false
}

// SetLivemode gets a reference to the given bool and assigns it to the Livemode field.
func (o *StripeDispute) SetLivemode(v bool) {
	o.Livemode = &v
}

// GetPaymentIntentId returns the PaymentIntentId field value if set, zero value otherwise.
func (o *StripeDispute) GetPaymentIntentId() string {
	if o == nil || IsNil(o.PaymentIntentId) {
		var ret string
		return ret
	}
	return *o.PaymentIntentId
}

// GetPaymentIntentIdOk returns a tuple with the PaymentIntentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeDispute) GetPaymentIntentIdOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentIntentId) {
		return nil, false
	}
	return o.PaymentIntentId, true
}

// HasPaymentIntentId returns a boolean if a field has been set.
func (o *StripeDispute) HasPaymentIntentId() bool {
	if o != nil && !IsNil(o.PaymentIntentId) {
		return true
	}

	return false
}

// SetPaymentIntentId gets a reference to the given string and assigns it to the PaymentIntentId field.
func (o *StripeDispute) SetPaymentIntentId(v string) {
	o.PaymentIntentId = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *StripeDispute) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeDispute) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *StripeDispute) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *StripeDispute) SetReason(v string) {
	o.Reason = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *StripeDispute) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeDispute) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *StripeDispute) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *StripeDispute) SetStatus(v string) {
	o.Status = &v
}

func (o StripeDispute) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StripeDispute) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.ChargeId) {
		toSerialize["chargeId"] = o.ChargeId
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IsChargeRefundable) {
		toSerialize["is_charge_refundable"] = o.IsChargeRefundable
	}
	if !IsNil(o.Livemode) {
		toSerialize["livemode"] = o.Livemode
	}
	if !IsNil(o.PaymentIntentId) {
		toSerialize["paymentIntentId"] = o.PaymentIntentId
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableStripeDispute struct {
	value *StripeDispute
	isSet bool
}

func (v NullableStripeDispute) Get() *StripeDispute {
	return v.value
}

func (v *NullableStripeDispute) Set(val *StripeDispute) {
	v.value = val
	v.isSet = true
}

func (v NullableStripeDispute) IsSet() bool {
	return v.isSet
}

func (v *NullableStripeDispute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStripeDispute(val *StripeDispute) *NullableStripeDispute {
	return &NullableStripeDispute{value: val, isSet: true}
}

func (v NullableStripeDispute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStripeDispute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
