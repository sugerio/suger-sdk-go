/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
)

// checks if the AwsMarketplaceCppoOpportunityNegativeTargeting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsMarketplaceCppoOpportunityNegativeTargeting{}

// AwsMarketplaceCppoOpportunityNegativeTargeting struct for AwsMarketplaceCppoOpportunityNegativeTargeting
type AwsMarketplaceCppoOpportunityNegativeTargeting struct {
	CountryCodes []string `json:"CountryCodes,omitempty"`
}

// NewAwsMarketplaceCppoOpportunityNegativeTargeting instantiates a new AwsMarketplaceCppoOpportunityNegativeTargeting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsMarketplaceCppoOpportunityNegativeTargeting() *AwsMarketplaceCppoOpportunityNegativeTargeting {
	this := AwsMarketplaceCppoOpportunityNegativeTargeting{}
	return &this
}

// NewAwsMarketplaceCppoOpportunityNegativeTargetingWithDefaults instantiates a new AwsMarketplaceCppoOpportunityNegativeTargeting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsMarketplaceCppoOpportunityNegativeTargetingWithDefaults() *AwsMarketplaceCppoOpportunityNegativeTargeting {
	this := AwsMarketplaceCppoOpportunityNegativeTargeting{}
	return &this
}

// GetCountryCodes returns the CountryCodes field value if set, zero value otherwise.
func (o *AwsMarketplaceCppoOpportunityNegativeTargeting) GetCountryCodes() []string {
	if o == nil || IsNil(o.CountryCodes) {
		var ret []string
		return ret
	}
	return o.CountryCodes
}

// GetCountryCodesOk returns a tuple with the CountryCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsMarketplaceCppoOpportunityNegativeTargeting) GetCountryCodesOk() ([]string, bool) {
	if o == nil || IsNil(o.CountryCodes) {
		return nil, false
	}
	return o.CountryCodes, true
}

// HasCountryCodes returns a boolean if a field has been set.
func (o *AwsMarketplaceCppoOpportunityNegativeTargeting) HasCountryCodes() bool {
	if o != nil && !IsNil(o.CountryCodes) {
		return true
	}

	return false
}

// SetCountryCodes gets a reference to the given []string and assigns it to the CountryCodes field.
func (o *AwsMarketplaceCppoOpportunityNegativeTargeting) SetCountryCodes(v []string) {
	o.CountryCodes = v
}

func (o AwsMarketplaceCppoOpportunityNegativeTargeting) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsMarketplaceCppoOpportunityNegativeTargeting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CountryCodes) {
		toSerialize["CountryCodes"] = o.CountryCodes
	}
	return toSerialize, nil
}

type NullableAwsMarketplaceCppoOpportunityNegativeTargeting struct {
	value *AwsMarketplaceCppoOpportunityNegativeTargeting
	isSet bool
}

func (v NullableAwsMarketplaceCppoOpportunityNegativeTargeting) Get() *AwsMarketplaceCppoOpportunityNegativeTargeting {
	return v.value
}

func (v *NullableAwsMarketplaceCppoOpportunityNegativeTargeting) Set(val *AwsMarketplaceCppoOpportunityNegativeTargeting) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsMarketplaceCppoOpportunityNegativeTargeting) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsMarketplaceCppoOpportunityNegativeTargeting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsMarketplaceCppoOpportunityNegativeTargeting(val *AwsMarketplaceCppoOpportunityNegativeTargeting) *NullableAwsMarketplaceCppoOpportunityNegativeTargeting {
	return &NullableAwsMarketplaceCppoOpportunityNegativeTargeting{value: val, isSet: true}
}

func (v NullableAwsMarketplaceCppoOpportunityNegativeTargeting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsMarketplaceCppoOpportunityNegativeTargeting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
