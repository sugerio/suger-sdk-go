/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
	"fmt"
)

// BillingInvoiceType the model 'BillingInvoiceType'
type BillingInvoiceType string

// List of BillingInvoiceType
const (
	BillingInvoiceType_COMMIT      BillingInvoiceType = "COMMIT"
	BillingInvoiceType_USAGE       BillingInvoiceType = "USAGE"
	BillingInvoiceType_ADDON       BillingInvoiceType = "ADDON"
	BillingInvoiceType_INSTALLMENT BillingInvoiceType = "INSTALLMENT"
)

// All allowed values of BillingInvoiceType enum
var AllowedBillingInvoiceTypeEnumValues = []BillingInvoiceType{
	"COMMIT",
	"USAGE",
	"ADDON",
	"INSTALLMENT",
}

func (v *BillingInvoiceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BillingInvoiceType(value)
	for _, existing := range AllowedBillingInvoiceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BillingInvoiceType", value)
}

// NewBillingInvoiceTypeFromValue returns a pointer to a valid BillingInvoiceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBillingInvoiceTypeFromValue(v string) (*BillingInvoiceType, error) {
	ev := BillingInvoiceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BillingInvoiceType: valid values are %v", v, AllowedBillingInvoiceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BillingInvoiceType) IsValid() bool {
	for _, existing := range AllowedBillingInvoiceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BillingInvoiceType value
func (v BillingInvoiceType) Ptr() *BillingInvoiceType {
	return &v
}

type NullableBillingInvoiceType struct {
	value *BillingInvoiceType
	isSet bool
}

func (v NullableBillingInvoiceType) Get() *BillingInvoiceType {
	return v.value
}

func (v *NullableBillingInvoiceType) Set(val *BillingInvoiceType) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingInvoiceType) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingInvoiceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingInvoiceType(val *BillingInvoiceType) *NullableBillingInvoiceType {
	return &NullableBillingInvoiceType{value: val, isSet: true}
}

func (v NullableBillingInvoiceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingInvoiceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
