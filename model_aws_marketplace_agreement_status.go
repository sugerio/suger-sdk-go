/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AwsMarketplaceAgreementStatus the model 'AwsMarketplaceAgreementStatus'
type AwsMarketplaceAgreementStatus string

// List of AwsMarketplaceAgreementStatus
const (
	AwsMarketplaceAgreementStatus_ACTIVE      AwsMarketplaceAgreementStatus = "ACTIVE"
	AwsMarketplaceAgreementStatus_ARCHIVED    AwsMarketplaceAgreementStatus = "ARCHIVED"
	AwsMarketplaceAgreementStatus_CANCELLED   AwsMarketplaceAgreementStatus = "CANCELLED"
	AwsMarketplaceAgreementStatus_EXPIRED     AwsMarketplaceAgreementStatus = "EXPIRED"
	AwsMarketplaceAgreementStatus_RENEWED     AwsMarketplaceAgreementStatus = "RENEWED"
	AwsMarketplaceAgreementStatus_REPLACED    AwsMarketplaceAgreementStatus = "REPLACED"
	AwsMarketplaceAgreementStatus_ROLLED_BACK AwsMarketplaceAgreementStatus = "ROLLED_BACK"
	AwsMarketplaceAgreementStatus_SUPERSEDED  AwsMarketplaceAgreementStatus = "SUPERSEDED"
	AwsMarketplaceAgreementStatus_TERMINATED  AwsMarketplaceAgreementStatus = "TERMINATED"
)

// All allowed values of AwsMarketplaceAgreementStatus enum
var AllowedAwsMarketplaceAgreementStatusEnumValues = []AwsMarketplaceAgreementStatus{
	"ACTIVE",
	"ARCHIVED",
	"CANCELLED",
	"EXPIRED",
	"RENEWED",
	"REPLACED",
	"ROLLED_BACK",
	"SUPERSEDED",
	"TERMINATED",
}

func (v *AwsMarketplaceAgreementStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AwsMarketplaceAgreementStatus(value)
	for _, existing := range AllowedAwsMarketplaceAgreementStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AwsMarketplaceAgreementStatus", value)
}

// NewAwsMarketplaceAgreementStatusFromValue returns a pointer to a valid AwsMarketplaceAgreementStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAwsMarketplaceAgreementStatusFromValue(v string) (*AwsMarketplaceAgreementStatus, error) {
	ev := AwsMarketplaceAgreementStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AwsMarketplaceAgreementStatus: valid values are %v", v, AllowedAwsMarketplaceAgreementStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AwsMarketplaceAgreementStatus) IsValid() bool {
	for _, existing := range AllowedAwsMarketplaceAgreementStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AwsMarketplaceAgreementStatus value
func (v AwsMarketplaceAgreementStatus) Ptr() *AwsMarketplaceAgreementStatus {
	return &v
}

type NullableAwsMarketplaceAgreementStatus struct {
	value *AwsMarketplaceAgreementStatus
	isSet bool
}

func (v NullableAwsMarketplaceAgreementStatus) Get() *AwsMarketplaceAgreementStatus {
	return v.value
}

func (v *NullableAwsMarketplaceAgreementStatus) Set(val *AwsMarketplaceAgreementStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsMarketplaceAgreementStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsMarketplaceAgreementStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsMarketplaceAgreementStatus(val *AwsMarketplaceAgreementStatus) *NullableAwsMarketplaceAgreementStatus {
	return &NullableAwsMarketplaceAgreementStatus{value: val, isSet: true}
}

func (v NullableAwsMarketplaceAgreementStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsMarketplaceAgreementStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
