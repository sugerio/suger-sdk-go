/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the StripeRefundDestinationDetailsCard type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StripeRefundDestinationDetailsCard{}

// StripeRefundDestinationDetailsCard struct for StripeRefundDestinationDetailsCard
type StripeRefundDestinationDetailsCard struct {
	// Value of the reference number assigned to the refund.
	Reference *string `json:"reference,omitempty"`
	// Status of the reference number on the refund. This can be `pending`, `available` or `unavailable`.
	ReferenceStatus *string `json:"reference_status,omitempty"`
	// Type of the reference number assigned to the refund.
	ReferenceType *string `json:"reference_type,omitempty"`
	// The type of refund. This can be `refund`, `reversal`, or `pending`.
	Type *string `json:"type,omitempty"`
}

// NewStripeRefundDestinationDetailsCard instantiates a new StripeRefundDestinationDetailsCard object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStripeRefundDestinationDetailsCard() *StripeRefundDestinationDetailsCard {
	this := StripeRefundDestinationDetailsCard{}
	return &this
}

// NewStripeRefundDestinationDetailsCardWithDefaults instantiates a new StripeRefundDestinationDetailsCard object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStripeRefundDestinationDetailsCardWithDefaults() *StripeRefundDestinationDetailsCard {
	this := StripeRefundDestinationDetailsCard{}
	return &this
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *StripeRefundDestinationDetailsCard) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeRefundDestinationDetailsCard) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *StripeRefundDestinationDetailsCard) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *StripeRefundDestinationDetailsCard) SetReference(v string) {
	o.Reference = &v
}

// GetReferenceStatus returns the ReferenceStatus field value if set, zero value otherwise.
func (o *StripeRefundDestinationDetailsCard) GetReferenceStatus() string {
	if o == nil || IsNil(o.ReferenceStatus) {
		var ret string
		return ret
	}
	return *o.ReferenceStatus
}

// GetReferenceStatusOk returns a tuple with the ReferenceStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeRefundDestinationDetailsCard) GetReferenceStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ReferenceStatus) {
		return nil, false
	}
	return o.ReferenceStatus, true
}

// HasReferenceStatus returns a boolean if a field has been set.
func (o *StripeRefundDestinationDetailsCard) HasReferenceStatus() bool {
	if o != nil && !IsNil(o.ReferenceStatus) {
		return true
	}

	return false
}

// SetReferenceStatus gets a reference to the given string and assigns it to the ReferenceStatus field.
func (o *StripeRefundDestinationDetailsCard) SetReferenceStatus(v string) {
	o.ReferenceStatus = &v
}

// GetReferenceType returns the ReferenceType field value if set, zero value otherwise.
func (o *StripeRefundDestinationDetailsCard) GetReferenceType() string {
	if o == nil || IsNil(o.ReferenceType) {
		var ret string
		return ret
	}
	return *o.ReferenceType
}

// GetReferenceTypeOk returns a tuple with the ReferenceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeRefundDestinationDetailsCard) GetReferenceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ReferenceType) {
		return nil, false
	}
	return o.ReferenceType, true
}

// HasReferenceType returns a boolean if a field has been set.
func (o *StripeRefundDestinationDetailsCard) HasReferenceType() bool {
	if o != nil && !IsNil(o.ReferenceType) {
		return true
	}

	return false
}

// SetReferenceType gets a reference to the given string and assigns it to the ReferenceType field.
func (o *StripeRefundDestinationDetailsCard) SetReferenceType(v string) {
	o.ReferenceType = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *StripeRefundDestinationDetailsCard) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeRefundDestinationDetailsCard) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *StripeRefundDestinationDetailsCard) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *StripeRefundDestinationDetailsCard) SetType(v string) {
	o.Type = &v
}

func (o StripeRefundDestinationDetailsCard) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StripeRefundDestinationDetailsCard) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	if !IsNil(o.ReferenceStatus) {
		toSerialize["reference_status"] = o.ReferenceStatus
	}
	if !IsNil(o.ReferenceType) {
		toSerialize["reference_type"] = o.ReferenceType
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableStripeRefundDestinationDetailsCard struct {
	value *StripeRefundDestinationDetailsCard
	isSet bool
}

func (v NullableStripeRefundDestinationDetailsCard) Get() *StripeRefundDestinationDetailsCard {
	return v.value
}

func (v *NullableStripeRefundDestinationDetailsCard) Set(val *StripeRefundDestinationDetailsCard) {
	v.value = val
	v.isSet = true
}

func (v NullableStripeRefundDestinationDetailsCard) IsSet() bool {
	return v.isSet
}

func (v *NullableStripeRefundDestinationDetailsCard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStripeRefundDestinationDetailsCard(val *StripeRefundDestinationDetailsCard) *NullableStripeRefundDestinationDetailsCard {
	return &NullableStripeRefundDestinationDetailsCard{value: val, isSet: true}
}

func (v NullableStripeRefundDestinationDetailsCard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStripeRefundDestinationDetailsCard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
