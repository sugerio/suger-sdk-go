/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
)

// checks if the AzureMarketplaceContact type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureMarketplaceContact{}

// AzureMarketplaceContact struct for AzureMarketplaceContact
type AzureMarketplaceContact struct {
	Email *string `json:"email,omitempty"`
	Name  *string `json:"name,omitempty"`
	Phone *string `json:"phone,omitempty"`
	// in patern of \"^(http|https)://\"
	Url *string `json:"url,omitempty"`
}

// NewAzureMarketplaceContact instantiates a new AzureMarketplaceContact object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureMarketplaceContact() *AzureMarketplaceContact {
	this := AzureMarketplaceContact{}
	return &this
}

// NewAzureMarketplaceContactWithDefaults instantiates a new AzureMarketplaceContact object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureMarketplaceContactWithDefaults() *AzureMarketplaceContact {
	this := AzureMarketplaceContact{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *AzureMarketplaceContact) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureMarketplaceContact) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *AzureMarketplaceContact) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *AzureMarketplaceContact) SetEmail(v string) {
	o.Email = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AzureMarketplaceContact) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureMarketplaceContact) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AzureMarketplaceContact) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AzureMarketplaceContact) SetName(v string) {
	o.Name = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *AzureMarketplaceContact) GetPhone() string {
	if o == nil || IsNil(o.Phone) {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureMarketplaceContact) GetPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *AzureMarketplaceContact) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *AzureMarketplaceContact) SetPhone(v string) {
	o.Phone = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *AzureMarketplaceContact) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureMarketplaceContact) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *AzureMarketplaceContact) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *AzureMarketplaceContact) SetUrl(v string) {
	o.Url = &v
}

func (o AzureMarketplaceContact) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureMarketplaceContact) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableAzureMarketplaceContact struct {
	value *AzureMarketplaceContact
	isSet bool
}

func (v NullableAzureMarketplaceContact) Get() *AzureMarketplaceContact {
	return v.value
}

func (v *NullableAzureMarketplaceContact) Set(val *AzureMarketplaceContact) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureMarketplaceContact) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureMarketplaceContact) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureMarketplaceContact(val *AzureMarketplaceContact) *NullableAzureMarketplaceContact {
	return &NullableAzureMarketplaceContact{value: val, isSet: true}
}

func (v NullableAzureMarketplaceContact) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureMarketplaceContact) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
