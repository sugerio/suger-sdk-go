/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SupportTicketUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SupportTicketUser{}

// SupportTicketUser struct for SupportTicketUser
type SupportTicketUser struct {
	Email *string `json:"email,omitempty"`
	// The Suger user ID.
	Id *string `json:"id,omitempty"`
	// Whether the user is a Suger employee.
	IsSugerEmployee *bool   `json:"isSugerEmployee,omitempty"`
	ProfilePicture  *string `json:"profilePicture,omitempty"`
	Username        *string `json:"username,omitempty"`
}

// NewSupportTicketUser instantiates a new SupportTicketUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupportTicketUser() *SupportTicketUser {
	this := SupportTicketUser{}
	return &this
}

// NewSupportTicketUserWithDefaults instantiates a new SupportTicketUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupportTicketUserWithDefaults() *SupportTicketUser {
	this := SupportTicketUser{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *SupportTicketUser) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportTicketUser) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *SupportTicketUser) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *SupportTicketUser) SetEmail(v string) {
	o.Email = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SupportTicketUser) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportTicketUser) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SupportTicketUser) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SupportTicketUser) SetId(v string) {
	o.Id = &v
}

// GetIsSugerEmployee returns the IsSugerEmployee field value if set, zero value otherwise.
func (o *SupportTicketUser) GetIsSugerEmployee() bool {
	if o == nil || IsNil(o.IsSugerEmployee) {
		var ret bool
		return ret
	}
	return *o.IsSugerEmployee
}

// GetIsSugerEmployeeOk returns a tuple with the IsSugerEmployee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportTicketUser) GetIsSugerEmployeeOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSugerEmployee) {
		return nil, false
	}
	return o.IsSugerEmployee, true
}

// HasIsSugerEmployee returns a boolean if a field has been set.
func (o *SupportTicketUser) HasIsSugerEmployee() bool {
	if o != nil && !IsNil(o.IsSugerEmployee) {
		return true
	}

	return false
}

// SetIsSugerEmployee gets a reference to the given bool and assigns it to the IsSugerEmployee field.
func (o *SupportTicketUser) SetIsSugerEmployee(v bool) {
	o.IsSugerEmployee = &v
}

// GetProfilePicture returns the ProfilePicture field value if set, zero value otherwise.
func (o *SupportTicketUser) GetProfilePicture() string {
	if o == nil || IsNil(o.ProfilePicture) {
		var ret string
		return ret
	}
	return *o.ProfilePicture
}

// GetProfilePictureOk returns a tuple with the ProfilePicture field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportTicketUser) GetProfilePictureOk() (*string, bool) {
	if o == nil || IsNil(o.ProfilePicture) {
		return nil, false
	}
	return o.ProfilePicture, true
}

// HasProfilePicture returns a boolean if a field has been set.
func (o *SupportTicketUser) HasProfilePicture() bool {
	if o != nil && !IsNil(o.ProfilePicture) {
		return true
	}

	return false
}

// SetProfilePicture gets a reference to the given string and assigns it to the ProfilePicture field.
func (o *SupportTicketUser) SetProfilePicture(v string) {
	o.ProfilePicture = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *SupportTicketUser) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportTicketUser) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *SupportTicketUser) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *SupportTicketUser) SetUsername(v string) {
	o.Username = &v
}

func (o SupportTicketUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SupportTicketUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IsSugerEmployee) {
		toSerialize["isSugerEmployee"] = o.IsSugerEmployee
	}
	if !IsNil(o.ProfilePicture) {
		toSerialize["profilePicture"] = o.ProfilePicture
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	return toSerialize, nil
}

type NullableSupportTicketUser struct {
	value *SupportTicketUser
	isSet bool
}

func (v NullableSupportTicketUser) Get() *SupportTicketUser {
	return v.value
}

func (v *NullableSupportTicketUser) Set(val *SupportTicketUser) {
	v.value = val
	v.isSet = true
}

func (v NullableSupportTicketUser) IsSet() bool {
	return v.isSet
}

func (v *NullableSupportTicketUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupportTicketUser(val *SupportTicketUser) *NullableSupportTicketUser {
	return &NullableSupportTicketUser{value: val, isSet: true}
}

func (v NullableSupportTicketUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupportTicketUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
