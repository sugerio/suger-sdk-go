/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
)

// checks if the StripePaymentMethodSEPADebit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StripePaymentMethodSEPADebit{}

// StripePaymentMethodSEPADebit struct for StripePaymentMethodSEPADebit
type StripePaymentMethodSEPADebit struct {
	// Bank code of bank associated with the bank account.
	BankCode *string `json:"bank_code,omitempty"`
	// Branch code of bank associated with the bank account.
	BranchCode *string `json:"branch_code,omitempty"`
	// Two-letter ISO code representing the country the bank account is located in.
	Country *string `json:"country,omitempty"`
	// Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
	Fingerprint *string `json:"fingerprint,omitempty"`
	// Last four characters of the IBAN.
	Last4 *string `json:"last4,omitempty"`
}

// NewStripePaymentMethodSEPADebit instantiates a new StripePaymentMethodSEPADebit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStripePaymentMethodSEPADebit() *StripePaymentMethodSEPADebit {
	this := StripePaymentMethodSEPADebit{}
	return &this
}

// NewStripePaymentMethodSEPADebitWithDefaults instantiates a new StripePaymentMethodSEPADebit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStripePaymentMethodSEPADebitWithDefaults() *StripePaymentMethodSEPADebit {
	this := StripePaymentMethodSEPADebit{}
	return &this
}

// GetBankCode returns the BankCode field value if set, zero value otherwise.
func (o *StripePaymentMethodSEPADebit) GetBankCode() string {
	if o == nil || IsNil(o.BankCode) {
		var ret string
		return ret
	}
	return *o.BankCode
}

// GetBankCodeOk returns a tuple with the BankCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripePaymentMethodSEPADebit) GetBankCodeOk() (*string, bool) {
	if o == nil || IsNil(o.BankCode) {
		return nil, false
	}
	return o.BankCode, true
}

// HasBankCode returns a boolean if a field has been set.
func (o *StripePaymentMethodSEPADebit) HasBankCode() bool {
	if o != nil && !IsNil(o.BankCode) {
		return true
	}

	return false
}

// SetBankCode gets a reference to the given string and assigns it to the BankCode field.
func (o *StripePaymentMethodSEPADebit) SetBankCode(v string) {
	o.BankCode = &v
}

// GetBranchCode returns the BranchCode field value if set, zero value otherwise.
func (o *StripePaymentMethodSEPADebit) GetBranchCode() string {
	if o == nil || IsNil(o.BranchCode) {
		var ret string
		return ret
	}
	return *o.BranchCode
}

// GetBranchCodeOk returns a tuple with the BranchCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripePaymentMethodSEPADebit) GetBranchCodeOk() (*string, bool) {
	if o == nil || IsNil(o.BranchCode) {
		return nil, false
	}
	return o.BranchCode, true
}

// HasBranchCode returns a boolean if a field has been set.
func (o *StripePaymentMethodSEPADebit) HasBranchCode() bool {
	if o != nil && !IsNil(o.BranchCode) {
		return true
	}

	return false
}

// SetBranchCode gets a reference to the given string and assigns it to the BranchCode field.
func (o *StripePaymentMethodSEPADebit) SetBranchCode(v string) {
	o.BranchCode = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *StripePaymentMethodSEPADebit) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripePaymentMethodSEPADebit) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *StripePaymentMethodSEPADebit) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *StripePaymentMethodSEPADebit) SetCountry(v string) {
	o.Country = &v
}

// GetFingerprint returns the Fingerprint field value if set, zero value otherwise.
func (o *StripePaymentMethodSEPADebit) GetFingerprint() string {
	if o == nil || IsNil(o.Fingerprint) {
		var ret string
		return ret
	}
	return *o.Fingerprint
}

// GetFingerprintOk returns a tuple with the Fingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripePaymentMethodSEPADebit) GetFingerprintOk() (*string, bool) {
	if o == nil || IsNil(o.Fingerprint) {
		return nil, false
	}
	return o.Fingerprint, true
}

// HasFingerprint returns a boolean if a field has been set.
func (o *StripePaymentMethodSEPADebit) HasFingerprint() bool {
	if o != nil && !IsNil(o.Fingerprint) {
		return true
	}

	return false
}

// SetFingerprint gets a reference to the given string and assigns it to the Fingerprint field.
func (o *StripePaymentMethodSEPADebit) SetFingerprint(v string) {
	o.Fingerprint = &v
}

// GetLast4 returns the Last4 field value if set, zero value otherwise.
func (o *StripePaymentMethodSEPADebit) GetLast4() string {
	if o == nil || IsNil(o.Last4) {
		var ret string
		return ret
	}
	return *o.Last4
}

// GetLast4Ok returns a tuple with the Last4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripePaymentMethodSEPADebit) GetLast4Ok() (*string, bool) {
	if o == nil || IsNil(o.Last4) {
		return nil, false
	}
	return o.Last4, true
}

// HasLast4 returns a boolean if a field has been set.
func (o *StripePaymentMethodSEPADebit) HasLast4() bool {
	if o != nil && !IsNil(o.Last4) {
		return true
	}

	return false
}

// SetLast4 gets a reference to the given string and assigns it to the Last4 field.
func (o *StripePaymentMethodSEPADebit) SetLast4(v string) {
	o.Last4 = &v
}

func (o StripePaymentMethodSEPADebit) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StripePaymentMethodSEPADebit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BankCode) {
		toSerialize["bank_code"] = o.BankCode
	}
	if !IsNil(o.BranchCode) {
		toSerialize["branch_code"] = o.BranchCode
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.Fingerprint) {
		toSerialize["fingerprint"] = o.Fingerprint
	}
	if !IsNil(o.Last4) {
		toSerialize["last4"] = o.Last4
	}
	return toSerialize, nil
}

type NullableStripePaymentMethodSEPADebit struct {
	value *StripePaymentMethodSEPADebit
	isSet bool
}

func (v NullableStripePaymentMethodSEPADebit) Get() *StripePaymentMethodSEPADebit {
	return v.value
}

func (v *NullableStripePaymentMethodSEPADebit) Set(val *StripePaymentMethodSEPADebit) {
	v.value = val
	v.isSet = true
}

func (v NullableStripePaymentMethodSEPADebit) IsSet() bool {
	return v.isSet
}

func (v *NullableStripePaymentMethodSEPADebit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStripePaymentMethodSEPADebit(val *StripePaymentMethodSEPADebit) *NullableStripePaymentMethodSEPADebit {
	return &NullableStripePaymentMethodSEPADebit{value: val, isSet: true}
}

func (v NullableStripePaymentMethodSEPADebit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStripePaymentMethodSEPADebit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
