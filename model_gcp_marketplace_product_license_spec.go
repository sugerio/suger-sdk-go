/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
)

// checks if the GcpMarketplaceProductLicenseSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GcpMarketplaceProductLicenseSpec{}

// GcpMarketplaceProductLicenseSpec struct for GcpMarketplaceProductLicenseSpec
type GcpMarketplaceProductLicenseSpec struct {
	Description *string `json:"description,omitempty"`
	Uri         *string `json:"uri,omitempty"`
}

// NewGcpMarketplaceProductLicenseSpec instantiates a new GcpMarketplaceProductLicenseSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGcpMarketplaceProductLicenseSpec() *GcpMarketplaceProductLicenseSpec {
	this := GcpMarketplaceProductLicenseSpec{}
	return &this
}

// NewGcpMarketplaceProductLicenseSpecWithDefaults instantiates a new GcpMarketplaceProductLicenseSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGcpMarketplaceProductLicenseSpecWithDefaults() *GcpMarketplaceProductLicenseSpec {
	this := GcpMarketplaceProductLicenseSpec{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *GcpMarketplaceProductLicenseSpec) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpMarketplaceProductLicenseSpec) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *GcpMarketplaceProductLicenseSpec) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *GcpMarketplaceProductLicenseSpec) SetDescription(v string) {
	o.Description = &v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *GcpMarketplaceProductLicenseSpec) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpMarketplaceProductLicenseSpec) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *GcpMarketplaceProductLicenseSpec) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *GcpMarketplaceProductLicenseSpec) SetUri(v string) {
	o.Uri = &v
}

func (o GcpMarketplaceProductLicenseSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GcpMarketplaceProductLicenseSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	return toSerialize, nil
}

type NullableGcpMarketplaceProductLicenseSpec struct {
	value *GcpMarketplaceProductLicenseSpec
	isSet bool
}

func (v NullableGcpMarketplaceProductLicenseSpec) Get() *GcpMarketplaceProductLicenseSpec {
	return v.value
}

func (v *NullableGcpMarketplaceProductLicenseSpec) Set(val *GcpMarketplaceProductLicenseSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableGcpMarketplaceProductLicenseSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableGcpMarketplaceProductLicenseSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGcpMarketplaceProductLicenseSpec(val *GcpMarketplaceProductLicenseSpec) *NullableGcpMarketplaceProductLicenseSpec {
	return &NullableGcpMarketplaceProductLicenseSpec{value: val, isSet: true}
}

func (v NullableGcpMarketplaceProductLicenseSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGcpMarketplaceProductLicenseSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
