/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
)

// checks if the OrbPriceTier type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrbPriceTier{}

// OrbPriceTier struct for OrbPriceTier
type OrbPriceTier struct {
	Bps *float32 `json:"bps,omitempty"`
	// The following fields applicable only to UNIT price model
	FirstUnit     *string `json:"first_unit,omitempty"`
	LastUnit      *string `json:"last_unit,omitempty"`
	MaximumAmount *string `json:"maximum_amount,omitempty"`
	// The following fields applicable only to BULK price model
	MaximumUnits *float32 `json:"maximum_units,omitempty"`
	// The following fields applicable only to BPS price model
	MinimumAmount  *string `json:"minimum_amount,omitempty"`
	PerUnitMaximum *string `json:"per_unit_maximum,omitempty"`
	UnitAmount     *string `json:"unit_amount,omitempty"`
}

// NewOrbPriceTier instantiates a new OrbPriceTier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrbPriceTier() *OrbPriceTier {
	this := OrbPriceTier{}
	return &this
}

// NewOrbPriceTierWithDefaults instantiates a new OrbPriceTier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrbPriceTierWithDefaults() *OrbPriceTier {
	this := OrbPriceTier{}
	return &this
}

// GetBps returns the Bps field value if set, zero value otherwise.
func (o *OrbPriceTier) GetBps() float32 {
	if o == nil || IsNil(o.Bps) {
		var ret float32
		return ret
	}
	return *o.Bps
}

// GetBpsOk returns a tuple with the Bps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPriceTier) GetBpsOk() (*float32, bool) {
	if o == nil || IsNil(o.Bps) {
		return nil, false
	}
	return o.Bps, true
}

// HasBps returns a boolean if a field has been set.
func (o *OrbPriceTier) HasBps() bool {
	if o != nil && !IsNil(o.Bps) {
		return true
	}

	return false
}

// SetBps gets a reference to the given float32 and assigns it to the Bps field.
func (o *OrbPriceTier) SetBps(v float32) {
	o.Bps = &v
}

// GetFirstUnit returns the FirstUnit field value if set, zero value otherwise.
func (o *OrbPriceTier) GetFirstUnit() string {
	if o == nil || IsNil(o.FirstUnit) {
		var ret string
		return ret
	}
	return *o.FirstUnit
}

// GetFirstUnitOk returns a tuple with the FirstUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPriceTier) GetFirstUnitOk() (*string, bool) {
	if o == nil || IsNil(o.FirstUnit) {
		return nil, false
	}
	return o.FirstUnit, true
}

// HasFirstUnit returns a boolean if a field has been set.
func (o *OrbPriceTier) HasFirstUnit() bool {
	if o != nil && !IsNil(o.FirstUnit) {
		return true
	}

	return false
}

// SetFirstUnit gets a reference to the given string and assigns it to the FirstUnit field.
func (o *OrbPriceTier) SetFirstUnit(v string) {
	o.FirstUnit = &v
}

// GetLastUnit returns the LastUnit field value if set, zero value otherwise.
func (o *OrbPriceTier) GetLastUnit() string {
	if o == nil || IsNil(o.LastUnit) {
		var ret string
		return ret
	}
	return *o.LastUnit
}

// GetLastUnitOk returns a tuple with the LastUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPriceTier) GetLastUnitOk() (*string, bool) {
	if o == nil || IsNil(o.LastUnit) {
		return nil, false
	}
	return o.LastUnit, true
}

// HasLastUnit returns a boolean if a field has been set.
func (o *OrbPriceTier) HasLastUnit() bool {
	if o != nil && !IsNil(o.LastUnit) {
		return true
	}

	return false
}

// SetLastUnit gets a reference to the given string and assigns it to the LastUnit field.
func (o *OrbPriceTier) SetLastUnit(v string) {
	o.LastUnit = &v
}

// GetMaximumAmount returns the MaximumAmount field value if set, zero value otherwise.
func (o *OrbPriceTier) GetMaximumAmount() string {
	if o == nil || IsNil(o.MaximumAmount) {
		var ret string
		return ret
	}
	return *o.MaximumAmount
}

// GetMaximumAmountOk returns a tuple with the MaximumAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPriceTier) GetMaximumAmountOk() (*string, bool) {
	if o == nil || IsNil(o.MaximumAmount) {
		return nil, false
	}
	return o.MaximumAmount, true
}

// HasMaximumAmount returns a boolean if a field has been set.
func (o *OrbPriceTier) HasMaximumAmount() bool {
	if o != nil && !IsNil(o.MaximumAmount) {
		return true
	}

	return false
}

// SetMaximumAmount gets a reference to the given string and assigns it to the MaximumAmount field.
func (o *OrbPriceTier) SetMaximumAmount(v string) {
	o.MaximumAmount = &v
}

// GetMaximumUnits returns the MaximumUnits field value if set, zero value otherwise.
func (o *OrbPriceTier) GetMaximumUnits() float32 {
	if o == nil || IsNil(o.MaximumUnits) {
		var ret float32
		return ret
	}
	return *o.MaximumUnits
}

// GetMaximumUnitsOk returns a tuple with the MaximumUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPriceTier) GetMaximumUnitsOk() (*float32, bool) {
	if o == nil || IsNil(o.MaximumUnits) {
		return nil, false
	}
	return o.MaximumUnits, true
}

// HasMaximumUnits returns a boolean if a field has been set.
func (o *OrbPriceTier) HasMaximumUnits() bool {
	if o != nil && !IsNil(o.MaximumUnits) {
		return true
	}

	return false
}

// SetMaximumUnits gets a reference to the given float32 and assigns it to the MaximumUnits field.
func (o *OrbPriceTier) SetMaximumUnits(v float32) {
	o.MaximumUnits = &v
}

// GetMinimumAmount returns the MinimumAmount field value if set, zero value otherwise.
func (o *OrbPriceTier) GetMinimumAmount() string {
	if o == nil || IsNil(o.MinimumAmount) {
		var ret string
		return ret
	}
	return *o.MinimumAmount
}

// GetMinimumAmountOk returns a tuple with the MinimumAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPriceTier) GetMinimumAmountOk() (*string, bool) {
	if o == nil || IsNil(o.MinimumAmount) {
		return nil, false
	}
	return o.MinimumAmount, true
}

// HasMinimumAmount returns a boolean if a field has been set.
func (o *OrbPriceTier) HasMinimumAmount() bool {
	if o != nil && !IsNil(o.MinimumAmount) {
		return true
	}

	return false
}

// SetMinimumAmount gets a reference to the given string and assigns it to the MinimumAmount field.
func (o *OrbPriceTier) SetMinimumAmount(v string) {
	o.MinimumAmount = &v
}

// GetPerUnitMaximum returns the PerUnitMaximum field value if set, zero value otherwise.
func (o *OrbPriceTier) GetPerUnitMaximum() string {
	if o == nil || IsNil(o.PerUnitMaximum) {
		var ret string
		return ret
	}
	return *o.PerUnitMaximum
}

// GetPerUnitMaximumOk returns a tuple with the PerUnitMaximum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPriceTier) GetPerUnitMaximumOk() (*string, bool) {
	if o == nil || IsNil(o.PerUnitMaximum) {
		return nil, false
	}
	return o.PerUnitMaximum, true
}

// HasPerUnitMaximum returns a boolean if a field has been set.
func (o *OrbPriceTier) HasPerUnitMaximum() bool {
	if o != nil && !IsNil(o.PerUnitMaximum) {
		return true
	}

	return false
}

// SetPerUnitMaximum gets a reference to the given string and assigns it to the PerUnitMaximum field.
func (o *OrbPriceTier) SetPerUnitMaximum(v string) {
	o.PerUnitMaximum = &v
}

// GetUnitAmount returns the UnitAmount field value if set, zero value otherwise.
func (o *OrbPriceTier) GetUnitAmount() string {
	if o == nil || IsNil(o.UnitAmount) {
		var ret string
		return ret
	}
	return *o.UnitAmount
}

// GetUnitAmountOk returns a tuple with the UnitAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPriceTier) GetUnitAmountOk() (*string, bool) {
	if o == nil || IsNil(o.UnitAmount) {
		return nil, false
	}
	return o.UnitAmount, true
}

// HasUnitAmount returns a boolean if a field has been set.
func (o *OrbPriceTier) HasUnitAmount() bool {
	if o != nil && !IsNil(o.UnitAmount) {
		return true
	}

	return false
}

// SetUnitAmount gets a reference to the given string and assigns it to the UnitAmount field.
func (o *OrbPriceTier) SetUnitAmount(v string) {
	o.UnitAmount = &v
}

func (o OrbPriceTier) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrbPriceTier) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Bps) {
		toSerialize["bps"] = o.Bps
	}
	if !IsNil(o.FirstUnit) {
		toSerialize["first_unit"] = o.FirstUnit
	}
	if !IsNil(o.LastUnit) {
		toSerialize["last_unit"] = o.LastUnit
	}
	if !IsNil(o.MaximumAmount) {
		toSerialize["maximum_amount"] = o.MaximumAmount
	}
	if !IsNil(o.MaximumUnits) {
		toSerialize["maximum_units"] = o.MaximumUnits
	}
	if !IsNil(o.MinimumAmount) {
		toSerialize["minimum_amount"] = o.MinimumAmount
	}
	if !IsNil(o.PerUnitMaximum) {
		toSerialize["per_unit_maximum"] = o.PerUnitMaximum
	}
	if !IsNil(o.UnitAmount) {
		toSerialize["unit_amount"] = o.UnitAmount
	}
	return toSerialize, nil
}

type NullableOrbPriceTier struct {
	value *OrbPriceTier
	isSet bool
}

func (v NullableOrbPriceTier) Get() *OrbPriceTier {
	return v.value
}

func (v *NullableOrbPriceTier) Set(val *OrbPriceTier) {
	v.value = val
	v.isSet = true
}

func (v NullableOrbPriceTier) IsSet() bool {
	return v.isSet
}

func (v *NullableOrbPriceTier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrbPriceTier(val *OrbPriceTier) *NullableOrbPriceTier {
	return &NullableOrbPriceTier{value: val, isSet: true}
}

func (v NullableOrbPriceTier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrbPriceTier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
