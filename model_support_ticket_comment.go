/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
)

// checks if the SupportTicketComment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SupportTicketComment{}

// SupportTicketComment struct for SupportTicketComment
type SupportTicketComment struct {
	Comment []SupportTicketCommentDetail `json:"comment,omitempty"`
	// When creating a new comment, only CommentText is required.
	CommentText *string `json:"comment_text,omitempty"`
	// who created the comment
	Creator *SupportTicketUser `json:"creator,omitempty"`
	Date    *string            `json:"date,omitempty"`
	Id      *string            `json:"id,omitempty"`
}

// NewSupportTicketComment instantiates a new SupportTicketComment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupportTicketComment() *SupportTicketComment {
	this := SupportTicketComment{}
	return &this
}

// NewSupportTicketCommentWithDefaults instantiates a new SupportTicketComment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupportTicketCommentWithDefaults() *SupportTicketComment {
	this := SupportTicketComment{}
	return &this
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *SupportTicketComment) GetComment() []SupportTicketCommentDetail {
	if o == nil || IsNil(o.Comment) {
		var ret []SupportTicketCommentDetail
		return ret
	}
	return o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportTicketComment) GetCommentOk() ([]SupportTicketCommentDetail, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *SupportTicketComment) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given []SupportTicketCommentDetail and assigns it to the Comment field.
func (o *SupportTicketComment) SetComment(v []SupportTicketCommentDetail) {
	o.Comment = v
}

// GetCommentText returns the CommentText field value if set, zero value otherwise.
func (o *SupportTicketComment) GetCommentText() string {
	if o == nil || IsNil(o.CommentText) {
		var ret string
		return ret
	}
	return *o.CommentText
}

// GetCommentTextOk returns a tuple with the CommentText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportTicketComment) GetCommentTextOk() (*string, bool) {
	if o == nil || IsNil(o.CommentText) {
		return nil, false
	}
	return o.CommentText, true
}

// HasCommentText returns a boolean if a field has been set.
func (o *SupportTicketComment) HasCommentText() bool {
	if o != nil && !IsNil(o.CommentText) {
		return true
	}

	return false
}

// SetCommentText gets a reference to the given string and assigns it to the CommentText field.
func (o *SupportTicketComment) SetCommentText(v string) {
	o.CommentText = &v
}

// GetCreator returns the Creator field value if set, zero value otherwise.
func (o *SupportTicketComment) GetCreator() SupportTicketUser {
	if o == nil || IsNil(o.Creator) {
		var ret SupportTicketUser
		return ret
	}
	return *o.Creator
}

// GetCreatorOk returns a tuple with the Creator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportTicketComment) GetCreatorOk() (*SupportTicketUser, bool) {
	if o == nil || IsNil(o.Creator) {
		return nil, false
	}
	return o.Creator, true
}

// HasCreator returns a boolean if a field has been set.
func (o *SupportTicketComment) HasCreator() bool {
	if o != nil && !IsNil(o.Creator) {
		return true
	}

	return false
}

// SetCreator gets a reference to the given SupportTicketUser and assigns it to the Creator field.
func (o *SupportTicketComment) SetCreator(v SupportTicketUser) {
	o.Creator = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *SupportTicketComment) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportTicketComment) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *SupportTicketComment) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *SupportTicketComment) SetDate(v string) {
	o.Date = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SupportTicketComment) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportTicketComment) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SupportTicketComment) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SupportTicketComment) SetId(v string) {
	o.Id = &v
}

func (o SupportTicketComment) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SupportTicketComment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.CommentText) {
		toSerialize["comment_text"] = o.CommentText
	}
	if !IsNil(o.Creator) {
		toSerialize["creator"] = o.Creator
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	return toSerialize, nil
}

type NullableSupportTicketComment struct {
	value *SupportTicketComment
	isSet bool
}

func (v NullableSupportTicketComment) Get() *SupportTicketComment {
	return v.value
}

func (v *NullableSupportTicketComment) Set(val *SupportTicketComment) {
	v.value = val
	v.isSet = true
}

func (v NullableSupportTicketComment) IsSet() bool {
	return v.isSet
}

func (v *NullableSupportTicketComment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupportTicketComment(val *SupportTicketComment) *NullableSupportTicketComment {
	return &NullableSupportTicketComment{value: val, isSet: true}
}

func (v NullableSupportTicketComment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupportTicketComment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
