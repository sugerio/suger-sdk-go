/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
)

// checks if the PriceModelTieredConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PriceModelTieredConfig{}

// PriceModelTieredConfig struct for PriceModelTieredConfig
type PriceModelTieredConfig struct {
	// Inclusive tier starting value
	FirstUnit *float32 `json:"firstUnit,omitempty"`
	FlatFee   *float32 `json:"flatFee,omitempty"`
	// Exclusive tier ending value. If null, this is treated as the last tier
	LastUnit *float32 `json:"lastUnit,omitempty"`
	// Amount per unit
	UnitAmount *float32 `json:"unitAmount,omitempty"`
}

// NewPriceModelTieredConfig instantiates a new PriceModelTieredConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPriceModelTieredConfig() *PriceModelTieredConfig {
	this := PriceModelTieredConfig{}
	return &this
}

// NewPriceModelTieredConfigWithDefaults instantiates a new PriceModelTieredConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPriceModelTieredConfigWithDefaults() *PriceModelTieredConfig {
	this := PriceModelTieredConfig{}
	return &this
}

// GetFirstUnit returns the FirstUnit field value if set, zero value otherwise.
func (o *PriceModelTieredConfig) GetFirstUnit() float32 {
	if o == nil || IsNil(o.FirstUnit) {
		var ret float32
		return ret
	}
	return *o.FirstUnit
}

// GetFirstUnitOk returns a tuple with the FirstUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceModelTieredConfig) GetFirstUnitOk() (*float32, bool) {
	if o == nil || IsNil(o.FirstUnit) {
		return nil, false
	}
	return o.FirstUnit, true
}

// HasFirstUnit returns a boolean if a field has been set.
func (o *PriceModelTieredConfig) HasFirstUnit() bool {
	if o != nil && !IsNil(o.FirstUnit) {
		return true
	}

	return false
}

// SetFirstUnit gets a reference to the given float32 and assigns it to the FirstUnit field.
func (o *PriceModelTieredConfig) SetFirstUnit(v float32) {
	o.FirstUnit = &v
}

// GetFlatFee returns the FlatFee field value if set, zero value otherwise.
func (o *PriceModelTieredConfig) GetFlatFee() float32 {
	if o == nil || IsNil(o.FlatFee) {
		var ret float32
		return ret
	}
	return *o.FlatFee
}

// GetFlatFeeOk returns a tuple with the FlatFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceModelTieredConfig) GetFlatFeeOk() (*float32, bool) {
	if o == nil || IsNil(o.FlatFee) {
		return nil, false
	}
	return o.FlatFee, true
}

// HasFlatFee returns a boolean if a field has been set.
func (o *PriceModelTieredConfig) HasFlatFee() bool {
	if o != nil && !IsNil(o.FlatFee) {
		return true
	}

	return false
}

// SetFlatFee gets a reference to the given float32 and assigns it to the FlatFee field.
func (o *PriceModelTieredConfig) SetFlatFee(v float32) {
	o.FlatFee = &v
}

// GetLastUnit returns the LastUnit field value if set, zero value otherwise.
func (o *PriceModelTieredConfig) GetLastUnit() float32 {
	if o == nil || IsNil(o.LastUnit) {
		var ret float32
		return ret
	}
	return *o.LastUnit
}

// GetLastUnitOk returns a tuple with the LastUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceModelTieredConfig) GetLastUnitOk() (*float32, bool) {
	if o == nil || IsNil(o.LastUnit) {
		return nil, false
	}
	return o.LastUnit, true
}

// HasLastUnit returns a boolean if a field has been set.
func (o *PriceModelTieredConfig) HasLastUnit() bool {
	if o != nil && !IsNil(o.LastUnit) {
		return true
	}

	return false
}

// SetLastUnit gets a reference to the given float32 and assigns it to the LastUnit field.
func (o *PriceModelTieredConfig) SetLastUnit(v float32) {
	o.LastUnit = &v
}

// GetUnitAmount returns the UnitAmount field value if set, zero value otherwise.
func (o *PriceModelTieredConfig) GetUnitAmount() float32 {
	if o == nil || IsNil(o.UnitAmount) {
		var ret float32
		return ret
	}
	return *o.UnitAmount
}

// GetUnitAmountOk returns a tuple with the UnitAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceModelTieredConfig) GetUnitAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.UnitAmount) {
		return nil, false
	}
	return o.UnitAmount, true
}

// HasUnitAmount returns a boolean if a field has been set.
func (o *PriceModelTieredConfig) HasUnitAmount() bool {
	if o != nil && !IsNil(o.UnitAmount) {
		return true
	}

	return false
}

// SetUnitAmount gets a reference to the given float32 and assigns it to the UnitAmount field.
func (o *PriceModelTieredConfig) SetUnitAmount(v float32) {
	o.UnitAmount = &v
}

func (o PriceModelTieredConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PriceModelTieredConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FirstUnit) {
		toSerialize["firstUnit"] = o.FirstUnit
	}
	if !IsNil(o.FlatFee) {
		toSerialize["flatFee"] = o.FlatFee
	}
	if !IsNil(o.LastUnit) {
		toSerialize["lastUnit"] = o.LastUnit
	}
	if !IsNil(o.UnitAmount) {
		toSerialize["unitAmount"] = o.UnitAmount
	}
	return toSerialize, nil
}

type NullablePriceModelTieredConfig struct {
	value *PriceModelTieredConfig
	isSet bool
}

func (v NullablePriceModelTieredConfig) Get() *PriceModelTieredConfig {
	return v.value
}

func (v *NullablePriceModelTieredConfig) Set(val *PriceModelTieredConfig) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceModelTieredConfig) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceModelTieredConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceModelTieredConfig(val *PriceModelTieredConfig) *NullablePriceModelTieredConfig {
	return &NullablePriceModelTieredConfig{value: val, isSet: true}
}

func (v NullablePriceModelTieredConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceModelTieredConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
