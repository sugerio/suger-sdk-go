/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
	"time"
)

// checks if the AwsProductVersion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsProductVersion{}

// AwsProductVersion struct for AwsProductVersion
type AwsProductVersion struct {
	CreationDate    *time.Time                 `json:"CreationDate,omitempty"`
	DeliveryOptions []AwsProductDeliveryOption `json:"DeliveryOptions,omitempty"`
	Id              *string                    `json:"Id,omitempty"`
	ReleaseNotes    *string                    `json:"ReleaseNotes,omitempty"`
	VersionTitle    *string                    `json:"VersionTitle,omitempty"`
}

// NewAwsProductVersion instantiates a new AwsProductVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsProductVersion() *AwsProductVersion {
	this := AwsProductVersion{}
	return &this
}

// NewAwsProductVersionWithDefaults instantiates a new AwsProductVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsProductVersionWithDefaults() *AwsProductVersion {
	this := AwsProductVersion{}
	return &this
}

// GetCreationDate returns the CreationDate field value if set, zero value otherwise.
func (o *AwsProductVersion) GetCreationDate() time.Time {
	if o == nil || IsNil(o.CreationDate) {
		var ret time.Time
		return ret
	}
	return *o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsProductVersion) GetCreationDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreationDate) {
		return nil, false
	}
	return o.CreationDate, true
}

// HasCreationDate returns a boolean if a field has been set.
func (o *AwsProductVersion) HasCreationDate() bool {
	if o != nil && !IsNil(o.CreationDate) {
		return true
	}

	return false
}

// SetCreationDate gets a reference to the given time.Time and assigns it to the CreationDate field.
func (o *AwsProductVersion) SetCreationDate(v time.Time) {
	o.CreationDate = &v
}

// GetDeliveryOptions returns the DeliveryOptions field value if set, zero value otherwise.
func (o *AwsProductVersion) GetDeliveryOptions() []AwsProductDeliveryOption {
	if o == nil || IsNil(o.DeliveryOptions) {
		var ret []AwsProductDeliveryOption
		return ret
	}
	return o.DeliveryOptions
}

// GetDeliveryOptionsOk returns a tuple with the DeliveryOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsProductVersion) GetDeliveryOptionsOk() ([]AwsProductDeliveryOption, bool) {
	if o == nil || IsNil(o.DeliveryOptions) {
		return nil, false
	}
	return o.DeliveryOptions, true
}

// HasDeliveryOptions returns a boolean if a field has been set.
func (o *AwsProductVersion) HasDeliveryOptions() bool {
	if o != nil && !IsNil(o.DeliveryOptions) {
		return true
	}

	return false
}

// SetDeliveryOptions gets a reference to the given []AwsProductDeliveryOption and assigns it to the DeliveryOptions field.
func (o *AwsProductVersion) SetDeliveryOptions(v []AwsProductDeliveryOption) {
	o.DeliveryOptions = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AwsProductVersion) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsProductVersion) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AwsProductVersion) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AwsProductVersion) SetId(v string) {
	o.Id = &v
}

// GetReleaseNotes returns the ReleaseNotes field value if set, zero value otherwise.
func (o *AwsProductVersion) GetReleaseNotes() string {
	if o == nil || IsNil(o.ReleaseNotes) {
		var ret string
		return ret
	}
	return *o.ReleaseNotes
}

// GetReleaseNotesOk returns a tuple with the ReleaseNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsProductVersion) GetReleaseNotesOk() (*string, bool) {
	if o == nil || IsNil(o.ReleaseNotes) {
		return nil, false
	}
	return o.ReleaseNotes, true
}

// HasReleaseNotes returns a boolean if a field has been set.
func (o *AwsProductVersion) HasReleaseNotes() bool {
	if o != nil && !IsNil(o.ReleaseNotes) {
		return true
	}

	return false
}

// SetReleaseNotes gets a reference to the given string and assigns it to the ReleaseNotes field.
func (o *AwsProductVersion) SetReleaseNotes(v string) {
	o.ReleaseNotes = &v
}

// GetVersionTitle returns the VersionTitle field value if set, zero value otherwise.
func (o *AwsProductVersion) GetVersionTitle() string {
	if o == nil || IsNil(o.VersionTitle) {
		var ret string
		return ret
	}
	return *o.VersionTitle
}

// GetVersionTitleOk returns a tuple with the VersionTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsProductVersion) GetVersionTitleOk() (*string, bool) {
	if o == nil || IsNil(o.VersionTitle) {
		return nil, false
	}
	return o.VersionTitle, true
}

// HasVersionTitle returns a boolean if a field has been set.
func (o *AwsProductVersion) HasVersionTitle() bool {
	if o != nil && !IsNil(o.VersionTitle) {
		return true
	}

	return false
}

// SetVersionTitle gets a reference to the given string and assigns it to the VersionTitle field.
func (o *AwsProductVersion) SetVersionTitle(v string) {
	o.VersionTitle = &v
}

func (o AwsProductVersion) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsProductVersion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreationDate) {
		toSerialize["CreationDate"] = o.CreationDate
	}
	if !IsNil(o.DeliveryOptions) {
		toSerialize["DeliveryOptions"] = o.DeliveryOptions
	}
	if !IsNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !IsNil(o.ReleaseNotes) {
		toSerialize["ReleaseNotes"] = o.ReleaseNotes
	}
	if !IsNil(o.VersionTitle) {
		toSerialize["VersionTitle"] = o.VersionTitle
	}
	return toSerialize, nil
}

type NullableAwsProductVersion struct {
	value *AwsProductVersion
	isSet bool
}

func (v NullableAwsProductVersion) Get() *AwsProductVersion {
	return v.value
}

func (v *NullableAwsProductVersion) Set(val *AwsProductVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsProductVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsProductVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsProductVersion(val *AwsProductVersion) *NullableAwsProductVersion {
	return &NullableAwsProductVersion{value: val, isSet: true}
}

func (v NullableAwsProductVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsProductVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
