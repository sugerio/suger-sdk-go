/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PaymentConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentConfig{}

// PaymentConfig struct for PaymentConfig
type PaymentConfig struct {
	// Allowed wallet types for this buyer, include payment methods from payment provider such as card, us_bank_account and credit.
	AllowedWalletTypes []BillingWalletType `json:"allowedWalletTypes,omitempty"`
	// Currency used for billing.
	Currency *string `json:"currency,omitempty"`
	// Default wallet id which is a stripe payment method used to invoice.
	DefaultWalletId *string `json:"defaultWalletId,omitempty"`
}

// NewPaymentConfig instantiates a new PaymentConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentConfig() *PaymentConfig {
	this := PaymentConfig{}
	return &this
}

// NewPaymentConfigWithDefaults instantiates a new PaymentConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentConfigWithDefaults() *PaymentConfig {
	this := PaymentConfig{}
	return &this
}

// GetAllowedWalletTypes returns the AllowedWalletTypes field value if set, zero value otherwise.
func (o *PaymentConfig) GetAllowedWalletTypes() []BillingWalletType {
	if o == nil || IsNil(o.AllowedWalletTypes) {
		var ret []BillingWalletType
		return ret
	}
	return o.AllowedWalletTypes
}

// GetAllowedWalletTypesOk returns a tuple with the AllowedWalletTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentConfig) GetAllowedWalletTypesOk() ([]BillingWalletType, bool) {
	if o == nil || IsNil(o.AllowedWalletTypes) {
		return nil, false
	}
	return o.AllowedWalletTypes, true
}

// HasAllowedWalletTypes returns a boolean if a field has been set.
func (o *PaymentConfig) HasAllowedWalletTypes() bool {
	if o != nil && !IsNil(o.AllowedWalletTypes) {
		return true
	}

	return false
}

// SetAllowedWalletTypes gets a reference to the given []BillingWalletType and assigns it to the AllowedWalletTypes field.
func (o *PaymentConfig) SetAllowedWalletTypes(v []BillingWalletType) {
	o.AllowedWalletTypes = v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *PaymentConfig) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentConfig) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *PaymentConfig) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *PaymentConfig) SetCurrency(v string) {
	o.Currency = &v
}

// GetDefaultWalletId returns the DefaultWalletId field value if set, zero value otherwise.
func (o *PaymentConfig) GetDefaultWalletId() string {
	if o == nil || IsNil(o.DefaultWalletId) {
		var ret string
		return ret
	}
	return *o.DefaultWalletId
}

// GetDefaultWalletIdOk returns a tuple with the DefaultWalletId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentConfig) GetDefaultWalletIdOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultWalletId) {
		return nil, false
	}
	return o.DefaultWalletId, true
}

// HasDefaultWalletId returns a boolean if a field has been set.
func (o *PaymentConfig) HasDefaultWalletId() bool {
	if o != nil && !IsNil(o.DefaultWalletId) {
		return true
	}

	return false
}

// SetDefaultWalletId gets a reference to the given string and assigns it to the DefaultWalletId field.
func (o *PaymentConfig) SetDefaultWalletId(v string) {
	o.DefaultWalletId = &v
}

func (o PaymentConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowedWalletTypes) {
		toSerialize["allowedWalletTypes"] = o.AllowedWalletTypes
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.DefaultWalletId) {
		toSerialize["defaultWalletId"] = o.DefaultWalletId
	}
	return toSerialize, nil
}

type NullablePaymentConfig struct {
	value *PaymentConfig
	isSet bool
}

func (v NullablePaymentConfig) Get() *PaymentConfig {
	return v.value
}

func (v *NullablePaymentConfig) Set(val *PaymentConfig) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentConfig) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentConfig(val *PaymentConfig) *NullablePaymentConfig {
	return &NullablePaymentConfig{value: val, isSet: true}
}

func (v NullablePaymentConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
