/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
	"time"
)

// checks if the BillingAddonRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BillingAddonRecord{}

// BillingAddonRecord struct for BillingAddonRecord
type BillingAddonRecord struct {
	Amount      *float32   `json:"amount,omitempty"`
	ChargeOn    *time.Time `json:"chargeOn,omitempty"`
	Description *string    `json:"description,omitempty"`
	Id          *string    `json:"id,omitempty"`
	Name        *string    `json:"name,omitempty"`
}

// NewBillingAddonRecord instantiates a new BillingAddonRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBillingAddonRecord() *BillingAddonRecord {
	this := BillingAddonRecord{}
	return &this
}

// NewBillingAddonRecordWithDefaults instantiates a new BillingAddonRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillingAddonRecordWithDefaults() *BillingAddonRecord {
	this := BillingAddonRecord{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *BillingAddonRecord) GetAmount() float32 {
	if o == nil || IsNil(o.Amount) {
		var ret float32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingAddonRecord) GetAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *BillingAddonRecord) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float32 and assigns it to the Amount field.
func (o *BillingAddonRecord) SetAmount(v float32) {
	o.Amount = &v
}

// GetChargeOn returns the ChargeOn field value if set, zero value otherwise.
func (o *BillingAddonRecord) GetChargeOn() time.Time {
	if o == nil || IsNil(o.ChargeOn) {
		var ret time.Time
		return ret
	}
	return *o.ChargeOn
}

// GetChargeOnOk returns a tuple with the ChargeOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingAddonRecord) GetChargeOnOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ChargeOn) {
		return nil, false
	}
	return o.ChargeOn, true
}

// HasChargeOn returns a boolean if a field has been set.
func (o *BillingAddonRecord) HasChargeOn() bool {
	if o != nil && !IsNil(o.ChargeOn) {
		return true
	}

	return false
}

// SetChargeOn gets a reference to the given time.Time and assigns it to the ChargeOn field.
func (o *BillingAddonRecord) SetChargeOn(v time.Time) {
	o.ChargeOn = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *BillingAddonRecord) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingAddonRecord) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *BillingAddonRecord) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *BillingAddonRecord) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BillingAddonRecord) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingAddonRecord) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BillingAddonRecord) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BillingAddonRecord) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BillingAddonRecord) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingAddonRecord) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BillingAddonRecord) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *BillingAddonRecord) SetName(v string) {
	o.Name = &v
}

func (o BillingAddonRecord) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BillingAddonRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.ChargeOn) {
		toSerialize["chargeOn"] = o.ChargeOn
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableBillingAddonRecord struct {
	value *BillingAddonRecord
	isSet bool
}

func (v NullableBillingAddonRecord) Get() *BillingAddonRecord {
	return v.value
}

func (v *NullableBillingAddonRecord) Set(val *BillingAddonRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingAddonRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingAddonRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingAddonRecord(val *BillingAddonRecord) *NullableBillingAddonRecord {
	return &NullableBillingAddonRecord{value: val, isSet: true}
}

func (v NullableBillingAddonRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingAddonRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
