/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the PaymentInstallment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentInstallment{}

// PaymentInstallment struct for PaymentInstallment
type PaymentInstallment struct {
	// The amount the buyer has paid for this installment. If there is a discount off the original price, the amount is the discounted price.
	Amount *float32 `json:"amount,omitempty"`
	// When the buyer will be charged for this installment. If it is null, the buyer will be charged on the effective date of the entitlement.
	ChargeOn *time.Time `json:"chargeOn,omitempty"`
	// The charge on date in string format. It is used for front-end display only.
	ChargeOnStr *string `json:"chargeOnStr,omitempty"`
	// Used in GCP Marketplace private offer as one-time credit. Default as zero if there is no credit.
	Credit *float32 `json:"credit,omitempty"`
	// The discount percentage off the original price. For GCP Marketplace, it can be discount off the commitment amount or discount off the usage price. The value is between 0 to 100. For example, 20 means 20% off. Default as zero if there is no discount.
	DiscountPercentage *float32 `json:"discountPercentage,omitempty"`
	// The original amount before discount if there is a discount off the original price. nil if there is no discount.
	OriginalAmount *float32 `json:"originalAmount,omitempty"`
}

// NewPaymentInstallment instantiates a new PaymentInstallment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentInstallment() *PaymentInstallment {
	this := PaymentInstallment{}
	return &this
}

// NewPaymentInstallmentWithDefaults instantiates a new PaymentInstallment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentInstallmentWithDefaults() *PaymentInstallment {
	this := PaymentInstallment{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *PaymentInstallment) GetAmount() float32 {
	if o == nil || IsNil(o.Amount) {
		var ret float32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInstallment) GetAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *PaymentInstallment) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float32 and assigns it to the Amount field.
func (o *PaymentInstallment) SetAmount(v float32) {
	o.Amount = &v
}

// GetChargeOn returns the ChargeOn field value if set, zero value otherwise.
func (o *PaymentInstallment) GetChargeOn() time.Time {
	if o == nil || IsNil(o.ChargeOn) {
		var ret time.Time
		return ret
	}
	return *o.ChargeOn
}

// GetChargeOnOk returns a tuple with the ChargeOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInstallment) GetChargeOnOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ChargeOn) {
		return nil, false
	}
	return o.ChargeOn, true
}

// HasChargeOn returns a boolean if a field has been set.
func (o *PaymentInstallment) HasChargeOn() bool {
	if o != nil && !IsNil(o.ChargeOn) {
		return true
	}

	return false
}

// SetChargeOn gets a reference to the given time.Time and assigns it to the ChargeOn field.
func (o *PaymentInstallment) SetChargeOn(v time.Time) {
	o.ChargeOn = &v
}

// GetChargeOnStr returns the ChargeOnStr field value if set, zero value otherwise.
func (o *PaymentInstallment) GetChargeOnStr() string {
	if o == nil || IsNil(o.ChargeOnStr) {
		var ret string
		return ret
	}
	return *o.ChargeOnStr
}

// GetChargeOnStrOk returns a tuple with the ChargeOnStr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInstallment) GetChargeOnStrOk() (*string, bool) {
	if o == nil || IsNil(o.ChargeOnStr) {
		return nil, false
	}
	return o.ChargeOnStr, true
}

// HasChargeOnStr returns a boolean if a field has been set.
func (o *PaymentInstallment) HasChargeOnStr() bool {
	if o != nil && !IsNil(o.ChargeOnStr) {
		return true
	}

	return false
}

// SetChargeOnStr gets a reference to the given string and assigns it to the ChargeOnStr field.
func (o *PaymentInstallment) SetChargeOnStr(v string) {
	o.ChargeOnStr = &v
}

// GetCredit returns the Credit field value if set, zero value otherwise.
func (o *PaymentInstallment) GetCredit() float32 {
	if o == nil || IsNil(o.Credit) {
		var ret float32
		return ret
	}
	return *o.Credit
}

// GetCreditOk returns a tuple with the Credit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInstallment) GetCreditOk() (*float32, bool) {
	if o == nil || IsNil(o.Credit) {
		return nil, false
	}
	return o.Credit, true
}

// HasCredit returns a boolean if a field has been set.
func (o *PaymentInstallment) HasCredit() bool {
	if o != nil && !IsNil(o.Credit) {
		return true
	}

	return false
}

// SetCredit gets a reference to the given float32 and assigns it to the Credit field.
func (o *PaymentInstallment) SetCredit(v float32) {
	o.Credit = &v
}

// GetDiscountPercentage returns the DiscountPercentage field value if set, zero value otherwise.
func (o *PaymentInstallment) GetDiscountPercentage() float32 {
	if o == nil || IsNil(o.DiscountPercentage) {
		var ret float32
		return ret
	}
	return *o.DiscountPercentage
}

// GetDiscountPercentageOk returns a tuple with the DiscountPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInstallment) GetDiscountPercentageOk() (*float32, bool) {
	if o == nil || IsNil(o.DiscountPercentage) {
		return nil, false
	}
	return o.DiscountPercentage, true
}

// HasDiscountPercentage returns a boolean if a field has been set.
func (o *PaymentInstallment) HasDiscountPercentage() bool {
	if o != nil && !IsNil(o.DiscountPercentage) {
		return true
	}

	return false
}

// SetDiscountPercentage gets a reference to the given float32 and assigns it to the DiscountPercentage field.
func (o *PaymentInstallment) SetDiscountPercentage(v float32) {
	o.DiscountPercentage = &v
}

// GetOriginalAmount returns the OriginalAmount field value if set, zero value otherwise.
func (o *PaymentInstallment) GetOriginalAmount() float32 {
	if o == nil || IsNil(o.OriginalAmount) {
		var ret float32
		return ret
	}
	return *o.OriginalAmount
}

// GetOriginalAmountOk returns a tuple with the OriginalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInstallment) GetOriginalAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.OriginalAmount) {
		return nil, false
	}
	return o.OriginalAmount, true
}

// HasOriginalAmount returns a boolean if a field has been set.
func (o *PaymentInstallment) HasOriginalAmount() bool {
	if o != nil && !IsNil(o.OriginalAmount) {
		return true
	}

	return false
}

// SetOriginalAmount gets a reference to the given float32 and assigns it to the OriginalAmount field.
func (o *PaymentInstallment) SetOriginalAmount(v float32) {
	o.OriginalAmount = &v
}

func (o PaymentInstallment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentInstallment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.ChargeOn) {
		toSerialize["chargeOn"] = o.ChargeOn
	}
	if !IsNil(o.ChargeOnStr) {
		toSerialize["chargeOnStr"] = o.ChargeOnStr
	}
	if !IsNil(o.Credit) {
		toSerialize["credit"] = o.Credit
	}
	if !IsNil(o.DiscountPercentage) {
		toSerialize["discountPercentage"] = o.DiscountPercentage
	}
	if !IsNil(o.OriginalAmount) {
		toSerialize["originalAmount"] = o.OriginalAmount
	}
	return toSerialize, nil
}

type NullablePaymentInstallment struct {
	value *PaymentInstallment
	isSet bool
}

func (v NullablePaymentInstallment) Get() *PaymentInstallment {
	return v.value
}

func (v *NullablePaymentInstallment) Set(val *PaymentInstallment) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentInstallment) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentInstallment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentInstallment(val *PaymentInstallment) *NullablePaymentInstallment {
	return &NullablePaymentInstallment{value: val, isSet: true}
}

func (v NullablePaymentInstallment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentInstallment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


