/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// OperationAPIService OperationAPI service
type OperationAPIService service

type ApiListOperationsRequest struct {
	ctx context.Context
	ApiService *OperationAPIService
	orgId string
	offerId *string
	entitlementId *string
	crmOpportunityId *string
	partnerOpportunityId *string
}

// filter by offerId
func (r ApiListOperationsRequest) OfferId(offerId string) ApiListOperationsRequest {
	r.offerId = &offerId
	return r
}

// filter by entitlementId
func (r ApiListOperationsRequest) EntitlementId(entitlementId string) ApiListOperationsRequest {
	r.entitlementId = &entitlementId
	return r
}

// filter by crmOpportunityId
func (r ApiListOperationsRequest) CrmOpportunityId(crmOpportunityId string) ApiListOperationsRequest {
	r.crmOpportunityId = &crmOpportunityId
	return r
}

// filter by partnerOpportunityId
func (r ApiListOperationsRequest) PartnerOpportunityId(partnerOpportunityId string) ApiListOperationsRequest {
	r.partnerOpportunityId = &partnerOpportunityId
	return r
}

func (r ApiListOperationsRequest) Execute() ([]Operation, *http.Response, error) {
	return r.ApiService.ListOperationsExecute(r)
}

/*
ListOperations list operations

List all long running operations under the given organization, offer, entitlement, crmOpportunity or partnerOpportunity. Only provide one filter on a request.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId Organization ID
 @return ApiListOperationsRequest
*/
func (a *OperationAPIService) ListOperations(ctx context.Context, orgId string) ApiListOperationsRequest {
	return ApiListOperationsRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
	}
}

// Execute executes the request
//  @return []Operation
func (a *OperationAPIService) ListOperationsExecute(r ApiListOperationsRequest) ([]Operation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Operation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OperationAPIService.ListOperations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/org/{orgId}/operation"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.offerId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offerId", r.offerId, "")
	}
	if r.entitlementId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "entitlementId", r.entitlementId, "")
	}
	if r.crmOpportunityId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "crmOpportunityId", r.crmOpportunityId, "")
	}
	if r.partnerOpportunityId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "partnerOpportunityId", r.partnerOpportunityId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerTokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
