/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the MeteringUsageRecordGroupMetaInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MeteringUsageRecordGroupMetaInfo{}

// MeteringUsageRecordGroupMetaInfo struct for MeteringUsageRecordGroupMetaInfo
type MeteringUsageRecordGroupMetaInfo struct {
	// The original records reported by the customer before convertion. If no dimension mapping is applied, this field is the same as the records field.
	OriginRecords *map[string]float32 `json:"originRecords,omitempty"`
	Source *UsageRecordGroupSource `json:"source,omitempty"`
	// The timestamp (UTC)) of when the usage records were generated. Optional, if not provided, the current report timestamp will be used.
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// NewMeteringUsageRecordGroupMetaInfo instantiates a new MeteringUsageRecordGroupMetaInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeteringUsageRecordGroupMetaInfo() *MeteringUsageRecordGroupMetaInfo {
	this := MeteringUsageRecordGroupMetaInfo{}
	return &this
}

// NewMeteringUsageRecordGroupMetaInfoWithDefaults instantiates a new MeteringUsageRecordGroupMetaInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMeteringUsageRecordGroupMetaInfoWithDefaults() *MeteringUsageRecordGroupMetaInfo {
	this := MeteringUsageRecordGroupMetaInfo{}
	return &this
}

// GetOriginRecords returns the OriginRecords field value if set, zero value otherwise.
func (o *MeteringUsageRecordGroupMetaInfo) GetOriginRecords() map[string]float32 {
	if o == nil || IsNil(o.OriginRecords) {
		var ret map[string]float32
		return ret
	}
	return *o.OriginRecords
}

// GetOriginRecordsOk returns a tuple with the OriginRecords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordGroupMetaInfo) GetOriginRecordsOk() (*map[string]float32, bool) {
	if o == nil || IsNil(o.OriginRecords) {
		return nil, false
	}
	return o.OriginRecords, true
}

// HasOriginRecords returns a boolean if a field has been set.
func (o *MeteringUsageRecordGroupMetaInfo) HasOriginRecords() bool {
	if o != nil && !IsNil(o.OriginRecords) {
		return true
	}

	return false
}

// SetOriginRecords gets a reference to the given map[string]float32 and assigns it to the OriginRecords field.
func (o *MeteringUsageRecordGroupMetaInfo) SetOriginRecords(v map[string]float32) {
	o.OriginRecords = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *MeteringUsageRecordGroupMetaInfo) GetSource() UsageRecordGroupSource {
	if o == nil || IsNil(o.Source) {
		var ret UsageRecordGroupSource
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordGroupMetaInfo) GetSourceOk() (*UsageRecordGroupSource, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *MeteringUsageRecordGroupMetaInfo) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given UsageRecordGroupSource and assigns it to the Source field.
func (o *MeteringUsageRecordGroupMetaInfo) SetSource(v UsageRecordGroupSource) {
	o.Source = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *MeteringUsageRecordGroupMetaInfo) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordGroupMetaInfo) GetTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *MeteringUsageRecordGroupMetaInfo) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *MeteringUsageRecordGroupMetaInfo) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

func (o MeteringUsageRecordGroupMetaInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MeteringUsageRecordGroupMetaInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OriginRecords) {
		toSerialize["originRecords"] = o.OriginRecords
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	return toSerialize, nil
}

type NullableMeteringUsageRecordGroupMetaInfo struct {
	value *MeteringUsageRecordGroupMetaInfo
	isSet bool
}

func (v NullableMeteringUsageRecordGroupMetaInfo) Get() *MeteringUsageRecordGroupMetaInfo {
	return v.value
}

func (v *NullableMeteringUsageRecordGroupMetaInfo) Set(val *MeteringUsageRecordGroupMetaInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableMeteringUsageRecordGroupMetaInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableMeteringUsageRecordGroupMetaInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeteringUsageRecordGroupMetaInfo(val *MeteringUsageRecordGroupMetaInfo) *NullableMeteringUsageRecordGroupMetaInfo {
	return &NullableMeteringUsageRecordGroupMetaInfo{value: val, isSet: true}
}

func (v NullableMeteringUsageRecordGroupMetaInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeteringUsageRecordGroupMetaInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


