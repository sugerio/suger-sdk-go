/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
	"fmt"
)

// GcpMarketplaceOfferProration the model 'GcpMarketplaceOfferProration'
type GcpMarketplaceOfferProration string

// List of GcpMarketplaceOfferProration
const (
	GcpMarketplaceOfferProration_UNSPECIFIED GcpMarketplaceOfferProration = "PRORATION_UNSPECIFIED"
	GcpMarketplaceOfferProration_NO          GcpMarketplaceOfferProration = "NOT_PRORATED_ANNIVERSARY_DATES"
	GcpMarketplaceOfferProration_YES         GcpMarketplaceOfferProration = "PRORATED"
)

// All allowed values of GcpMarketplaceOfferProration enum
var AllowedGcpMarketplaceOfferProrationEnumValues = []GcpMarketplaceOfferProration{
	"PRORATION_UNSPECIFIED",
	"NOT_PRORATED_ANNIVERSARY_DATES",
	"PRORATED",
}

func (v *GcpMarketplaceOfferProration) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GcpMarketplaceOfferProration(value)
	for _, existing := range AllowedGcpMarketplaceOfferProrationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GcpMarketplaceOfferProration", value)
}

// NewGcpMarketplaceOfferProrationFromValue returns a pointer to a valid GcpMarketplaceOfferProration
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGcpMarketplaceOfferProrationFromValue(v string) (*GcpMarketplaceOfferProration, error) {
	ev := GcpMarketplaceOfferProration(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GcpMarketplaceOfferProration: valid values are %v", v, AllowedGcpMarketplaceOfferProrationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GcpMarketplaceOfferProration) IsValid() bool {
	for _, existing := range AllowedGcpMarketplaceOfferProrationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GcpMarketplaceOfferProration value
func (v GcpMarketplaceOfferProration) Ptr() *GcpMarketplaceOfferProration {
	return &v
}

type NullableGcpMarketplaceOfferProration struct {
	value *GcpMarketplaceOfferProration
	isSet bool
}

func (v NullableGcpMarketplaceOfferProration) Get() *GcpMarketplaceOfferProration {
	return v.value
}

func (v *NullableGcpMarketplaceOfferProration) Set(val *GcpMarketplaceOfferProration) {
	v.value = val
	v.isSet = true
}

func (v NullableGcpMarketplaceOfferProration) IsSet() bool {
	return v.isSet
}

func (v *NullableGcpMarketplaceOfferProration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGcpMarketplaceOfferProration(val *GcpMarketplaceOfferProration) *NullableGcpMarketplaceOfferProration {
	return &NullableGcpMarketplaceOfferProration{value: val, isSet: true}
}

func (v NullableGcpMarketplaceOfferProration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGcpMarketplaceOfferProration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
