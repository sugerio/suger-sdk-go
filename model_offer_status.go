/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OfferStatus the model 'OfferStatus'
type OfferStatus string

// List of OfferStatus
const (
	OfferStatus_UNKNOWN            OfferStatus = ""
	OfferStatus_INVALID            OfferStatus = "INVALID"
	OfferStatus_ACCEPTED           OfferStatus = "ACCEPTED"
	OfferStatus_ACTIVE             OfferStatus = "ACTIVE"
	OfferStatus_CANCEL_FAILED      OfferStatus = "CANCEL_FAILED"
	OfferStatus_CANCEL_SUCCESS     OfferStatus = "CANCEL_SUCCESS"
	OfferStatus_CANCELLED          OfferStatus = "CANCELLED"
	OfferStatus_CREATE_FAILED      OfferStatus = "CREATE_FAILED"
	OfferStatus_CREATE_SUCCESS     OfferStatus = "CREATE_SUCCESS"
	OfferStatus_DELETED            OfferStatus = "DELETED"
	OfferStatus_DEPRECATED         OfferStatus = "DEPRECATED"
	OfferStatus_DRAFT              OfferStatus = "DRAFT"
	OfferStatus_EXPIRED            OfferStatus = "EXPIRED"
	OfferStatus_PENDING_ACCEPTANCE OfferStatus = "PENDING_ACCEPTANCE"
	OfferStatus_PENDING_CANCEL     OfferStatus = "PENDING_CANCEL"
	OfferStatus_PENDING_CREATE     OfferStatus = "PENDING_CREATE"
	OfferStatus_PENDING_UPDATE     OfferStatus = "PENDING_UPDATE"
	OfferStatus_PREVIEW            OfferStatus = "PREVIEW"
	OfferStatus_RESTRICTED         OfferStatus = "RESTRICTED"
	OfferStatus_TEST               OfferStatus = "TEST"
	OfferStatus_UPDATE_FAILED      OfferStatus = "UPDATE_FAILED"
	OfferStatus_UPDATE_SUCCESS     OfferStatus = "UPDATE_SUCCESS"
	OfferStatus_USED               OfferStatus = "USED"
)

// All allowed values of OfferStatus enum
var AllowedOfferStatusEnumValues = []OfferStatus{
	"",
	"INVALID",
	"ACCEPTED",
	"ACTIVE",
	"CANCEL_FAILED",
	"CANCEL_SUCCESS",
	"CANCELLED",
	"CREATE_FAILED",
	"CREATE_SUCCESS",
	"DELETED",
	"DEPRECATED",
	"DRAFT",
	"EXPIRED",
	"PENDING_ACCEPTANCE",
	"PENDING_CANCEL",
	"PENDING_CREATE",
	"PENDING_UPDATE",
	"PREVIEW",
	"RESTRICTED",
	"TEST",
	"UPDATE_FAILED",
	"UPDATE_SUCCESS",
	"USED",
}

func (v *OfferStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OfferStatus(value)
	for _, existing := range AllowedOfferStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OfferStatus", value)
}

// NewOfferStatusFromValue returns a pointer to a valid OfferStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOfferStatusFromValue(v string) (*OfferStatus, error) {
	ev := OfferStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OfferStatus: valid values are %v", v, AllowedOfferStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OfferStatus) IsValid() bool {
	for _, existing := range AllowedOfferStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OfferStatus value
func (v OfferStatus) Ptr() *OfferStatus {
	return &v
}

type NullableOfferStatus struct {
	value *OfferStatus
	isSet bool
}

func (v NullableOfferStatus) Get() *OfferStatus {
	return v.value
}

func (v *NullableOfferStatus) Set(val *OfferStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableOfferStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableOfferStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOfferStatus(val *OfferStatus) *NullableOfferStatus {
	return &NullableOfferStatus{value: val, isSet: true}
}

func (v NullableOfferStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOfferStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
