/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
)

// checks if the AzureIncludedBaseQuantity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureIncludedBaseQuantity{}

// AzureIncludedBaseQuantity struct for AzureIncludedBaseQuantity
type AzureIncludedBaseQuantity struct {
	IsInfinite    *bool    `json:"isInfinite,omitempty"`
	Quantity      *float32 `json:"quantity,omitempty"`
	RecurringUnit *string  `json:"recurringUnit,omitempty"`
}

// NewAzureIncludedBaseQuantity instantiates a new AzureIncludedBaseQuantity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureIncludedBaseQuantity() *AzureIncludedBaseQuantity {
	this := AzureIncludedBaseQuantity{}
	return &this
}

// NewAzureIncludedBaseQuantityWithDefaults instantiates a new AzureIncludedBaseQuantity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureIncludedBaseQuantityWithDefaults() *AzureIncludedBaseQuantity {
	this := AzureIncludedBaseQuantity{}
	return &this
}

// GetIsInfinite returns the IsInfinite field value if set, zero value otherwise.
func (o *AzureIncludedBaseQuantity) GetIsInfinite() bool {
	if o == nil || IsNil(o.IsInfinite) {
		var ret bool
		return ret
	}
	return *o.IsInfinite
}

// GetIsInfiniteOk returns a tuple with the IsInfinite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureIncludedBaseQuantity) GetIsInfiniteOk() (*bool, bool) {
	if o == nil || IsNil(o.IsInfinite) {
		return nil, false
	}
	return o.IsInfinite, true
}

// HasIsInfinite returns a boolean if a field has been set.
func (o *AzureIncludedBaseQuantity) HasIsInfinite() bool {
	if o != nil && !IsNil(o.IsInfinite) {
		return true
	}

	return false
}

// SetIsInfinite gets a reference to the given bool and assigns it to the IsInfinite field.
func (o *AzureIncludedBaseQuantity) SetIsInfinite(v bool) {
	o.IsInfinite = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *AzureIncludedBaseQuantity) GetQuantity() float32 {
	if o == nil || IsNil(o.Quantity) {
		var ret float32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureIncludedBaseQuantity) GetQuantityOk() (*float32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *AzureIncludedBaseQuantity) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given float32 and assigns it to the Quantity field.
func (o *AzureIncludedBaseQuantity) SetQuantity(v float32) {
	o.Quantity = &v
}

// GetRecurringUnit returns the RecurringUnit field value if set, zero value otherwise.
func (o *AzureIncludedBaseQuantity) GetRecurringUnit() string {
	if o == nil || IsNil(o.RecurringUnit) {
		var ret string
		return ret
	}
	return *o.RecurringUnit
}

// GetRecurringUnitOk returns a tuple with the RecurringUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureIncludedBaseQuantity) GetRecurringUnitOk() (*string, bool) {
	if o == nil || IsNil(o.RecurringUnit) {
		return nil, false
	}
	return o.RecurringUnit, true
}

// HasRecurringUnit returns a boolean if a field has been set.
func (o *AzureIncludedBaseQuantity) HasRecurringUnit() bool {
	if o != nil && !IsNil(o.RecurringUnit) {
		return true
	}

	return false
}

// SetRecurringUnit gets a reference to the given string and assigns it to the RecurringUnit field.
func (o *AzureIncludedBaseQuantity) SetRecurringUnit(v string) {
	o.RecurringUnit = &v
}

func (o AzureIncludedBaseQuantity) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureIncludedBaseQuantity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsInfinite) {
		toSerialize["isInfinite"] = o.IsInfinite
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.RecurringUnit) {
		toSerialize["recurringUnit"] = o.RecurringUnit
	}
	return toSerialize, nil
}

type NullableAzureIncludedBaseQuantity struct {
	value *AzureIncludedBaseQuantity
	isSet bool
}

func (v NullableAzureIncludedBaseQuantity) Get() *AzureIncludedBaseQuantity {
	return v.value
}

func (v *NullableAzureIncludedBaseQuantity) Set(val *AzureIncludedBaseQuantity) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureIncludedBaseQuantity) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureIncludedBaseQuantity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureIncludedBaseQuantity(val *AzureIncludedBaseQuantity) *NullableAzureIncludedBaseQuantity {
	return &NullableAzureIncludedBaseQuantity{value: val, isSet: true}
}

func (v NullableAzureIncludedBaseQuantity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureIncludedBaseQuantity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
