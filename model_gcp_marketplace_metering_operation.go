/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GcpMarketplaceMeteringOperation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GcpMarketplaceMeteringOperation{}

// GcpMarketplaceMeteringOperation struct for GcpMarketplaceMeteringOperation
type GcpMarketplaceMeteringOperation struct {
	// ConsumerId: Identity of the consumer who is using the service. This field should be filled in for the operations initiated by a consumer, but not for service-initiated operations that are not related to a specific consumer. - This can be in one of the following formats: - project:PROJECT_ID, - project`_`number:PROJECT_NUMBER, - projects/PROJECT_ID or PROJECT_NUMBER, - folders/FOLDER_NUMBER, - organizations/ORGANIZATION_NUMBER, - api`_`key:API_KEY.
	ConsumerId *string `json:"consumerId,omitempty"`
	// EndTime: End time of the operation. Required when the operation is used in ServiceController.Report, but optional when the operation is used in ServiceController.Check.
	EndTime *string `json:"endTime,omitempty"`
	// Labels: Labels describing the operation. Only the following labels are allowed: - Labels describing monitored resources as defined in the service configuration. - Default labels of metric values. When specified, labels defined in the metric value override these default. - The following labels defined by Google Cloud Platform: - `cloud.googleapis.com/location` describing the location where the operation happened, - `servicecontrol.googleapis.com/user_agent` describing the user agent of the API request, - `servicecontrol.googleapis.com/service_agent` describing the service used to handle the API request (e.g. ESP), - `servicecontrol.googleapis.com/platform` describing the platform where the API is served, such as App Engine, Compute Engine, or Kubernetes Engine.
	Labels *map[string]string `json:"labels,omitempty"`
	// MetricValueSets: Represents information about this operation. Each MetricValueSet corresponds to a metric defined in the service configuration. The data type used in the MetricValueSet must agree with the data type specified in the metric definition. Within a single operation, it is not allowed to have more than one MetricValue instances that have the same metric names and identical label value combinations. If a request has such duplicated MetricValue instances, the entire request is rejected with an invalid argument error.
	MetricValueSets []GcpMarketplaceMeteringMetricValueSet `json:"metricValueSets,omitempty"`
	// OperationId: Identity of the operation. This must be unique within the scope of the service that generated the operation. If the service calls Check() and Report() on the same operation, the two calls should carry the same id. UUID version 4 is recommended, though not required. In scenarios where an operation is computed from existing information and an idempotent id is desirable for deduplication purpose, UUID version 5 is recommended. See RFC 4122 for details.
	OperationId *string `json:"operationId,omitempty"`
	// OperationName: Fully qualified name of the operation. Reserved for future use.
	OperationName *string `json:"operationName,omitempty"`
	// StartTime: Required. Start time of the operation.
	StartTime *string `json:"startTime,omitempty"`
}

// NewGcpMarketplaceMeteringOperation instantiates a new GcpMarketplaceMeteringOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGcpMarketplaceMeteringOperation() *GcpMarketplaceMeteringOperation {
	this := GcpMarketplaceMeteringOperation{}
	return &this
}

// NewGcpMarketplaceMeteringOperationWithDefaults instantiates a new GcpMarketplaceMeteringOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGcpMarketplaceMeteringOperationWithDefaults() *GcpMarketplaceMeteringOperation {
	this := GcpMarketplaceMeteringOperation{}
	return &this
}

// GetConsumerId returns the ConsumerId field value if set, zero value otherwise.
func (o *GcpMarketplaceMeteringOperation) GetConsumerId() string {
	if o == nil || IsNil(o.ConsumerId) {
		var ret string
		return ret
	}
	return *o.ConsumerId
}

// GetConsumerIdOk returns a tuple with the ConsumerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpMarketplaceMeteringOperation) GetConsumerIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConsumerId) {
		return nil, false
	}
	return o.ConsumerId, true
}

// HasConsumerId returns a boolean if a field has been set.
func (o *GcpMarketplaceMeteringOperation) HasConsumerId() bool {
	if o != nil && !IsNil(o.ConsumerId) {
		return true
	}

	return false
}

// SetConsumerId gets a reference to the given string and assigns it to the ConsumerId field.
func (o *GcpMarketplaceMeteringOperation) SetConsumerId(v string) {
	o.ConsumerId = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *GcpMarketplaceMeteringOperation) GetEndTime() string {
	if o == nil || IsNil(o.EndTime) {
		var ret string
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpMarketplaceMeteringOperation) GetEndTimeOk() (*string, bool) {
	if o == nil || IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *GcpMarketplaceMeteringOperation) HasEndTime() bool {
	if o != nil && !IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given string and assigns it to the EndTime field.
func (o *GcpMarketplaceMeteringOperation) SetEndTime(v string) {
	o.EndTime = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *GcpMarketplaceMeteringOperation) GetLabels() map[string]string {
	if o == nil || IsNil(o.Labels) {
		var ret map[string]string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpMarketplaceMeteringOperation) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *GcpMarketplaceMeteringOperation) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *GcpMarketplaceMeteringOperation) SetLabels(v map[string]string) {
	o.Labels = &v
}

// GetMetricValueSets returns the MetricValueSets field value if set, zero value otherwise.
func (o *GcpMarketplaceMeteringOperation) GetMetricValueSets() []GcpMarketplaceMeteringMetricValueSet {
	if o == nil || IsNil(o.MetricValueSets) {
		var ret []GcpMarketplaceMeteringMetricValueSet
		return ret
	}
	return o.MetricValueSets
}

// GetMetricValueSetsOk returns a tuple with the MetricValueSets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpMarketplaceMeteringOperation) GetMetricValueSetsOk() ([]GcpMarketplaceMeteringMetricValueSet, bool) {
	if o == nil || IsNil(o.MetricValueSets) {
		return nil, false
	}
	return o.MetricValueSets, true
}

// HasMetricValueSets returns a boolean if a field has been set.
func (o *GcpMarketplaceMeteringOperation) HasMetricValueSets() bool {
	if o != nil && !IsNil(o.MetricValueSets) {
		return true
	}

	return false
}

// SetMetricValueSets gets a reference to the given []GcpMarketplaceMeteringMetricValueSet and assigns it to the MetricValueSets field.
func (o *GcpMarketplaceMeteringOperation) SetMetricValueSets(v []GcpMarketplaceMeteringMetricValueSet) {
	o.MetricValueSets = v
}

// GetOperationId returns the OperationId field value if set, zero value otherwise.
func (o *GcpMarketplaceMeteringOperation) GetOperationId() string {
	if o == nil || IsNil(o.OperationId) {
		var ret string
		return ret
	}
	return *o.OperationId
}

// GetOperationIdOk returns a tuple with the OperationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpMarketplaceMeteringOperation) GetOperationIdOk() (*string, bool) {
	if o == nil || IsNil(o.OperationId) {
		return nil, false
	}
	return o.OperationId, true
}

// HasOperationId returns a boolean if a field has been set.
func (o *GcpMarketplaceMeteringOperation) HasOperationId() bool {
	if o != nil && !IsNil(o.OperationId) {
		return true
	}

	return false
}

// SetOperationId gets a reference to the given string and assigns it to the OperationId field.
func (o *GcpMarketplaceMeteringOperation) SetOperationId(v string) {
	o.OperationId = &v
}

// GetOperationName returns the OperationName field value if set, zero value otherwise.
func (o *GcpMarketplaceMeteringOperation) GetOperationName() string {
	if o == nil || IsNil(o.OperationName) {
		var ret string
		return ret
	}
	return *o.OperationName
}

// GetOperationNameOk returns a tuple with the OperationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpMarketplaceMeteringOperation) GetOperationNameOk() (*string, bool) {
	if o == nil || IsNil(o.OperationName) {
		return nil, false
	}
	return o.OperationName, true
}

// HasOperationName returns a boolean if a field has been set.
func (o *GcpMarketplaceMeteringOperation) HasOperationName() bool {
	if o != nil && !IsNil(o.OperationName) {
		return true
	}

	return false
}

// SetOperationName gets a reference to the given string and assigns it to the OperationName field.
func (o *GcpMarketplaceMeteringOperation) SetOperationName(v string) {
	o.OperationName = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *GcpMarketplaceMeteringOperation) GetStartTime() string {
	if o == nil || IsNil(o.StartTime) {
		var ret string
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpMarketplaceMeteringOperation) GetStartTimeOk() (*string, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *GcpMarketplaceMeteringOperation) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given string and assigns it to the StartTime field.
func (o *GcpMarketplaceMeteringOperation) SetStartTime(v string) {
	o.StartTime = &v
}

func (o GcpMarketplaceMeteringOperation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GcpMarketplaceMeteringOperation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConsumerId) {
		toSerialize["consumerId"] = o.ConsumerId
	}
	if !IsNil(o.EndTime) {
		toSerialize["endTime"] = o.EndTime
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.MetricValueSets) {
		toSerialize["metricValueSets"] = o.MetricValueSets
	}
	if !IsNil(o.OperationId) {
		toSerialize["operationId"] = o.OperationId
	}
	if !IsNil(o.OperationName) {
		toSerialize["operationName"] = o.OperationName
	}
	if !IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	return toSerialize, nil
}

type NullableGcpMarketplaceMeteringOperation struct {
	value *GcpMarketplaceMeteringOperation
	isSet bool
}

func (v NullableGcpMarketplaceMeteringOperation) Get() *GcpMarketplaceMeteringOperation {
	return v.value
}

func (v *NullableGcpMarketplaceMeteringOperation) Set(val *GcpMarketplaceMeteringOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableGcpMarketplaceMeteringOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableGcpMarketplaceMeteringOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGcpMarketplaceMeteringOperation(val *GcpMarketplaceMeteringOperation) *NullableGcpMarketplaceMeteringOperation {
	return &NullableGcpMarketplaceMeteringOperation{value: val, isSet: true}
}

func (v NullableGcpMarketplaceMeteringOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGcpMarketplaceMeteringOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
