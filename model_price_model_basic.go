/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PriceModelBasic type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PriceModelBasic{}

// PriceModelBasic struct for PriceModelBasic
type PriceModelBasic struct {
	UnitAmount *float32 `json:"unitAmount,omitempty"`
}

// NewPriceModelBasic instantiates a new PriceModelBasic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPriceModelBasic() *PriceModelBasic {
	this := PriceModelBasic{}
	return &this
}

// NewPriceModelBasicWithDefaults instantiates a new PriceModelBasic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPriceModelBasicWithDefaults() *PriceModelBasic {
	this := PriceModelBasic{}
	return &this
}

// GetUnitAmount returns the UnitAmount field value if set, zero value otherwise.
func (o *PriceModelBasic) GetUnitAmount() float32 {
	if o == nil || IsNil(o.UnitAmount) {
		var ret float32
		return ret
	}
	return *o.UnitAmount
}

// GetUnitAmountOk returns a tuple with the UnitAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceModelBasic) GetUnitAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.UnitAmount) {
		return nil, false
	}
	return o.UnitAmount, true
}

// HasUnitAmount returns a boolean if a field has been set.
func (o *PriceModelBasic) HasUnitAmount() bool {
	if o != nil && !IsNil(o.UnitAmount) {
		return true
	}

	return false
}

// SetUnitAmount gets a reference to the given float32 and assigns it to the UnitAmount field.
func (o *PriceModelBasic) SetUnitAmount(v float32) {
	o.UnitAmount = &v
}

func (o PriceModelBasic) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PriceModelBasic) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UnitAmount) {
		toSerialize["unitAmount"] = o.UnitAmount
	}
	return toSerialize, nil
}

type NullablePriceModelBasic struct {
	value *PriceModelBasic
	isSet bool
}

func (v NullablePriceModelBasic) Get() *PriceModelBasic {
	return v.value
}

func (v *NullablePriceModelBasic) Set(val *PriceModelBasic) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceModelBasic) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceModelBasic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceModelBasic(val *PriceModelBasic) *NullablePriceModelBasic {
	return &NullablePriceModelBasic{value: val, isSet: true}
}

func (v NullablePriceModelBasic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceModelBasic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
