/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// BillingDiscountType the model 'BillingDiscountType'
type BillingDiscountType string

// List of BillingDiscountType
const (
	BillingDiscountType_PERCENTAGE BillingDiscountType = "PERCENTAGE"
	BillingDiscountType_ABSOLUTE   BillingDiscountType = "ABSOLUTE"
)

// All allowed values of BillingDiscountType enum
var AllowedBillingDiscountTypeEnumValues = []BillingDiscountType{
	"PERCENTAGE",
	"ABSOLUTE",
}

func (v *BillingDiscountType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BillingDiscountType(value)
	for _, existing := range AllowedBillingDiscountTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BillingDiscountType", value)
}

// NewBillingDiscountTypeFromValue returns a pointer to a valid BillingDiscountType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBillingDiscountTypeFromValue(v string) (*BillingDiscountType, error) {
	ev := BillingDiscountType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BillingDiscountType: valid values are %v", v, AllowedBillingDiscountTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BillingDiscountType) IsValid() bool {
	for _, existing := range AllowedBillingDiscountTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BillingDiscountType value
func (v BillingDiscountType) Ptr() *BillingDiscountType {
	return &v
}

type NullableBillingDiscountType struct {
	value *BillingDiscountType
	isSet bool
}

func (v NullableBillingDiscountType) Get() *BillingDiscountType {
	return v.value
}

func (v *NullableBillingDiscountType) Set(val *BillingDiscountType) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingDiscountType) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingDiscountType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingDiscountType(val *BillingDiscountType) *NullableBillingDiscountType {
	return &NullableBillingDiscountType{value: val, isSet: true}
}

func (v NullableBillingDiscountType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingDiscountType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
