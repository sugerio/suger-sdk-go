/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
)

// checks if the PartnerUsageMeteringConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PartnerUsageMeteringConfig{}

// PartnerUsageMeteringConfig struct for PartnerUsageMeteringConfig
type PartnerUsageMeteringConfig struct {
	// Deprecated: Use DimensionMappingV2 instead. The mapping of the source dimension key to the destination dimension key of the usage metering.
	DimensionMapping *map[string]UsageMeteringDimensionMappingValue `json:"dimensionMapping,omitempty"`
	// The mapping of the source dimension key to the destination dimension keys of the usage metering. The destination dimension keys are the list of the destination dimension keys. So the source dimension key can be mapped to multiple destination dimension keys.
	DimensionMappingV2      *map[string][]UsageMeteringDimensionMappingValue `json:"dimensionMappingV2,omitempty"`
	EnableBillableDimension *bool                                            `json:"enableBillableDimension,omitempty"`
	// Enable the commit (discount) with additional usage metering at list price. Only applicable if EnableCommitWithAdditionalUsageMetering is true. The default is false, which means the commit with additional usage metering at the discounted price in the private offer. If set to true, the additional usage is metered at the list price (the price in public product listing) instead of the discounted price.
	EnableCommitWithAdditionalUsageAtListPrice *bool `json:"enableCommitWithAdditionalUsageAtListPrice,omitempty"`
	// Enable the commit with additional usage metering. The default is false, which means all usage records are reported to partner no matter how much is the commit. If set to true, the usage records will be reported to partner only if the current commit has been exhausted.
	EnableCommitWithAdditionalUsageMetering *bool `json:"enableCommitWithAdditionalUsageMetering,omitempty"`
	// Enable the dimension mapping for the usage metering. The default is false, which means no dimension conversion and just use the origin dimension.
	EnableDimensionMapping *bool `json:"enableDimensionMapping,omitempty"`
	// The partner in this dimension mapping. Required. Such as AWS, AZURE or GCP.
	Partner *Partner `json:"partner,omitempty"`
}

// NewPartnerUsageMeteringConfig instantiates a new PartnerUsageMeteringConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPartnerUsageMeteringConfig() *PartnerUsageMeteringConfig {
	this := PartnerUsageMeteringConfig{}
	return &this
}

// NewPartnerUsageMeteringConfigWithDefaults instantiates a new PartnerUsageMeteringConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPartnerUsageMeteringConfigWithDefaults() *PartnerUsageMeteringConfig {
	this := PartnerUsageMeteringConfig{}
	return &this
}

// GetDimensionMapping returns the DimensionMapping field value if set, zero value otherwise.
func (o *PartnerUsageMeteringConfig) GetDimensionMapping() map[string]UsageMeteringDimensionMappingValue {
	if o == nil || IsNil(o.DimensionMapping) {
		var ret map[string]UsageMeteringDimensionMappingValue
		return ret
	}
	return *o.DimensionMapping
}

// GetDimensionMappingOk returns a tuple with the DimensionMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartnerUsageMeteringConfig) GetDimensionMappingOk() (*map[string]UsageMeteringDimensionMappingValue, bool) {
	if o == nil || IsNil(o.DimensionMapping) {
		return nil, false
	}
	return o.DimensionMapping, true
}

// HasDimensionMapping returns a boolean if a field has been set.
func (o *PartnerUsageMeteringConfig) HasDimensionMapping() bool {
	if o != nil && !IsNil(o.DimensionMapping) {
		return true
	}

	return false
}

// SetDimensionMapping gets a reference to the given map[string]UsageMeteringDimensionMappingValue and assigns it to the DimensionMapping field.
func (o *PartnerUsageMeteringConfig) SetDimensionMapping(v map[string]UsageMeteringDimensionMappingValue) {
	o.DimensionMapping = &v
}

// GetDimensionMappingV2 returns the DimensionMappingV2 field value if set, zero value otherwise.
func (o *PartnerUsageMeteringConfig) GetDimensionMappingV2() map[string][]UsageMeteringDimensionMappingValue {
	if o == nil || IsNil(o.DimensionMappingV2) {
		var ret map[string][]UsageMeteringDimensionMappingValue
		return ret
	}
	return *o.DimensionMappingV2
}

// GetDimensionMappingV2Ok returns a tuple with the DimensionMappingV2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartnerUsageMeteringConfig) GetDimensionMappingV2Ok() (*map[string][]UsageMeteringDimensionMappingValue, bool) {
	if o == nil || IsNil(o.DimensionMappingV2) {
		return nil, false
	}
	return o.DimensionMappingV2, true
}

// HasDimensionMappingV2 returns a boolean if a field has been set.
func (o *PartnerUsageMeteringConfig) HasDimensionMappingV2() bool {
	if o != nil && !IsNil(o.DimensionMappingV2) {
		return true
	}

	return false
}

// SetDimensionMappingV2 gets a reference to the given map[string][]UsageMeteringDimensionMappingValue and assigns it to the DimensionMappingV2 field.
func (o *PartnerUsageMeteringConfig) SetDimensionMappingV2(v map[string][]UsageMeteringDimensionMappingValue) {
	o.DimensionMappingV2 = &v
}

// GetEnableBillableDimension returns the EnableBillableDimension field value if set, zero value otherwise.
func (o *PartnerUsageMeteringConfig) GetEnableBillableDimension() bool {
	if o == nil || IsNil(o.EnableBillableDimension) {
		var ret bool
		return ret
	}
	return *o.EnableBillableDimension
}

// GetEnableBillableDimensionOk returns a tuple with the EnableBillableDimension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartnerUsageMeteringConfig) GetEnableBillableDimensionOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableBillableDimension) {
		return nil, false
	}
	return o.EnableBillableDimension, true
}

// HasEnableBillableDimension returns a boolean if a field has been set.
func (o *PartnerUsageMeteringConfig) HasEnableBillableDimension() bool {
	if o != nil && !IsNil(o.EnableBillableDimension) {
		return true
	}

	return false
}

// SetEnableBillableDimension gets a reference to the given bool and assigns it to the EnableBillableDimension field.
func (o *PartnerUsageMeteringConfig) SetEnableBillableDimension(v bool) {
	o.EnableBillableDimension = &v
}

// GetEnableCommitWithAdditionalUsageAtListPrice returns the EnableCommitWithAdditionalUsageAtListPrice field value if set, zero value otherwise.
func (o *PartnerUsageMeteringConfig) GetEnableCommitWithAdditionalUsageAtListPrice() bool {
	if o == nil || IsNil(o.EnableCommitWithAdditionalUsageAtListPrice) {
		var ret bool
		return ret
	}
	return *o.EnableCommitWithAdditionalUsageAtListPrice
}

// GetEnableCommitWithAdditionalUsageAtListPriceOk returns a tuple with the EnableCommitWithAdditionalUsageAtListPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartnerUsageMeteringConfig) GetEnableCommitWithAdditionalUsageAtListPriceOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableCommitWithAdditionalUsageAtListPrice) {
		return nil, false
	}
	return o.EnableCommitWithAdditionalUsageAtListPrice, true
}

// HasEnableCommitWithAdditionalUsageAtListPrice returns a boolean if a field has been set.
func (o *PartnerUsageMeteringConfig) HasEnableCommitWithAdditionalUsageAtListPrice() bool {
	if o != nil && !IsNil(o.EnableCommitWithAdditionalUsageAtListPrice) {
		return true
	}

	return false
}

// SetEnableCommitWithAdditionalUsageAtListPrice gets a reference to the given bool and assigns it to the EnableCommitWithAdditionalUsageAtListPrice field.
func (o *PartnerUsageMeteringConfig) SetEnableCommitWithAdditionalUsageAtListPrice(v bool) {
	o.EnableCommitWithAdditionalUsageAtListPrice = &v
}

// GetEnableCommitWithAdditionalUsageMetering returns the EnableCommitWithAdditionalUsageMetering field value if set, zero value otherwise.
func (o *PartnerUsageMeteringConfig) GetEnableCommitWithAdditionalUsageMetering() bool {
	if o == nil || IsNil(o.EnableCommitWithAdditionalUsageMetering) {
		var ret bool
		return ret
	}
	return *o.EnableCommitWithAdditionalUsageMetering
}

// GetEnableCommitWithAdditionalUsageMeteringOk returns a tuple with the EnableCommitWithAdditionalUsageMetering field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartnerUsageMeteringConfig) GetEnableCommitWithAdditionalUsageMeteringOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableCommitWithAdditionalUsageMetering) {
		return nil, false
	}
	return o.EnableCommitWithAdditionalUsageMetering, true
}

// HasEnableCommitWithAdditionalUsageMetering returns a boolean if a field has been set.
func (o *PartnerUsageMeteringConfig) HasEnableCommitWithAdditionalUsageMetering() bool {
	if o != nil && !IsNil(o.EnableCommitWithAdditionalUsageMetering) {
		return true
	}

	return false
}

// SetEnableCommitWithAdditionalUsageMetering gets a reference to the given bool and assigns it to the EnableCommitWithAdditionalUsageMetering field.
func (o *PartnerUsageMeteringConfig) SetEnableCommitWithAdditionalUsageMetering(v bool) {
	o.EnableCommitWithAdditionalUsageMetering = &v
}

// GetEnableDimensionMapping returns the EnableDimensionMapping field value if set, zero value otherwise.
func (o *PartnerUsageMeteringConfig) GetEnableDimensionMapping() bool {
	if o == nil || IsNil(o.EnableDimensionMapping) {
		var ret bool
		return ret
	}
	return *o.EnableDimensionMapping
}

// GetEnableDimensionMappingOk returns a tuple with the EnableDimensionMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartnerUsageMeteringConfig) GetEnableDimensionMappingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDimensionMapping) {
		return nil, false
	}
	return o.EnableDimensionMapping, true
}

// HasEnableDimensionMapping returns a boolean if a field has been set.
func (o *PartnerUsageMeteringConfig) HasEnableDimensionMapping() bool {
	if o != nil && !IsNil(o.EnableDimensionMapping) {
		return true
	}

	return false
}

// SetEnableDimensionMapping gets a reference to the given bool and assigns it to the EnableDimensionMapping field.
func (o *PartnerUsageMeteringConfig) SetEnableDimensionMapping(v bool) {
	o.EnableDimensionMapping = &v
}

// GetPartner returns the Partner field value if set, zero value otherwise.
func (o *PartnerUsageMeteringConfig) GetPartner() Partner {
	if o == nil || IsNil(o.Partner) {
		var ret Partner
		return ret
	}
	return *o.Partner
}

// GetPartnerOk returns a tuple with the Partner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartnerUsageMeteringConfig) GetPartnerOk() (*Partner, bool) {
	if o == nil || IsNil(o.Partner) {
		return nil, false
	}
	return o.Partner, true
}

// HasPartner returns a boolean if a field has been set.
func (o *PartnerUsageMeteringConfig) HasPartner() bool {
	if o != nil && !IsNil(o.Partner) {
		return true
	}

	return false
}

// SetPartner gets a reference to the given Partner and assigns it to the Partner field.
func (o *PartnerUsageMeteringConfig) SetPartner(v Partner) {
	o.Partner = &v
}

func (o PartnerUsageMeteringConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PartnerUsageMeteringConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DimensionMapping) {
		toSerialize["dimensionMapping"] = o.DimensionMapping
	}
	if !IsNil(o.DimensionMappingV2) {
		toSerialize["dimensionMappingV2"] = o.DimensionMappingV2
	}
	if !IsNil(o.EnableBillableDimension) {
		toSerialize["enableBillableDimension"] = o.EnableBillableDimension
	}
	if !IsNil(o.EnableCommitWithAdditionalUsageAtListPrice) {
		toSerialize["enableCommitWithAdditionalUsageAtListPrice"] = o.EnableCommitWithAdditionalUsageAtListPrice
	}
	if !IsNil(o.EnableCommitWithAdditionalUsageMetering) {
		toSerialize["enableCommitWithAdditionalUsageMetering"] = o.EnableCommitWithAdditionalUsageMetering
	}
	if !IsNil(o.EnableDimensionMapping) {
		toSerialize["enableDimensionMapping"] = o.EnableDimensionMapping
	}
	if !IsNil(o.Partner) {
		toSerialize["partner"] = o.Partner
	}
	return toSerialize, nil
}

type NullablePartnerUsageMeteringConfig struct {
	value *PartnerUsageMeteringConfig
	isSet bool
}

func (v NullablePartnerUsageMeteringConfig) Get() *PartnerUsageMeteringConfig {
	return v.value
}

func (v *NullablePartnerUsageMeteringConfig) Set(val *PartnerUsageMeteringConfig) {
	v.value = val
	v.isSet = true
}

func (v NullablePartnerUsageMeteringConfig) IsSet() bool {
	return v.isSet
}

func (v *NullablePartnerUsageMeteringConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartnerUsageMeteringConfig(val *PartnerUsageMeteringConfig) *NullablePartnerUsageMeteringConfig {
	return &NullablePartnerUsageMeteringConfig{value: val, isSet: true}
}

func (v NullablePartnerUsageMeteringConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartnerUsageMeteringConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
