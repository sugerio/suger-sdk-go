/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
)

// checks if the AdyenBuyer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdyenBuyer{}

// AdyenBuyer struct for AdyenBuyer
type AdyenBuyer struct {
	// Settings store key-value pairs such as paymentMethodId,syncWithProvider,providerPaymentMethods.
	Settings map[string]interface{} `json:"settings,omitempty"`
	// The shopperId on the adyen platform corresponding to the buyer.
	ShopperId *string `json:"shopperId,omitempty"`
}

// NewAdyenBuyer instantiates a new AdyenBuyer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdyenBuyer() *AdyenBuyer {
	this := AdyenBuyer{}
	return &this
}

// NewAdyenBuyerWithDefaults instantiates a new AdyenBuyer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdyenBuyerWithDefaults() *AdyenBuyer {
	this := AdyenBuyer{}
	return &this
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *AdyenBuyer) GetSettings() map[string]interface{} {
	if o == nil || IsNil(o.Settings) {
		var ret map[string]interface{}
		return ret
	}
	return o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdyenBuyer) GetSettingsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Settings) {
		return map[string]interface{}{}, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *AdyenBuyer) HasSettings() bool {
	if o != nil && !IsNil(o.Settings) {
		return true
	}

	return false
}

// SetSettings gets a reference to the given map[string]interface{} and assigns it to the Settings field.
func (o *AdyenBuyer) SetSettings(v map[string]interface{}) {
	o.Settings = v
}

// GetShopperId returns the ShopperId field value if set, zero value otherwise.
func (o *AdyenBuyer) GetShopperId() string {
	if o == nil || IsNil(o.ShopperId) {
		var ret string
		return ret
	}
	return *o.ShopperId
}

// GetShopperIdOk returns a tuple with the ShopperId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdyenBuyer) GetShopperIdOk() (*string, bool) {
	if o == nil || IsNil(o.ShopperId) {
		return nil, false
	}
	return o.ShopperId, true
}

// HasShopperId returns a boolean if a field has been set.
func (o *AdyenBuyer) HasShopperId() bool {
	if o != nil && !IsNil(o.ShopperId) {
		return true
	}

	return false
}

// SetShopperId gets a reference to the given string and assigns it to the ShopperId field.
func (o *AdyenBuyer) SetShopperId(v string) {
	o.ShopperId = &v
}

func (o AdyenBuyer) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdyenBuyer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Settings) {
		toSerialize["settings"] = o.Settings
	}
	if !IsNil(o.ShopperId) {
		toSerialize["shopperId"] = o.ShopperId
	}
	return toSerialize, nil
}

type NullableAdyenBuyer struct {
	value *AdyenBuyer
	isSet bool
}

func (v NullableAdyenBuyer) Get() *AdyenBuyer {
	return v.value
}

func (v *NullableAdyenBuyer) Set(val *AdyenBuyer) {
	v.value = val
	v.isSet = true
}

func (v NullableAdyenBuyer) IsSet() bool {
	return v.isSet
}

func (v *NullableAdyenBuyer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdyenBuyer(val *AdyenBuyer) *NullableAdyenBuyer {
	return &NullableAdyenBuyer{value: val, isSet: true}
}

func (v NullableAdyenBuyer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdyenBuyer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
