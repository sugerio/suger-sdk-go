/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the NewUsageRecordGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NewUsageRecordGroup{}

// NewUsageRecordGroup struct for NewUsageRecordGroup
type NewUsageRecordGroup struct {
	EntitlementID string `json:"entitlementID"`
	MetaInfo *MeteringUsageRecordGroupMetaInfo `json:"metaInfo,omitempty"`
	Records map[string]float32 `json:"records"`
	// The timestamp of when the usage records were generated. Optional, if not provided, the current report timestamp will be used. This is not the timestamp of when the usage records were reported to Suger.
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// NewNewUsageRecordGroup instantiates a new NewUsageRecordGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewUsageRecordGroup(entitlementID string, records map[string]float32) *NewUsageRecordGroup {
	this := NewUsageRecordGroup{}
	this.EntitlementID = entitlementID
	this.Records = records
	return &this
}

// NewNewUsageRecordGroupWithDefaults instantiates a new NewUsageRecordGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewUsageRecordGroupWithDefaults() *NewUsageRecordGroup {
	this := NewUsageRecordGroup{}
	return &this
}

// GetEntitlementID returns the EntitlementID field value
func (o *NewUsageRecordGroup) GetEntitlementID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntitlementID
}

// GetEntitlementIDOk returns a tuple with the EntitlementID field value
// and a boolean to check if the value has been set.
func (o *NewUsageRecordGroup) GetEntitlementIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntitlementID, true
}

// SetEntitlementID sets field value
func (o *NewUsageRecordGroup) SetEntitlementID(v string) {
	o.EntitlementID = v
}

// GetMetaInfo returns the MetaInfo field value if set, zero value otherwise.
func (o *NewUsageRecordGroup) GetMetaInfo() MeteringUsageRecordGroupMetaInfo {
	if o == nil || IsNil(o.MetaInfo) {
		var ret MeteringUsageRecordGroupMetaInfo
		return ret
	}
	return *o.MetaInfo
}

// GetMetaInfoOk returns a tuple with the MetaInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewUsageRecordGroup) GetMetaInfoOk() (*MeteringUsageRecordGroupMetaInfo, bool) {
	if o == nil || IsNil(o.MetaInfo) {
		return nil, false
	}
	return o.MetaInfo, true
}

// HasMetaInfo returns a boolean if a field has been set.
func (o *NewUsageRecordGroup) HasMetaInfo() bool {
	if o != nil && !IsNil(o.MetaInfo) {
		return true
	}

	return false
}

// SetMetaInfo gets a reference to the given MeteringUsageRecordGroupMetaInfo and assigns it to the MetaInfo field.
func (o *NewUsageRecordGroup) SetMetaInfo(v MeteringUsageRecordGroupMetaInfo) {
	o.MetaInfo = &v
}

// GetRecords returns the Records field value
func (o *NewUsageRecordGroup) GetRecords() map[string]float32 {
	if o == nil {
		var ret map[string]float32
		return ret
	}

	return o.Records
}

// GetRecordsOk returns a tuple with the Records field value
// and a boolean to check if the value has been set.
func (o *NewUsageRecordGroup) GetRecordsOk() (*map[string]float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Records, true
}

// SetRecords sets field value
func (o *NewUsageRecordGroup) SetRecords(v map[string]float32) {
	o.Records = v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *NewUsageRecordGroup) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewUsageRecordGroup) GetTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *NewUsageRecordGroup) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *NewUsageRecordGroup) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

func (o NewUsageRecordGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NewUsageRecordGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["entitlementID"] = o.EntitlementID
	if !IsNil(o.MetaInfo) {
		toSerialize["metaInfo"] = o.MetaInfo
	}
	toSerialize["records"] = o.Records
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	return toSerialize, nil
}

type NullableNewUsageRecordGroup struct {
	value *NewUsageRecordGroup
	isSet bool
}

func (v NullableNewUsageRecordGroup) Get() *NewUsageRecordGroup {
	return v.value
}

func (v *NullableNewUsageRecordGroup) Set(val *NewUsageRecordGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableNewUsageRecordGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableNewUsageRecordGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewUsageRecordGroup(val *NewUsageRecordGroup) *NullableNewUsageRecordGroup {
	return &NullableNewUsageRecordGroup{value: val, isSet: true}
}

func (v NullableNewUsageRecordGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewUsageRecordGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


