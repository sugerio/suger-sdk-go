/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
	"fmt"
)

// AuditingEventPriority the model 'AuditingEventPriority'
type AuditingEventPriority string

// List of AuditingEventPriority
const (
	AuditingEventPriority_UNKNOWN  AuditingEventPriority = ""
	AuditingEventPriority_LOW      AuditingEventPriority = "LOW"
	AuditingEventPriority_MEDIUM   AuditingEventPriority = "MEDIUM"
	AuditingEventPriority_HIGH     AuditingEventPriority = "HIGH"
	AuditingEventPriority_CRITICAL AuditingEventPriority = "CRITICAL"
)

// All allowed values of AuditingEventPriority enum
var AllowedAuditingEventPriorityEnumValues = []AuditingEventPriority{
	"",
	"LOW",
	"MEDIUM",
	"HIGH",
	"CRITICAL",
}

func (v *AuditingEventPriority) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AuditingEventPriority(value)
	for _, existing := range AllowedAuditingEventPriorityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AuditingEventPriority", value)
}

// NewAuditingEventPriorityFromValue returns a pointer to a valid AuditingEventPriority
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuditingEventPriorityFromValue(v string) (*AuditingEventPriority, error) {
	ev := AuditingEventPriority(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AuditingEventPriority: valid values are %v", v, AllowedAuditingEventPriorityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AuditingEventPriority) IsValid() bool {
	for _, existing := range AllowedAuditingEventPriorityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AuditingEventPriority value
func (v AuditingEventPriority) Ptr() *AuditingEventPriority {
	return &v
}

type NullableAuditingEventPriority struct {
	value *AuditingEventPriority
	isSet bool
}

func (v NullableAuditingEventPriority) Get() *AuditingEventPriority {
	return v.value
}

func (v *NullableAuditingEventPriority) Set(val *AuditingEventPriority) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditingEventPriority) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditingEventPriority) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditingEventPriority(val *AuditingEventPriority) *NullableAuditingEventPriority {
	return &NullableAuditingEventPriority{value: val, isSet: true}
}

func (v NullableAuditingEventPriority) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditingEventPriority) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
