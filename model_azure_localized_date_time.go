/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
)

// checks if the AzureLocalizedDateTime type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureLocalizedDateTime{}

// AzureLocalizedDateTime struct for AzureLocalizedDateTime
type AzureLocalizedDateTime struct {
	DateTimeInUtc     *string `json:"dateTimeInUtc,omitempty"`
	LocalizePerMarket *bool   `json:"localizePerMarket,omitempty"`
}

// NewAzureLocalizedDateTime instantiates a new AzureLocalizedDateTime object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureLocalizedDateTime() *AzureLocalizedDateTime {
	this := AzureLocalizedDateTime{}
	return &this
}

// NewAzureLocalizedDateTimeWithDefaults instantiates a new AzureLocalizedDateTime object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureLocalizedDateTimeWithDefaults() *AzureLocalizedDateTime {
	this := AzureLocalizedDateTime{}
	return &this
}

// GetDateTimeInUtc returns the DateTimeInUtc field value if set, zero value otherwise.
func (o *AzureLocalizedDateTime) GetDateTimeInUtc() string {
	if o == nil || IsNil(o.DateTimeInUtc) {
		var ret string
		return ret
	}
	return *o.DateTimeInUtc
}

// GetDateTimeInUtcOk returns a tuple with the DateTimeInUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureLocalizedDateTime) GetDateTimeInUtcOk() (*string, bool) {
	if o == nil || IsNil(o.DateTimeInUtc) {
		return nil, false
	}
	return o.DateTimeInUtc, true
}

// HasDateTimeInUtc returns a boolean if a field has been set.
func (o *AzureLocalizedDateTime) HasDateTimeInUtc() bool {
	if o != nil && !IsNil(o.DateTimeInUtc) {
		return true
	}

	return false
}

// SetDateTimeInUtc gets a reference to the given string and assigns it to the DateTimeInUtc field.
func (o *AzureLocalizedDateTime) SetDateTimeInUtc(v string) {
	o.DateTimeInUtc = &v
}

// GetLocalizePerMarket returns the LocalizePerMarket field value if set, zero value otherwise.
func (o *AzureLocalizedDateTime) GetLocalizePerMarket() bool {
	if o == nil || IsNil(o.LocalizePerMarket) {
		var ret bool
		return ret
	}
	return *o.LocalizePerMarket
}

// GetLocalizePerMarketOk returns a tuple with the LocalizePerMarket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureLocalizedDateTime) GetLocalizePerMarketOk() (*bool, bool) {
	if o == nil || IsNil(o.LocalizePerMarket) {
		return nil, false
	}
	return o.LocalizePerMarket, true
}

// HasLocalizePerMarket returns a boolean if a field has been set.
func (o *AzureLocalizedDateTime) HasLocalizePerMarket() bool {
	if o != nil && !IsNil(o.LocalizePerMarket) {
		return true
	}

	return false
}

// SetLocalizePerMarket gets a reference to the given bool and assigns it to the LocalizePerMarket field.
func (o *AzureLocalizedDateTime) SetLocalizePerMarket(v bool) {
	o.LocalizePerMarket = &v
}

func (o AzureLocalizedDateTime) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureLocalizedDateTime) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DateTimeInUtc) {
		toSerialize["dateTimeInUtc"] = o.DateTimeInUtc
	}
	if !IsNil(o.LocalizePerMarket) {
		toSerialize["localizePerMarket"] = o.LocalizePerMarket
	}
	return toSerialize, nil
}

type NullableAzureLocalizedDateTime struct {
	value *AzureLocalizedDateTime
	isSet bool
}

func (v NullableAzureLocalizedDateTime) Get() *AzureLocalizedDateTime {
	return v.value
}

func (v *NullableAzureLocalizedDateTime) Set(val *AzureLocalizedDateTime) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureLocalizedDateTime) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureLocalizedDateTime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureLocalizedDateTime(val *AzureLocalizedDateTime) *NullableAzureLocalizedDateTime {
	return &NullableAzureLocalizedDateTime{value: val, isSet: true}
}

func (v NullableAzureLocalizedDateTime) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureLocalizedDateTime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
