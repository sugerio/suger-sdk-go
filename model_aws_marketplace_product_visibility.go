/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AwsMarketplaceProductVisibility the model 'AwsMarketplaceProductVisibility'
type AwsMarketplaceProductVisibility string

// List of AwsMarketplaceProductVisibility
const (
	AwsMarketplaceProductVisibility_Limited     AwsMarketplaceProductVisibility = "Limited"
	AwsMarketplaceProductVisibility_Public      AwsMarketplaceProductVisibility = "Public"
	AwsMarketplaceProductVisibility_Restricted  AwsMarketplaceProductVisibility = "Restricted"
	AwsMarketplaceProductVisibility_Unavailable AwsMarketplaceProductVisibility = "Unavailable"
	AwsMarketplaceProductVisibility_Draft       AwsMarketplaceProductVisibility = "Draft"
)

// All allowed values of AwsMarketplaceProductVisibility enum
var AllowedAwsMarketplaceProductVisibilityEnumValues = []AwsMarketplaceProductVisibility{
	"Limited",
	"Public",
	"Restricted",
	"Unavailable",
	"Draft",
}

func (v *AwsMarketplaceProductVisibility) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AwsMarketplaceProductVisibility(value)
	for _, existing := range AllowedAwsMarketplaceProductVisibilityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AwsMarketplaceProductVisibility", value)
}

// NewAwsMarketplaceProductVisibilityFromValue returns a pointer to a valid AwsMarketplaceProductVisibility
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAwsMarketplaceProductVisibilityFromValue(v string) (*AwsMarketplaceProductVisibility, error) {
	ev := AwsMarketplaceProductVisibility(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AwsMarketplaceProductVisibility: valid values are %v", v, AllowedAwsMarketplaceProductVisibilityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AwsMarketplaceProductVisibility) IsValid() bool {
	for _, existing := range AllowedAwsMarketplaceProductVisibilityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AwsMarketplaceProductVisibility value
func (v AwsMarketplaceProductVisibility) Ptr() *AwsMarketplaceProductVisibility {
	return &v
}

type NullableAwsMarketplaceProductVisibility struct {
	value *AwsMarketplaceProductVisibility
	isSet bool
}

func (v NullableAwsMarketplaceProductVisibility) Get() *AwsMarketplaceProductVisibility {
	return v.value
}

func (v *NullableAwsMarketplaceProductVisibility) Set(val *AwsMarketplaceProductVisibility) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsMarketplaceProductVisibility) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsMarketplaceProductVisibility) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsMarketplaceProductVisibility(val *AwsMarketplaceProductVisibility) *NullableAwsMarketplaceProductVisibility {
	return &NullableAwsMarketplaceProductVisibility{value: val, isSet: true}
}

func (v NullableAwsMarketplaceProductVisibility) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsMarketplaceProductVisibility) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
