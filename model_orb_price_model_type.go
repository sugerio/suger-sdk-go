/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OrbPriceModelType the model 'OrbPriceModelType'
type OrbPriceModelType string

// List of OrbPriceModelType
const (
	OrbPriceModelType_UNKNOWN OrbPriceModelType = ""
	OrbPriceModelType_UNIT OrbPriceModelType = "unit"
	OrbPriceModelType_TIERED OrbPriceModelType = "tiered"
	OrbPriceModelType_BULK OrbPriceModelType = "bulk"
	OrbPriceModelType_PACKAGE OrbPriceModelType = "package"
	OrbPriceModelType_BPS OrbPriceModelType = "bps"
	OrbPriceModelType_TIERED_BPS OrbPriceModelType = "tiered_bps"
	OrbPriceModelType_BULK_BPS OrbPriceModelType = "bulk_bps"
	OrbPriceModelType_MATRIX OrbPriceModelType = "matrix"
)

// All allowed values of OrbPriceModelType enum
var AllowedOrbPriceModelTypeEnumValues = []OrbPriceModelType{
	"",
	"unit",
	"tiered",
	"bulk",
	"package",
	"bps",
	"tiered_bps",
	"bulk_bps",
	"matrix",
}

func (v *OrbPriceModelType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrbPriceModelType(value)
	for _, existing := range AllowedOrbPriceModelTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrbPriceModelType", value)
}

// NewOrbPriceModelTypeFromValue returns a pointer to a valid OrbPriceModelType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrbPriceModelTypeFromValue(v string) (*OrbPriceModelType, error) {
	ev := OrbPriceModelType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrbPriceModelType: valid values are %v", v, AllowedOrbPriceModelTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrbPriceModelType) IsValid() bool {
	for _, existing := range AllowedOrbPriceModelTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrbPriceModelType value
func (v OrbPriceModelType) Ptr() *OrbPriceModelType {
	return &v
}

type NullableOrbPriceModelType struct {
	value *OrbPriceModelType
	isSet bool
}

func (v NullableOrbPriceModelType) Get() *OrbPriceModelType {
	return v.value
}

func (v *NullableOrbPriceModelType) Set(val *OrbPriceModelType) {
	v.value = val
	v.isSet = true
}

func (v NullableOrbPriceModelType) IsSet() bool {
	return v.isSet
}

func (v *NullableOrbPriceModelType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrbPriceModelType(val *OrbPriceModelType) *NullableOrbPriceModelType {
	return &NullableOrbPriceModelType{value: val, isSet: true}
}

func (v NullableOrbPriceModelType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrbPriceModelType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

