/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GcpAmountConstraint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GcpAmountConstraint{}

// GcpAmountConstraint struct for GcpAmountConstraint
type GcpAmountConstraint struct {
	DefaultAmount *GcpAmountUnit `json:"defaultAmount,omitempty"`
	MaxAmount     *GcpAmountUnit `json:"maxAmount,omitempty"`
	MinAmount     *GcpAmountUnit `json:"minAmount,omitempty"`
}

// NewGcpAmountConstraint instantiates a new GcpAmountConstraint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGcpAmountConstraint() *GcpAmountConstraint {
	this := GcpAmountConstraint{}
	return &this
}

// NewGcpAmountConstraintWithDefaults instantiates a new GcpAmountConstraint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGcpAmountConstraintWithDefaults() *GcpAmountConstraint {
	this := GcpAmountConstraint{}
	return &this
}

// GetDefaultAmount returns the DefaultAmount field value if set, zero value otherwise.
func (o *GcpAmountConstraint) GetDefaultAmount() GcpAmountUnit {
	if o == nil || IsNil(o.DefaultAmount) {
		var ret GcpAmountUnit
		return ret
	}
	return *o.DefaultAmount
}

// GetDefaultAmountOk returns a tuple with the DefaultAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpAmountConstraint) GetDefaultAmountOk() (*GcpAmountUnit, bool) {
	if o == nil || IsNil(o.DefaultAmount) {
		return nil, false
	}
	return o.DefaultAmount, true
}

// HasDefaultAmount returns a boolean if a field has been set.
func (o *GcpAmountConstraint) HasDefaultAmount() bool {
	if o != nil && !IsNil(o.DefaultAmount) {
		return true
	}

	return false
}

// SetDefaultAmount gets a reference to the given GcpAmountUnit and assigns it to the DefaultAmount field.
func (o *GcpAmountConstraint) SetDefaultAmount(v GcpAmountUnit) {
	o.DefaultAmount = &v
}

// GetMaxAmount returns the MaxAmount field value if set, zero value otherwise.
func (o *GcpAmountConstraint) GetMaxAmount() GcpAmountUnit {
	if o == nil || IsNil(o.MaxAmount) {
		var ret GcpAmountUnit
		return ret
	}
	return *o.MaxAmount
}

// GetMaxAmountOk returns a tuple with the MaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpAmountConstraint) GetMaxAmountOk() (*GcpAmountUnit, bool) {
	if o == nil || IsNil(o.MaxAmount) {
		return nil, false
	}
	return o.MaxAmount, true
}

// HasMaxAmount returns a boolean if a field has been set.
func (o *GcpAmountConstraint) HasMaxAmount() bool {
	if o != nil && !IsNil(o.MaxAmount) {
		return true
	}

	return false
}

// SetMaxAmount gets a reference to the given GcpAmountUnit and assigns it to the MaxAmount field.
func (o *GcpAmountConstraint) SetMaxAmount(v GcpAmountUnit) {
	o.MaxAmount = &v
}

// GetMinAmount returns the MinAmount field value if set, zero value otherwise.
func (o *GcpAmountConstraint) GetMinAmount() GcpAmountUnit {
	if o == nil || IsNil(o.MinAmount) {
		var ret GcpAmountUnit
		return ret
	}
	return *o.MinAmount
}

// GetMinAmountOk returns a tuple with the MinAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpAmountConstraint) GetMinAmountOk() (*GcpAmountUnit, bool) {
	if o == nil || IsNil(o.MinAmount) {
		return nil, false
	}
	return o.MinAmount, true
}

// HasMinAmount returns a boolean if a field has been set.
func (o *GcpAmountConstraint) HasMinAmount() bool {
	if o != nil && !IsNil(o.MinAmount) {
		return true
	}

	return false
}

// SetMinAmount gets a reference to the given GcpAmountUnit and assigns it to the MinAmount field.
func (o *GcpAmountConstraint) SetMinAmount(v GcpAmountUnit) {
	o.MinAmount = &v
}

func (o GcpAmountConstraint) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GcpAmountConstraint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DefaultAmount) {
		toSerialize["defaultAmount"] = o.DefaultAmount
	}
	if !IsNil(o.MaxAmount) {
		toSerialize["maxAmount"] = o.MaxAmount
	}
	if !IsNil(o.MinAmount) {
		toSerialize["minAmount"] = o.MinAmount
	}
	return toSerialize, nil
}

type NullableGcpAmountConstraint struct {
	value *GcpAmountConstraint
	isSet bool
}

func (v NullableGcpAmountConstraint) Get() *GcpAmountConstraint {
	return v.value
}

func (v *NullableGcpAmountConstraint) Set(val *GcpAmountConstraint) {
	v.value = val
	v.isSet = true
}

func (v NullableGcpAmountConstraint) IsSet() bool {
	return v.isSet
}

func (v *NullableGcpAmountConstraint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGcpAmountConstraint(val *GcpAmountConstraint) *NullableGcpAmountConstraint {
	return &NullableGcpAmountConstraint{value: val, isSet: true}
}

func (v NullableGcpAmountConstraint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGcpAmountConstraint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
