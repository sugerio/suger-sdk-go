/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
)

// checks if the StripeRefund type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StripeRefund{}

// StripeRefund struct for StripeRefund
type StripeRefund struct {
	// ID of the charge that's refunded.
	ChargeId *string `json:"chargeId,omitempty"`
	// Transaction-specific details for the refund.
	EstinationDetails *StripeRefundDestinationDetails `json:"estinationDetails,omitempty"`
	// After the refund fails, this balance transaction describes the adjustment made on your account balance that reverses the initial balance transaction.
	FailureBalanceTransactionId *string `json:"failureBalanceTransactionId,omitempty"`
	// Provides the reason for the refund failure. Possible values are: `lost_or_stolen_card`, `expired_or_canceled_card`, `charge_for_pending_refund_disputed`, `insufficient_funds`, `declined`, `merchant_request`, or `unknown`.
	FailureReason *string `json:"failureReason,omitempty"`
	Id            *string `json:"id,omitempty"`
	// ID of the PaymentIntent that's refunded.
	PaymentIntentId *string `json:"paymentIntentId,omitempty"`
	// Status of the refund. This can be `pending`, `requires_action`, `succeeded`, `failed`, or `canceled`. Learn more about [failed refunds](https://stripe.com/docs/refunds#failed-refunds).
	Status *StripeRefundStatus `json:"status,omitempty"`
}

// NewStripeRefund instantiates a new StripeRefund object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStripeRefund() *StripeRefund {
	this := StripeRefund{}
	return &this
}

// NewStripeRefundWithDefaults instantiates a new StripeRefund object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStripeRefundWithDefaults() *StripeRefund {
	this := StripeRefund{}
	return &this
}

// GetChargeId returns the ChargeId field value if set, zero value otherwise.
func (o *StripeRefund) GetChargeId() string {
	if o == nil || IsNil(o.ChargeId) {
		var ret string
		return ret
	}
	return *o.ChargeId
}

// GetChargeIdOk returns a tuple with the ChargeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeRefund) GetChargeIdOk() (*string, bool) {
	if o == nil || IsNil(o.ChargeId) {
		return nil, false
	}
	return o.ChargeId, true
}

// HasChargeId returns a boolean if a field has been set.
func (o *StripeRefund) HasChargeId() bool {
	if o != nil && !IsNil(o.ChargeId) {
		return true
	}

	return false
}

// SetChargeId gets a reference to the given string and assigns it to the ChargeId field.
func (o *StripeRefund) SetChargeId(v string) {
	o.ChargeId = &v
}

// GetEstinationDetails returns the EstinationDetails field value if set, zero value otherwise.
func (o *StripeRefund) GetEstinationDetails() StripeRefundDestinationDetails {
	if o == nil || IsNil(o.EstinationDetails) {
		var ret StripeRefundDestinationDetails
		return ret
	}
	return *o.EstinationDetails
}

// GetEstinationDetailsOk returns a tuple with the EstinationDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeRefund) GetEstinationDetailsOk() (*StripeRefundDestinationDetails, bool) {
	if o == nil || IsNil(o.EstinationDetails) {
		return nil, false
	}
	return o.EstinationDetails, true
}

// HasEstinationDetails returns a boolean if a field has been set.
func (o *StripeRefund) HasEstinationDetails() bool {
	if o != nil && !IsNil(o.EstinationDetails) {
		return true
	}

	return false
}

// SetEstinationDetails gets a reference to the given StripeRefundDestinationDetails and assigns it to the EstinationDetails field.
func (o *StripeRefund) SetEstinationDetails(v StripeRefundDestinationDetails) {
	o.EstinationDetails = &v
}

// GetFailureBalanceTransactionId returns the FailureBalanceTransactionId field value if set, zero value otherwise.
func (o *StripeRefund) GetFailureBalanceTransactionId() string {
	if o == nil || IsNil(o.FailureBalanceTransactionId) {
		var ret string
		return ret
	}
	return *o.FailureBalanceTransactionId
}

// GetFailureBalanceTransactionIdOk returns a tuple with the FailureBalanceTransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeRefund) GetFailureBalanceTransactionIdOk() (*string, bool) {
	if o == nil || IsNil(o.FailureBalanceTransactionId) {
		return nil, false
	}
	return o.FailureBalanceTransactionId, true
}

// HasFailureBalanceTransactionId returns a boolean if a field has been set.
func (o *StripeRefund) HasFailureBalanceTransactionId() bool {
	if o != nil && !IsNil(o.FailureBalanceTransactionId) {
		return true
	}

	return false
}

// SetFailureBalanceTransactionId gets a reference to the given string and assigns it to the FailureBalanceTransactionId field.
func (o *StripeRefund) SetFailureBalanceTransactionId(v string) {
	o.FailureBalanceTransactionId = &v
}

// GetFailureReason returns the FailureReason field value if set, zero value otherwise.
func (o *StripeRefund) GetFailureReason() string {
	if o == nil || IsNil(o.FailureReason) {
		var ret string
		return ret
	}
	return *o.FailureReason
}

// GetFailureReasonOk returns a tuple with the FailureReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeRefund) GetFailureReasonOk() (*string, bool) {
	if o == nil || IsNil(o.FailureReason) {
		return nil, false
	}
	return o.FailureReason, true
}

// HasFailureReason returns a boolean if a field has been set.
func (o *StripeRefund) HasFailureReason() bool {
	if o != nil && !IsNil(o.FailureReason) {
		return true
	}

	return false
}

// SetFailureReason gets a reference to the given string and assigns it to the FailureReason field.
func (o *StripeRefund) SetFailureReason(v string) {
	o.FailureReason = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *StripeRefund) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeRefund) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *StripeRefund) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *StripeRefund) SetId(v string) {
	o.Id = &v
}

// GetPaymentIntentId returns the PaymentIntentId field value if set, zero value otherwise.
func (o *StripeRefund) GetPaymentIntentId() string {
	if o == nil || IsNil(o.PaymentIntentId) {
		var ret string
		return ret
	}
	return *o.PaymentIntentId
}

// GetPaymentIntentIdOk returns a tuple with the PaymentIntentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeRefund) GetPaymentIntentIdOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentIntentId) {
		return nil, false
	}
	return o.PaymentIntentId, true
}

// HasPaymentIntentId returns a boolean if a field has been set.
func (o *StripeRefund) HasPaymentIntentId() bool {
	if o != nil && !IsNil(o.PaymentIntentId) {
		return true
	}

	return false
}

// SetPaymentIntentId gets a reference to the given string and assigns it to the PaymentIntentId field.
func (o *StripeRefund) SetPaymentIntentId(v string) {
	o.PaymentIntentId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *StripeRefund) GetStatus() StripeRefundStatus {
	if o == nil || IsNil(o.Status) {
		var ret StripeRefundStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeRefund) GetStatusOk() (*StripeRefundStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *StripeRefund) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given StripeRefundStatus and assigns it to the Status field.
func (o *StripeRefund) SetStatus(v StripeRefundStatus) {
	o.Status = &v
}

func (o StripeRefund) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StripeRefund) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChargeId) {
		toSerialize["chargeId"] = o.ChargeId
	}
	if !IsNil(o.EstinationDetails) {
		toSerialize["estinationDetails"] = o.EstinationDetails
	}
	if !IsNil(o.FailureBalanceTransactionId) {
		toSerialize["failureBalanceTransactionId"] = o.FailureBalanceTransactionId
	}
	if !IsNil(o.FailureReason) {
		toSerialize["failureReason"] = o.FailureReason
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.PaymentIntentId) {
		toSerialize["paymentIntentId"] = o.PaymentIntentId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableStripeRefund struct {
	value *StripeRefund
	isSet bool
}

func (v NullableStripeRefund) Get() *StripeRefund {
	return v.value
}

func (v *NullableStripeRefund) Set(val *StripeRefund) {
	v.value = val
	v.isSet = true
}

func (v NullableStripeRefund) IsSet() bool {
	return v.isSet
}

func (v *NullableStripeRefund) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStripeRefund(val *StripeRefund) *NullableStripeRefund {
	return &NullableStripeRefund{value: val, isSet: true}
}

func (v NullableStripeRefund) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStripeRefund) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
