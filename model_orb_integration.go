/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
)

// checks if the OrbIntegration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrbIntegration{}

// OrbIntegration struct for OrbIntegration
type OrbIntegration struct {
	// The Bearer key to access the orb API.
	ApiKey                 *string             `json:"apiKey,omitempty"`
	BillableMetricFullList []OrbBillableMetric `json:"billableMetricFullList,omitempty"`
	BillingMode            *OrbBillingMode     `json:"billingMode,omitempty"`
	// Whether to enable the auto usage report for the orb integration. If enabled, cron job runs every hour to fetch usage events from Orb to Suger as UsageRecordGroups.
	EnableAutoReportUsage *bool     `json:"enableAutoReportUsage,omitempty"`
	PlanFullList          []OrbPlan `json:"planFullList,omitempty"`
	// The secret key used to store the ApiKey in AWS Secret manager. For internal usage only.
	SecretKey *string `json:"secretKey,omitempty"`
}

// NewOrbIntegration instantiates a new OrbIntegration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrbIntegration() *OrbIntegration {
	this := OrbIntegration{}
	return &this
}

// NewOrbIntegrationWithDefaults instantiates a new OrbIntegration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrbIntegrationWithDefaults() *OrbIntegration {
	this := OrbIntegration{}
	return &this
}

// GetApiKey returns the ApiKey field value if set, zero value otherwise.
func (o *OrbIntegration) GetApiKey() string {
	if o == nil || IsNil(o.ApiKey) {
		var ret string
		return ret
	}
	return *o.ApiKey
}

// GetApiKeyOk returns a tuple with the ApiKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbIntegration) GetApiKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ApiKey) {
		return nil, false
	}
	return o.ApiKey, true
}

// HasApiKey returns a boolean if a field has been set.
func (o *OrbIntegration) HasApiKey() bool {
	if o != nil && !IsNil(o.ApiKey) {
		return true
	}

	return false
}

// SetApiKey gets a reference to the given string and assigns it to the ApiKey field.
func (o *OrbIntegration) SetApiKey(v string) {
	o.ApiKey = &v
}

// GetBillableMetricFullList returns the BillableMetricFullList field value if set, zero value otherwise.
func (o *OrbIntegration) GetBillableMetricFullList() []OrbBillableMetric {
	if o == nil || IsNil(o.BillableMetricFullList) {
		var ret []OrbBillableMetric
		return ret
	}
	return o.BillableMetricFullList
}

// GetBillableMetricFullListOk returns a tuple with the BillableMetricFullList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbIntegration) GetBillableMetricFullListOk() ([]OrbBillableMetric, bool) {
	if o == nil || IsNil(o.BillableMetricFullList) {
		return nil, false
	}
	return o.BillableMetricFullList, true
}

// HasBillableMetricFullList returns a boolean if a field has been set.
func (o *OrbIntegration) HasBillableMetricFullList() bool {
	if o != nil && !IsNil(o.BillableMetricFullList) {
		return true
	}

	return false
}

// SetBillableMetricFullList gets a reference to the given []OrbBillableMetric and assigns it to the BillableMetricFullList field.
func (o *OrbIntegration) SetBillableMetricFullList(v []OrbBillableMetric) {
	o.BillableMetricFullList = v
}

// GetBillingMode returns the BillingMode field value if set, zero value otherwise.
func (o *OrbIntegration) GetBillingMode() OrbBillingMode {
	if o == nil || IsNil(o.BillingMode) {
		var ret OrbBillingMode
		return ret
	}
	return *o.BillingMode
}

// GetBillingModeOk returns a tuple with the BillingMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbIntegration) GetBillingModeOk() (*OrbBillingMode, bool) {
	if o == nil || IsNil(o.BillingMode) {
		return nil, false
	}
	return o.BillingMode, true
}

// HasBillingMode returns a boolean if a field has been set.
func (o *OrbIntegration) HasBillingMode() bool {
	if o != nil && !IsNil(o.BillingMode) {
		return true
	}

	return false
}

// SetBillingMode gets a reference to the given OrbBillingMode and assigns it to the BillingMode field.
func (o *OrbIntegration) SetBillingMode(v OrbBillingMode) {
	o.BillingMode = &v
}

// GetEnableAutoReportUsage returns the EnableAutoReportUsage field value if set, zero value otherwise.
func (o *OrbIntegration) GetEnableAutoReportUsage() bool {
	if o == nil || IsNil(o.EnableAutoReportUsage) {
		var ret bool
		return ret
	}
	return *o.EnableAutoReportUsage
}

// GetEnableAutoReportUsageOk returns a tuple with the EnableAutoReportUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbIntegration) GetEnableAutoReportUsageOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableAutoReportUsage) {
		return nil, false
	}
	return o.EnableAutoReportUsage, true
}

// HasEnableAutoReportUsage returns a boolean if a field has been set.
func (o *OrbIntegration) HasEnableAutoReportUsage() bool {
	if o != nil && !IsNil(o.EnableAutoReportUsage) {
		return true
	}

	return false
}

// SetEnableAutoReportUsage gets a reference to the given bool and assigns it to the EnableAutoReportUsage field.
func (o *OrbIntegration) SetEnableAutoReportUsage(v bool) {
	o.EnableAutoReportUsage = &v
}

// GetPlanFullList returns the PlanFullList field value if set, zero value otherwise.
func (o *OrbIntegration) GetPlanFullList() []OrbPlan {
	if o == nil || IsNil(o.PlanFullList) {
		var ret []OrbPlan
		return ret
	}
	return o.PlanFullList
}

// GetPlanFullListOk returns a tuple with the PlanFullList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbIntegration) GetPlanFullListOk() ([]OrbPlan, bool) {
	if o == nil || IsNil(o.PlanFullList) {
		return nil, false
	}
	return o.PlanFullList, true
}

// HasPlanFullList returns a boolean if a field has been set.
func (o *OrbIntegration) HasPlanFullList() bool {
	if o != nil && !IsNil(o.PlanFullList) {
		return true
	}

	return false
}

// SetPlanFullList gets a reference to the given []OrbPlan and assigns it to the PlanFullList field.
func (o *OrbIntegration) SetPlanFullList(v []OrbPlan) {
	o.PlanFullList = v
}

// GetSecretKey returns the SecretKey field value if set, zero value otherwise.
func (o *OrbIntegration) GetSecretKey() string {
	if o == nil || IsNil(o.SecretKey) {
		var ret string
		return ret
	}
	return *o.SecretKey
}

// GetSecretKeyOk returns a tuple with the SecretKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbIntegration) GetSecretKeyOk() (*string, bool) {
	if o == nil || IsNil(o.SecretKey) {
		return nil, false
	}
	return o.SecretKey, true
}

// HasSecretKey returns a boolean if a field has been set.
func (o *OrbIntegration) HasSecretKey() bool {
	if o != nil && !IsNil(o.SecretKey) {
		return true
	}

	return false
}

// SetSecretKey gets a reference to the given string and assigns it to the SecretKey field.
func (o *OrbIntegration) SetSecretKey(v string) {
	o.SecretKey = &v
}

func (o OrbIntegration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrbIntegration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiKey) {
		toSerialize["apiKey"] = o.ApiKey
	}
	if !IsNil(o.BillableMetricFullList) {
		toSerialize["billableMetricFullList"] = o.BillableMetricFullList
	}
	if !IsNil(o.BillingMode) {
		toSerialize["billingMode"] = o.BillingMode
	}
	if !IsNil(o.EnableAutoReportUsage) {
		toSerialize["enableAutoReportUsage"] = o.EnableAutoReportUsage
	}
	if !IsNil(o.PlanFullList) {
		toSerialize["planFullList"] = o.PlanFullList
	}
	if !IsNil(o.SecretKey) {
		toSerialize["secretKey"] = o.SecretKey
	}
	return toSerialize, nil
}

type NullableOrbIntegration struct {
	value *OrbIntegration
	isSet bool
}

func (v NullableOrbIntegration) Get() *OrbIntegration {
	return v.value
}

func (v *NullableOrbIntegration) Set(val *OrbIntegration) {
	v.value = val
	v.isSet = true
}

func (v NullableOrbIntegration) IsSet() bool {
	return v.isSet
}

func (v *NullableOrbIntegration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrbIntegration(val *OrbIntegration) *NullableOrbIntegration {
	return &NullableOrbIntegration{value: val, isSet: true}
}

func (v NullableOrbIntegration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrbIntegration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
