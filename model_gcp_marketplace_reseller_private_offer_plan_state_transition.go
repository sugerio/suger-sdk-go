/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the GcpMarketplaceResellerPrivateOfferPlanStateTransition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GcpMarketplaceResellerPrivateOfferPlanStateTransition{}

// GcpMarketplaceResellerPrivateOfferPlanStateTransition struct for GcpMarketplaceResellerPrivateOfferPlanStateTransition
type GcpMarketplaceResellerPrivateOfferPlanStateTransition struct {
	NewState       *GcpMarketplaceResellerPrivateOfferPlanNewState `json:"newState,omitempty"`
	TransitionTime *time.Time                                      `json:"transitionTime,omitempty"`
}

// NewGcpMarketplaceResellerPrivateOfferPlanStateTransition instantiates a new GcpMarketplaceResellerPrivateOfferPlanStateTransition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGcpMarketplaceResellerPrivateOfferPlanStateTransition() *GcpMarketplaceResellerPrivateOfferPlanStateTransition {
	this := GcpMarketplaceResellerPrivateOfferPlanStateTransition{}
	return &this
}

// NewGcpMarketplaceResellerPrivateOfferPlanStateTransitionWithDefaults instantiates a new GcpMarketplaceResellerPrivateOfferPlanStateTransition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGcpMarketplaceResellerPrivateOfferPlanStateTransitionWithDefaults() *GcpMarketplaceResellerPrivateOfferPlanStateTransition {
	this := GcpMarketplaceResellerPrivateOfferPlanStateTransition{}
	return &this
}

// GetNewState returns the NewState field value if set, zero value otherwise.
func (o *GcpMarketplaceResellerPrivateOfferPlanStateTransition) GetNewState() GcpMarketplaceResellerPrivateOfferPlanNewState {
	if o == nil || IsNil(o.NewState) {
		var ret GcpMarketplaceResellerPrivateOfferPlanNewState
		return ret
	}
	return *o.NewState
}

// GetNewStateOk returns a tuple with the NewState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpMarketplaceResellerPrivateOfferPlanStateTransition) GetNewStateOk() (*GcpMarketplaceResellerPrivateOfferPlanNewState, bool) {
	if o == nil || IsNil(o.NewState) {
		return nil, false
	}
	return o.NewState, true
}

// HasNewState returns a boolean if a field has been set.
func (o *GcpMarketplaceResellerPrivateOfferPlanStateTransition) HasNewState() bool {
	if o != nil && !IsNil(o.NewState) {
		return true
	}

	return false
}

// SetNewState gets a reference to the given GcpMarketplaceResellerPrivateOfferPlanNewState and assigns it to the NewState field.
func (o *GcpMarketplaceResellerPrivateOfferPlanStateTransition) SetNewState(v GcpMarketplaceResellerPrivateOfferPlanNewState) {
	o.NewState = &v
}

// GetTransitionTime returns the TransitionTime field value if set, zero value otherwise.
func (o *GcpMarketplaceResellerPrivateOfferPlanStateTransition) GetTransitionTime() time.Time {
	if o == nil || IsNil(o.TransitionTime) {
		var ret time.Time
		return ret
	}
	return *o.TransitionTime
}

// GetTransitionTimeOk returns a tuple with the TransitionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpMarketplaceResellerPrivateOfferPlanStateTransition) GetTransitionTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TransitionTime) {
		return nil, false
	}
	return o.TransitionTime, true
}

// HasTransitionTime returns a boolean if a field has been set.
func (o *GcpMarketplaceResellerPrivateOfferPlanStateTransition) HasTransitionTime() bool {
	if o != nil && !IsNil(o.TransitionTime) {
		return true
	}

	return false
}

// SetTransitionTime gets a reference to the given time.Time and assigns it to the TransitionTime field.
func (o *GcpMarketplaceResellerPrivateOfferPlanStateTransition) SetTransitionTime(v time.Time) {
	o.TransitionTime = &v
}

func (o GcpMarketplaceResellerPrivateOfferPlanStateTransition) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GcpMarketplaceResellerPrivateOfferPlanStateTransition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NewState) {
		toSerialize["newState"] = o.NewState
	}
	if !IsNil(o.TransitionTime) {
		toSerialize["transitionTime"] = o.TransitionTime
	}
	return toSerialize, nil
}

type NullableGcpMarketplaceResellerPrivateOfferPlanStateTransition struct {
	value *GcpMarketplaceResellerPrivateOfferPlanStateTransition
	isSet bool
}

func (v NullableGcpMarketplaceResellerPrivateOfferPlanStateTransition) Get() *GcpMarketplaceResellerPrivateOfferPlanStateTransition {
	return v.value
}

func (v *NullableGcpMarketplaceResellerPrivateOfferPlanStateTransition) Set(val *GcpMarketplaceResellerPrivateOfferPlanStateTransition) {
	v.value = val
	v.isSet = true
}

func (v NullableGcpMarketplaceResellerPrivateOfferPlanStateTransition) IsSet() bool {
	return v.isSet
}

func (v *NullableGcpMarketplaceResellerPrivateOfferPlanStateTransition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGcpMarketplaceResellerPrivateOfferPlanStateTransition(val *GcpMarketplaceResellerPrivateOfferPlanStateTransition) *NullableGcpMarketplaceResellerPrivateOfferPlanStateTransition {
	return &NullableGcpMarketplaceResellerPrivateOfferPlanStateTransition{value: val, isSet: true}
}

func (v NullableGcpMarketplaceResellerPrivateOfferPlanStateTransition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGcpMarketplaceResellerPrivateOfferPlanStateTransition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
