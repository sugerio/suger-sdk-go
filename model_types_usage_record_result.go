/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TypesUsageRecordResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TypesUsageRecordResult{}

// TypesUsageRecordResult struct for TypesUsageRecordResult
type TypesUsageRecordResult struct {
	// The MeteringRecordId is a unique identifier for this metering event.
	MeteringRecordId *string `json:"meteringRecordId,omitempty"`
	// The UsageRecordResult Status indicates the status of an individual UsageRecord processed by BatchMeterUsage .   - Success- The UsageRecord was accepted and honored by BatchMeterUsage .   - CustomerNotSubscribed- The CustomerIdentifier specified is not able to use   your product. The UsageRecord was not honored. There are three causes for this   result:   - The customer identifier is invalid.   - The customer identifier provided in the metering record does not have an   active agreement or subscription with this product. Future UsageRecords for   this customer will fail until the customer subscribes to your product.   - The customer's AWS account was suspended.   - DuplicateRecord- Indicates that the UsageRecord was invalid and not honored.   A previously metered UsageRecord had the same customer, dimension, and time,   but a different quantity.
	Status *TypesUsageRecordResultStatus `json:"status,omitempty"`
	// The UsageRecord that was part of the BatchMeterUsage request.
	UsageRecord *TypesUsageRecord `json:"usageRecord,omitempty"`
}

// NewTypesUsageRecordResult instantiates a new TypesUsageRecordResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTypesUsageRecordResult() *TypesUsageRecordResult {
	this := TypesUsageRecordResult{}
	return &this
}

// NewTypesUsageRecordResultWithDefaults instantiates a new TypesUsageRecordResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTypesUsageRecordResultWithDefaults() *TypesUsageRecordResult {
	this := TypesUsageRecordResult{}
	return &this
}

// GetMeteringRecordId returns the MeteringRecordId field value if set, zero value otherwise.
func (o *TypesUsageRecordResult) GetMeteringRecordId() string {
	if o == nil || IsNil(o.MeteringRecordId) {
		var ret string
		return ret
	}
	return *o.MeteringRecordId
}

// GetMeteringRecordIdOk returns a tuple with the MeteringRecordId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesUsageRecordResult) GetMeteringRecordIdOk() (*string, bool) {
	if o == nil || IsNil(o.MeteringRecordId) {
		return nil, false
	}
	return o.MeteringRecordId, true
}

// HasMeteringRecordId returns a boolean if a field has been set.
func (o *TypesUsageRecordResult) HasMeteringRecordId() bool {
	if o != nil && !IsNil(o.MeteringRecordId) {
		return true
	}

	return false
}

// SetMeteringRecordId gets a reference to the given string and assigns it to the MeteringRecordId field.
func (o *TypesUsageRecordResult) SetMeteringRecordId(v string) {
	o.MeteringRecordId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *TypesUsageRecordResult) GetStatus() TypesUsageRecordResultStatus {
	if o == nil || IsNil(o.Status) {
		var ret TypesUsageRecordResultStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesUsageRecordResult) GetStatusOk() (*TypesUsageRecordResultStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *TypesUsageRecordResult) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given TypesUsageRecordResultStatus and assigns it to the Status field.
func (o *TypesUsageRecordResult) SetStatus(v TypesUsageRecordResultStatus) {
	o.Status = &v
}

// GetUsageRecord returns the UsageRecord field value if set, zero value otherwise.
func (o *TypesUsageRecordResult) GetUsageRecord() TypesUsageRecord {
	if o == nil || IsNil(o.UsageRecord) {
		var ret TypesUsageRecord
		return ret
	}
	return *o.UsageRecord
}

// GetUsageRecordOk returns a tuple with the UsageRecord field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesUsageRecordResult) GetUsageRecordOk() (*TypesUsageRecord, bool) {
	if o == nil || IsNil(o.UsageRecord) {
		return nil, false
	}
	return o.UsageRecord, true
}

// HasUsageRecord returns a boolean if a field has been set.
func (o *TypesUsageRecordResult) HasUsageRecord() bool {
	if o != nil && !IsNil(o.UsageRecord) {
		return true
	}

	return false
}

// SetUsageRecord gets a reference to the given TypesUsageRecord and assigns it to the UsageRecord field.
func (o *TypesUsageRecordResult) SetUsageRecord(v TypesUsageRecord) {
	o.UsageRecord = &v
}

func (o TypesUsageRecordResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TypesUsageRecordResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MeteringRecordId) {
		toSerialize["meteringRecordId"] = o.MeteringRecordId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.UsageRecord) {
		toSerialize["usageRecord"] = o.UsageRecord
	}
	return toSerialize, nil
}

type NullableTypesUsageRecordResult struct {
	value *TypesUsageRecordResult
	isSet bool
}

func (v NullableTypesUsageRecordResult) Get() *TypesUsageRecordResult {
	return v.value
}

func (v *NullableTypesUsageRecordResult) Set(val *TypesUsageRecordResult) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesUsageRecordResult) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesUsageRecordResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesUsageRecordResult(val *TypesUsageRecordResult) *NullableTypesUsageRecordResult {
	return &NullableTypesUsageRecordResult{value: val, isSet: true}
}

func (v NullableTypesUsageRecordResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesUsageRecordResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
