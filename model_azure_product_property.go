/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
)

// checks if the AzureProductProperty type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureProductProperty{}

// AzureProductProperty struct for AzureProductProperty
type AzureProductProperty struct {
	AdditionalCategories  []string               `json:"additionalCategories,omitempty"`
	AppVersion            *string                `json:"appVersion,omitempty"`
	ApplicableProducts    []string               `json:"applicableProducts,omitempty"`
	Categories            []string               `json:"categories,omitempty"`
	CustomAmendments      []string               `json:"customAmendments,omitempty"`
	ExtendedProperties    []string               `json:"extendedProperties,omitempty"`
	GlobalAmendmentTerms  *string                `json:"globalAmendmentTerms,omitempty"`
	HideKeys              []string               `json:"hideKeys,omitempty"`
	Id                    *string                `json:"id,omitempty"`
	Industries            []string               `json:"industries,omitempty"`
	LeveledCategories     map[string]interface{} `json:"leveledCategories,omitempty"`
	LeveledIndustries     map[string]interface{} `json:"leveledIndustries,omitempty"`
	MarketingOnlyChange   *bool                  `json:"marketingOnlyChange,omitempty"`
	ProductTags           []string               `json:"productTags,omitempty"`
	ResourceType          *string                `json:"resourceType,omitempty"`
	SubmissionVersion     *string                `json:"submissionVersion,omitempty"`
	TermsOfUse            *string                `json:"termsOfUse,omitempty"`
	UseEnterpriseContract *bool                  `json:"useEnterpriseContract,omitempty"`
}

// NewAzureProductProperty instantiates a new AzureProductProperty object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureProductProperty() *AzureProductProperty {
	this := AzureProductProperty{}
	return &this
}

// NewAzureProductPropertyWithDefaults instantiates a new AzureProductProperty object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureProductPropertyWithDefaults() *AzureProductProperty {
	this := AzureProductProperty{}
	return &this
}

// GetAdditionalCategories returns the AdditionalCategories field value if set, zero value otherwise.
func (o *AzureProductProperty) GetAdditionalCategories() []string {
	if o == nil || IsNil(o.AdditionalCategories) {
		var ret []string
		return ret
	}
	return o.AdditionalCategories
}

// GetAdditionalCategoriesOk returns a tuple with the AdditionalCategories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureProductProperty) GetAdditionalCategoriesOk() ([]string, bool) {
	if o == nil || IsNil(o.AdditionalCategories) {
		return nil, false
	}
	return o.AdditionalCategories, true
}

// HasAdditionalCategories returns a boolean if a field has been set.
func (o *AzureProductProperty) HasAdditionalCategories() bool {
	if o != nil && !IsNil(o.AdditionalCategories) {
		return true
	}

	return false
}

// SetAdditionalCategories gets a reference to the given []string and assigns it to the AdditionalCategories field.
func (o *AzureProductProperty) SetAdditionalCategories(v []string) {
	o.AdditionalCategories = v
}

// GetAppVersion returns the AppVersion field value if set, zero value otherwise.
func (o *AzureProductProperty) GetAppVersion() string {
	if o == nil || IsNil(o.AppVersion) {
		var ret string
		return ret
	}
	return *o.AppVersion
}

// GetAppVersionOk returns a tuple with the AppVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureProductProperty) GetAppVersionOk() (*string, bool) {
	if o == nil || IsNil(o.AppVersion) {
		return nil, false
	}
	return o.AppVersion, true
}

// HasAppVersion returns a boolean if a field has been set.
func (o *AzureProductProperty) HasAppVersion() bool {
	if o != nil && !IsNil(o.AppVersion) {
		return true
	}

	return false
}

// SetAppVersion gets a reference to the given string and assigns it to the AppVersion field.
func (o *AzureProductProperty) SetAppVersion(v string) {
	o.AppVersion = &v
}

// GetApplicableProducts returns the ApplicableProducts field value if set, zero value otherwise.
func (o *AzureProductProperty) GetApplicableProducts() []string {
	if o == nil || IsNil(o.ApplicableProducts) {
		var ret []string
		return ret
	}
	return o.ApplicableProducts
}

// GetApplicableProductsOk returns a tuple with the ApplicableProducts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureProductProperty) GetApplicableProductsOk() ([]string, bool) {
	if o == nil || IsNil(o.ApplicableProducts) {
		return nil, false
	}
	return o.ApplicableProducts, true
}

// HasApplicableProducts returns a boolean if a field has been set.
func (o *AzureProductProperty) HasApplicableProducts() bool {
	if o != nil && !IsNil(o.ApplicableProducts) {
		return true
	}

	return false
}

// SetApplicableProducts gets a reference to the given []string and assigns it to the ApplicableProducts field.
func (o *AzureProductProperty) SetApplicableProducts(v []string) {
	o.ApplicableProducts = v
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *AzureProductProperty) GetCategories() []string {
	if o == nil || IsNil(o.Categories) {
		var ret []string
		return ret
	}
	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureProductProperty) GetCategoriesOk() ([]string, bool) {
	if o == nil || IsNil(o.Categories) {
		return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *AzureProductProperty) HasCategories() bool {
	if o != nil && !IsNil(o.Categories) {
		return true
	}

	return false
}

// SetCategories gets a reference to the given []string and assigns it to the Categories field.
func (o *AzureProductProperty) SetCategories(v []string) {
	o.Categories = v
}

// GetCustomAmendments returns the CustomAmendments field value if set, zero value otherwise.
func (o *AzureProductProperty) GetCustomAmendments() []string {
	if o == nil || IsNil(o.CustomAmendments) {
		var ret []string
		return ret
	}
	return o.CustomAmendments
}

// GetCustomAmendmentsOk returns a tuple with the CustomAmendments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureProductProperty) GetCustomAmendmentsOk() ([]string, bool) {
	if o == nil || IsNil(o.CustomAmendments) {
		return nil, false
	}
	return o.CustomAmendments, true
}

// HasCustomAmendments returns a boolean if a field has been set.
func (o *AzureProductProperty) HasCustomAmendments() bool {
	if o != nil && !IsNil(o.CustomAmendments) {
		return true
	}

	return false
}

// SetCustomAmendments gets a reference to the given []string and assigns it to the CustomAmendments field.
func (o *AzureProductProperty) SetCustomAmendments(v []string) {
	o.CustomAmendments = v
}

// GetExtendedProperties returns the ExtendedProperties field value if set, zero value otherwise.
func (o *AzureProductProperty) GetExtendedProperties() []string {
	if o == nil || IsNil(o.ExtendedProperties) {
		var ret []string
		return ret
	}
	return o.ExtendedProperties
}

// GetExtendedPropertiesOk returns a tuple with the ExtendedProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureProductProperty) GetExtendedPropertiesOk() ([]string, bool) {
	if o == nil || IsNil(o.ExtendedProperties) {
		return nil, false
	}
	return o.ExtendedProperties, true
}

// HasExtendedProperties returns a boolean if a field has been set.
func (o *AzureProductProperty) HasExtendedProperties() bool {
	if o != nil && !IsNil(o.ExtendedProperties) {
		return true
	}

	return false
}

// SetExtendedProperties gets a reference to the given []string and assigns it to the ExtendedProperties field.
func (o *AzureProductProperty) SetExtendedProperties(v []string) {
	o.ExtendedProperties = v
}

// GetGlobalAmendmentTerms returns the GlobalAmendmentTerms field value if set, zero value otherwise.
func (o *AzureProductProperty) GetGlobalAmendmentTerms() string {
	if o == nil || IsNil(o.GlobalAmendmentTerms) {
		var ret string
		return ret
	}
	return *o.GlobalAmendmentTerms
}

// GetGlobalAmendmentTermsOk returns a tuple with the GlobalAmendmentTerms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureProductProperty) GetGlobalAmendmentTermsOk() (*string, bool) {
	if o == nil || IsNil(o.GlobalAmendmentTerms) {
		return nil, false
	}
	return o.GlobalAmendmentTerms, true
}

// HasGlobalAmendmentTerms returns a boolean if a field has been set.
func (o *AzureProductProperty) HasGlobalAmendmentTerms() bool {
	if o != nil && !IsNil(o.GlobalAmendmentTerms) {
		return true
	}

	return false
}

// SetGlobalAmendmentTerms gets a reference to the given string and assigns it to the GlobalAmendmentTerms field.
func (o *AzureProductProperty) SetGlobalAmendmentTerms(v string) {
	o.GlobalAmendmentTerms = &v
}

// GetHideKeys returns the HideKeys field value if set, zero value otherwise.
func (o *AzureProductProperty) GetHideKeys() []string {
	if o == nil || IsNil(o.HideKeys) {
		var ret []string
		return ret
	}
	return o.HideKeys
}

// GetHideKeysOk returns a tuple with the HideKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureProductProperty) GetHideKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.HideKeys) {
		return nil, false
	}
	return o.HideKeys, true
}

// HasHideKeys returns a boolean if a field has been set.
func (o *AzureProductProperty) HasHideKeys() bool {
	if o != nil && !IsNil(o.HideKeys) {
		return true
	}

	return false
}

// SetHideKeys gets a reference to the given []string and assigns it to the HideKeys field.
func (o *AzureProductProperty) SetHideKeys(v []string) {
	o.HideKeys = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AzureProductProperty) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureProductProperty) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AzureProductProperty) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AzureProductProperty) SetId(v string) {
	o.Id = &v
}

// GetIndustries returns the Industries field value if set, zero value otherwise.
func (o *AzureProductProperty) GetIndustries() []string {
	if o == nil || IsNil(o.Industries) {
		var ret []string
		return ret
	}
	return o.Industries
}

// GetIndustriesOk returns a tuple with the Industries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureProductProperty) GetIndustriesOk() ([]string, bool) {
	if o == nil || IsNil(o.Industries) {
		return nil, false
	}
	return o.Industries, true
}

// HasIndustries returns a boolean if a field has been set.
func (o *AzureProductProperty) HasIndustries() bool {
	if o != nil && !IsNil(o.Industries) {
		return true
	}

	return false
}

// SetIndustries gets a reference to the given []string and assigns it to the Industries field.
func (o *AzureProductProperty) SetIndustries(v []string) {
	o.Industries = v
}

// GetLeveledCategories returns the LeveledCategories field value if set, zero value otherwise.
func (o *AzureProductProperty) GetLeveledCategories() map[string]interface{} {
	if o == nil || IsNil(o.LeveledCategories) {
		var ret map[string]interface{}
		return ret
	}
	return o.LeveledCategories
}

// GetLeveledCategoriesOk returns a tuple with the LeveledCategories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureProductProperty) GetLeveledCategoriesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.LeveledCategories) {
		return map[string]interface{}{}, false
	}
	return o.LeveledCategories, true
}

// HasLeveledCategories returns a boolean if a field has been set.
func (o *AzureProductProperty) HasLeveledCategories() bool {
	if o != nil && !IsNil(o.LeveledCategories) {
		return true
	}

	return false
}

// SetLeveledCategories gets a reference to the given map[string]interface{} and assigns it to the LeveledCategories field.
func (o *AzureProductProperty) SetLeveledCategories(v map[string]interface{}) {
	o.LeveledCategories = v
}

// GetLeveledIndustries returns the LeveledIndustries field value if set, zero value otherwise.
func (o *AzureProductProperty) GetLeveledIndustries() map[string]interface{} {
	if o == nil || IsNil(o.LeveledIndustries) {
		var ret map[string]interface{}
		return ret
	}
	return o.LeveledIndustries
}

// GetLeveledIndustriesOk returns a tuple with the LeveledIndustries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureProductProperty) GetLeveledIndustriesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.LeveledIndustries) {
		return map[string]interface{}{}, false
	}
	return o.LeveledIndustries, true
}

// HasLeveledIndustries returns a boolean if a field has been set.
func (o *AzureProductProperty) HasLeveledIndustries() bool {
	if o != nil && !IsNil(o.LeveledIndustries) {
		return true
	}

	return false
}

// SetLeveledIndustries gets a reference to the given map[string]interface{} and assigns it to the LeveledIndustries field.
func (o *AzureProductProperty) SetLeveledIndustries(v map[string]interface{}) {
	o.LeveledIndustries = v
}

// GetMarketingOnlyChange returns the MarketingOnlyChange field value if set, zero value otherwise.
func (o *AzureProductProperty) GetMarketingOnlyChange() bool {
	if o == nil || IsNil(o.MarketingOnlyChange) {
		var ret bool
		return ret
	}
	return *o.MarketingOnlyChange
}

// GetMarketingOnlyChangeOk returns a tuple with the MarketingOnlyChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureProductProperty) GetMarketingOnlyChangeOk() (*bool, bool) {
	if o == nil || IsNil(o.MarketingOnlyChange) {
		return nil, false
	}
	return o.MarketingOnlyChange, true
}

// HasMarketingOnlyChange returns a boolean if a field has been set.
func (o *AzureProductProperty) HasMarketingOnlyChange() bool {
	if o != nil && !IsNil(o.MarketingOnlyChange) {
		return true
	}

	return false
}

// SetMarketingOnlyChange gets a reference to the given bool and assigns it to the MarketingOnlyChange field.
func (o *AzureProductProperty) SetMarketingOnlyChange(v bool) {
	o.MarketingOnlyChange = &v
}

// GetProductTags returns the ProductTags field value if set, zero value otherwise.
func (o *AzureProductProperty) GetProductTags() []string {
	if o == nil || IsNil(o.ProductTags) {
		var ret []string
		return ret
	}
	return o.ProductTags
}

// GetProductTagsOk returns a tuple with the ProductTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureProductProperty) GetProductTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.ProductTags) {
		return nil, false
	}
	return o.ProductTags, true
}

// HasProductTags returns a boolean if a field has been set.
func (o *AzureProductProperty) HasProductTags() bool {
	if o != nil && !IsNil(o.ProductTags) {
		return true
	}

	return false
}

// SetProductTags gets a reference to the given []string and assigns it to the ProductTags field.
func (o *AzureProductProperty) SetProductTags(v []string) {
	o.ProductTags = v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *AzureProductProperty) GetResourceType() string {
	if o == nil || IsNil(o.ResourceType) {
		var ret string
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureProductProperty) GetResourceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceType) {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *AzureProductProperty) HasResourceType() bool {
	if o != nil && !IsNil(o.ResourceType) {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *AzureProductProperty) SetResourceType(v string) {
	o.ResourceType = &v
}

// GetSubmissionVersion returns the SubmissionVersion field value if set, zero value otherwise.
func (o *AzureProductProperty) GetSubmissionVersion() string {
	if o == nil || IsNil(o.SubmissionVersion) {
		var ret string
		return ret
	}
	return *o.SubmissionVersion
}

// GetSubmissionVersionOk returns a tuple with the SubmissionVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureProductProperty) GetSubmissionVersionOk() (*string, bool) {
	if o == nil || IsNil(o.SubmissionVersion) {
		return nil, false
	}
	return o.SubmissionVersion, true
}

// HasSubmissionVersion returns a boolean if a field has been set.
func (o *AzureProductProperty) HasSubmissionVersion() bool {
	if o != nil && !IsNil(o.SubmissionVersion) {
		return true
	}

	return false
}

// SetSubmissionVersion gets a reference to the given string and assigns it to the SubmissionVersion field.
func (o *AzureProductProperty) SetSubmissionVersion(v string) {
	o.SubmissionVersion = &v
}

// GetTermsOfUse returns the TermsOfUse field value if set, zero value otherwise.
func (o *AzureProductProperty) GetTermsOfUse() string {
	if o == nil || IsNil(o.TermsOfUse) {
		var ret string
		return ret
	}
	return *o.TermsOfUse
}

// GetTermsOfUseOk returns a tuple with the TermsOfUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureProductProperty) GetTermsOfUseOk() (*string, bool) {
	if o == nil || IsNil(o.TermsOfUse) {
		return nil, false
	}
	return o.TermsOfUse, true
}

// HasTermsOfUse returns a boolean if a field has been set.
func (o *AzureProductProperty) HasTermsOfUse() bool {
	if o != nil && !IsNil(o.TermsOfUse) {
		return true
	}

	return false
}

// SetTermsOfUse gets a reference to the given string and assigns it to the TermsOfUse field.
func (o *AzureProductProperty) SetTermsOfUse(v string) {
	o.TermsOfUse = &v
}

// GetUseEnterpriseContract returns the UseEnterpriseContract field value if set, zero value otherwise.
func (o *AzureProductProperty) GetUseEnterpriseContract() bool {
	if o == nil || IsNil(o.UseEnterpriseContract) {
		var ret bool
		return ret
	}
	return *o.UseEnterpriseContract
}

// GetUseEnterpriseContractOk returns a tuple with the UseEnterpriseContract field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureProductProperty) GetUseEnterpriseContractOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnterpriseContract) {
		return nil, false
	}
	return o.UseEnterpriseContract, true
}

// HasUseEnterpriseContract returns a boolean if a field has been set.
func (o *AzureProductProperty) HasUseEnterpriseContract() bool {
	if o != nil && !IsNil(o.UseEnterpriseContract) {
		return true
	}

	return false
}

// SetUseEnterpriseContract gets a reference to the given bool and assigns it to the UseEnterpriseContract field.
func (o *AzureProductProperty) SetUseEnterpriseContract(v bool) {
	o.UseEnterpriseContract = &v
}

func (o AzureProductProperty) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureProductProperty) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdditionalCategories) {
		toSerialize["additionalCategories"] = o.AdditionalCategories
	}
	if !IsNil(o.AppVersion) {
		toSerialize["appVersion"] = o.AppVersion
	}
	if !IsNil(o.ApplicableProducts) {
		toSerialize["applicableProducts"] = o.ApplicableProducts
	}
	if !IsNil(o.Categories) {
		toSerialize["categories"] = o.Categories
	}
	if !IsNil(o.CustomAmendments) {
		toSerialize["customAmendments"] = o.CustomAmendments
	}
	if !IsNil(o.ExtendedProperties) {
		toSerialize["extendedProperties"] = o.ExtendedProperties
	}
	if !IsNil(o.GlobalAmendmentTerms) {
		toSerialize["globalAmendmentTerms"] = o.GlobalAmendmentTerms
	}
	if !IsNil(o.HideKeys) {
		toSerialize["hideKeys"] = o.HideKeys
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Industries) {
		toSerialize["industries"] = o.Industries
	}
	if !IsNil(o.LeveledCategories) {
		toSerialize["leveledCategories"] = o.LeveledCategories
	}
	if !IsNil(o.LeveledIndustries) {
		toSerialize["leveledIndustries"] = o.LeveledIndustries
	}
	if !IsNil(o.MarketingOnlyChange) {
		toSerialize["marketingOnlyChange"] = o.MarketingOnlyChange
	}
	if !IsNil(o.ProductTags) {
		toSerialize["productTags"] = o.ProductTags
	}
	if !IsNil(o.ResourceType) {
		toSerialize["resourceType"] = o.ResourceType
	}
	if !IsNil(o.SubmissionVersion) {
		toSerialize["submissionVersion"] = o.SubmissionVersion
	}
	if !IsNil(o.TermsOfUse) {
		toSerialize["termsOfUse"] = o.TermsOfUse
	}
	if !IsNil(o.UseEnterpriseContract) {
		toSerialize["useEnterpriseContract"] = o.UseEnterpriseContract
	}
	return toSerialize, nil
}

type NullableAzureProductProperty struct {
	value *AzureProductProperty
	isSet bool
}

func (v NullableAzureProductProperty) Get() *AzureProductProperty {
	return v.value
}

func (v *NullableAzureProductProperty) Set(val *AzureProductProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureProductProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureProductProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureProductProperty(val *AzureProductProperty) *NullableAzureProductProperty {
	return &NullableAzureProductProperty{value: val, isSet: true}
}

func (v NullableAzureProductProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureProductProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
