/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the InvoiceAdjustMinimumSpendByDimension type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InvoiceAdjustMinimumSpendByDimension{}

// InvoiceAdjustMinimumSpendByDimension struct for InvoiceAdjustMinimumSpendByDimension
type InvoiceAdjustMinimumSpendByDimension struct {
	DimensionKey *string  `json:"dimensionKey,omitempty"`
	MinimumSpend *float32 `json:"minimumSpend,omitempty"`
	Reason       *string  `json:"reason,omitempty"`
}

// NewInvoiceAdjustMinimumSpendByDimension instantiates a new InvoiceAdjustMinimumSpendByDimension object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvoiceAdjustMinimumSpendByDimension() *InvoiceAdjustMinimumSpendByDimension {
	this := InvoiceAdjustMinimumSpendByDimension{}
	return &this
}

// NewInvoiceAdjustMinimumSpendByDimensionWithDefaults instantiates a new InvoiceAdjustMinimumSpendByDimension object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvoiceAdjustMinimumSpendByDimensionWithDefaults() *InvoiceAdjustMinimumSpendByDimension {
	this := InvoiceAdjustMinimumSpendByDimension{}
	return &this
}

// GetDimensionKey returns the DimensionKey field value if set, zero value otherwise.
func (o *InvoiceAdjustMinimumSpendByDimension) GetDimensionKey() string {
	if o == nil || IsNil(o.DimensionKey) {
		var ret string
		return ret
	}
	return *o.DimensionKey
}

// GetDimensionKeyOk returns a tuple with the DimensionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceAdjustMinimumSpendByDimension) GetDimensionKeyOk() (*string, bool) {
	if o == nil || IsNil(o.DimensionKey) {
		return nil, false
	}
	return o.DimensionKey, true
}

// HasDimensionKey returns a boolean if a field has been set.
func (o *InvoiceAdjustMinimumSpendByDimension) HasDimensionKey() bool {
	if o != nil && !IsNil(o.DimensionKey) {
		return true
	}

	return false
}

// SetDimensionKey gets a reference to the given string and assigns it to the DimensionKey field.
func (o *InvoiceAdjustMinimumSpendByDimension) SetDimensionKey(v string) {
	o.DimensionKey = &v
}

// GetMinimumSpend returns the MinimumSpend field value if set, zero value otherwise.
func (o *InvoiceAdjustMinimumSpendByDimension) GetMinimumSpend() float32 {
	if o == nil || IsNil(o.MinimumSpend) {
		var ret float32
		return ret
	}
	return *o.MinimumSpend
}

// GetMinimumSpendOk returns a tuple with the MinimumSpend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceAdjustMinimumSpendByDimension) GetMinimumSpendOk() (*float32, bool) {
	if o == nil || IsNil(o.MinimumSpend) {
		return nil, false
	}
	return o.MinimumSpend, true
}

// HasMinimumSpend returns a boolean if a field has been set.
func (o *InvoiceAdjustMinimumSpendByDimension) HasMinimumSpend() bool {
	if o != nil && !IsNil(o.MinimumSpend) {
		return true
	}

	return false
}

// SetMinimumSpend gets a reference to the given float32 and assigns it to the MinimumSpend field.
func (o *InvoiceAdjustMinimumSpendByDimension) SetMinimumSpend(v float32) {
	o.MinimumSpend = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *InvoiceAdjustMinimumSpendByDimension) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceAdjustMinimumSpendByDimension) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *InvoiceAdjustMinimumSpendByDimension) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *InvoiceAdjustMinimumSpendByDimension) SetReason(v string) {
	o.Reason = &v
}

func (o InvoiceAdjustMinimumSpendByDimension) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InvoiceAdjustMinimumSpendByDimension) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DimensionKey) {
		toSerialize["dimensionKey"] = o.DimensionKey
	}
	if !IsNil(o.MinimumSpend) {
		toSerialize["minimumSpend"] = o.MinimumSpend
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	return toSerialize, nil
}

type NullableInvoiceAdjustMinimumSpendByDimension struct {
	value *InvoiceAdjustMinimumSpendByDimension
	isSet bool
}

func (v NullableInvoiceAdjustMinimumSpendByDimension) Get() *InvoiceAdjustMinimumSpendByDimension {
	return v.value
}

func (v *NullableInvoiceAdjustMinimumSpendByDimension) Set(val *InvoiceAdjustMinimumSpendByDimension) {
	v.value = val
	v.isSet = true
}

func (v NullableInvoiceAdjustMinimumSpendByDimension) IsSet() bool {
	return v.isSet
}

func (v *NullableInvoiceAdjustMinimumSpendByDimension) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvoiceAdjustMinimumSpendByDimension(val *InvoiceAdjustMinimumSpendByDimension) *NullableInvoiceAdjustMinimumSpendByDimension {
	return &NullableInvoiceAdjustMinimumSpendByDimension{value: val, isSet: true}
}

func (v NullableInvoiceAdjustMinimumSpendByDimension) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvoiceAdjustMinimumSpendByDimension) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
