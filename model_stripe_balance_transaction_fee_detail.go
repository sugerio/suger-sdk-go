/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the StripeBalanceTransactionFeeDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StripeBalanceTransactionFeeDetail{}

// StripeBalanceTransactionFeeDetail struct for StripeBalanceTransactionFeeDetail
type StripeBalanceTransactionFeeDetail struct {
	// Amount of the fee, in cents.
	Amount *int32 `json:"amount,omitempty"`
	// ID of the Connect application that earned the fee.
	Application *string `json:"application,omitempty"`
	// An arbitrary string attached to the object. Often useful for displaying to users.
	Description *string `json:"description,omitempty"`
	// Type of the fee, one of: `application_fee`, `payment_method_passthrough_fee`, `stripe_fee` or `tax`.
	Type *string `json:"type,omitempty"`
}

// NewStripeBalanceTransactionFeeDetail instantiates a new StripeBalanceTransactionFeeDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStripeBalanceTransactionFeeDetail() *StripeBalanceTransactionFeeDetail {
	this := StripeBalanceTransactionFeeDetail{}
	return &this
}

// NewStripeBalanceTransactionFeeDetailWithDefaults instantiates a new StripeBalanceTransactionFeeDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStripeBalanceTransactionFeeDetailWithDefaults() *StripeBalanceTransactionFeeDetail {
	this := StripeBalanceTransactionFeeDetail{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *StripeBalanceTransactionFeeDetail) GetAmount() int32 {
	if o == nil || IsNil(o.Amount) {
		var ret int32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeBalanceTransactionFeeDetail) GetAmountOk() (*int32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *StripeBalanceTransactionFeeDetail) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given int32 and assigns it to the Amount field.
func (o *StripeBalanceTransactionFeeDetail) SetAmount(v int32) {
	o.Amount = &v
}

// GetApplication returns the Application field value if set, zero value otherwise.
func (o *StripeBalanceTransactionFeeDetail) GetApplication() string {
	if o == nil || IsNil(o.Application) {
		var ret string
		return ret
	}
	return *o.Application
}

// GetApplicationOk returns a tuple with the Application field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeBalanceTransactionFeeDetail) GetApplicationOk() (*string, bool) {
	if o == nil || IsNil(o.Application) {
		return nil, false
	}
	return o.Application, true
}

// HasApplication returns a boolean if a field has been set.
func (o *StripeBalanceTransactionFeeDetail) HasApplication() bool {
	if o != nil && !IsNil(o.Application) {
		return true
	}

	return false
}

// SetApplication gets a reference to the given string and assigns it to the Application field.
func (o *StripeBalanceTransactionFeeDetail) SetApplication(v string) {
	o.Application = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *StripeBalanceTransactionFeeDetail) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeBalanceTransactionFeeDetail) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *StripeBalanceTransactionFeeDetail) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *StripeBalanceTransactionFeeDetail) SetDescription(v string) {
	o.Description = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *StripeBalanceTransactionFeeDetail) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeBalanceTransactionFeeDetail) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *StripeBalanceTransactionFeeDetail) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *StripeBalanceTransactionFeeDetail) SetType(v string) {
	o.Type = &v
}

func (o StripeBalanceTransactionFeeDetail) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StripeBalanceTransactionFeeDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.Application) {
		toSerialize["application"] = o.Application
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableStripeBalanceTransactionFeeDetail struct {
	value *StripeBalanceTransactionFeeDetail
	isSet bool
}

func (v NullableStripeBalanceTransactionFeeDetail) Get() *StripeBalanceTransactionFeeDetail {
	return v.value
}

func (v *NullableStripeBalanceTransactionFeeDetail) Set(val *StripeBalanceTransactionFeeDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableStripeBalanceTransactionFeeDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableStripeBalanceTransactionFeeDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStripeBalanceTransactionFeeDetail(val *StripeBalanceTransactionFeeDetail) *NullableStripeBalanceTransactionFeeDetail {
	return &NullableStripeBalanceTransactionFeeDetail{value: val, isSet: true}
}

func (v NullableStripeBalanceTransactionFeeDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStripeBalanceTransactionFeeDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
