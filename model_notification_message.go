/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the NotificationMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationMessage{}

// NotificationMessage struct for NotificationMessage
type NotificationMessage struct {
	CreationTime *time.Time `json:"creationTime,omitempty"`
	Id *string `json:"id,omitempty"`
	Info *NotificationMessageInfo `json:"info,omitempty"`
	OrganizationID *string `json:"organizationID,omitempty"`
	Recipient *string `json:"recipient,omitempty"`
	Type *NotificationType `json:"type,omitempty"`
}

// NewNotificationMessage instantiates a new NotificationMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationMessage() *NotificationMessage {
	this := NotificationMessage{}
	return &this
}

// NewNotificationMessageWithDefaults instantiates a new NotificationMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationMessageWithDefaults() *NotificationMessage {
	this := NotificationMessage{}
	return &this
}

// GetCreationTime returns the CreationTime field value if set, zero value otherwise.
func (o *NotificationMessage) GetCreationTime() time.Time {
	if o == nil || IsNil(o.CreationTime) {
		var ret time.Time
		return ret
	}
	return *o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationMessage) GetCreationTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreationTime) {
		return nil, false
	}
	return o.CreationTime, true
}

// HasCreationTime returns a boolean if a field has been set.
func (o *NotificationMessage) HasCreationTime() bool {
	if o != nil && !IsNil(o.CreationTime) {
		return true
	}

	return false
}

// SetCreationTime gets a reference to the given time.Time and assigns it to the CreationTime field.
func (o *NotificationMessage) SetCreationTime(v time.Time) {
	o.CreationTime = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NotificationMessage) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationMessage) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NotificationMessage) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *NotificationMessage) SetId(v string) {
	o.Id = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *NotificationMessage) GetInfo() NotificationMessageInfo {
	if o == nil || IsNil(o.Info) {
		var ret NotificationMessageInfo
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationMessage) GetInfoOk() (*NotificationMessageInfo, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *NotificationMessage) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given NotificationMessageInfo and assigns it to the Info field.
func (o *NotificationMessage) SetInfo(v NotificationMessageInfo) {
	o.Info = &v
}

// GetOrganizationID returns the OrganizationID field value if set, zero value otherwise.
func (o *NotificationMessage) GetOrganizationID() string {
	if o == nil || IsNil(o.OrganizationID) {
		var ret string
		return ret
	}
	return *o.OrganizationID
}

// GetOrganizationIDOk returns a tuple with the OrganizationID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationMessage) GetOrganizationIDOk() (*string, bool) {
	if o == nil || IsNil(o.OrganizationID) {
		return nil, false
	}
	return o.OrganizationID, true
}

// HasOrganizationID returns a boolean if a field has been set.
func (o *NotificationMessage) HasOrganizationID() bool {
	if o != nil && !IsNil(o.OrganizationID) {
		return true
	}

	return false
}

// SetOrganizationID gets a reference to the given string and assigns it to the OrganizationID field.
func (o *NotificationMessage) SetOrganizationID(v string) {
	o.OrganizationID = &v
}

// GetRecipient returns the Recipient field value if set, zero value otherwise.
func (o *NotificationMessage) GetRecipient() string {
	if o == nil || IsNil(o.Recipient) {
		var ret string
		return ret
	}
	return *o.Recipient
}

// GetRecipientOk returns a tuple with the Recipient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationMessage) GetRecipientOk() (*string, bool) {
	if o == nil || IsNil(o.Recipient) {
		return nil, false
	}
	return o.Recipient, true
}

// HasRecipient returns a boolean if a field has been set.
func (o *NotificationMessage) HasRecipient() bool {
	if o != nil && !IsNil(o.Recipient) {
		return true
	}

	return false
}

// SetRecipient gets a reference to the given string and assigns it to the Recipient field.
func (o *NotificationMessage) SetRecipient(v string) {
	o.Recipient = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *NotificationMessage) GetType() NotificationType {
	if o == nil || IsNil(o.Type) {
		var ret NotificationType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationMessage) GetTypeOk() (*NotificationType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *NotificationMessage) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given NotificationType and assigns it to the Type field.
func (o *NotificationMessage) SetType(v NotificationType) {
	o.Type = &v
}

func (o NotificationMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreationTime) {
		toSerialize["creationTime"] = o.CreationTime
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Info) {
		toSerialize["info"] = o.Info
	}
	if !IsNil(o.OrganizationID) {
		toSerialize["organizationID"] = o.OrganizationID
	}
	if !IsNil(o.Recipient) {
		toSerialize["recipient"] = o.Recipient
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableNotificationMessage struct {
	value *NotificationMessage
	isSet bool
}

func (v NullableNotificationMessage) Get() *NotificationMessage {
	return v.value
}

func (v *NullableNotificationMessage) Set(val *NotificationMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationMessage(val *NotificationMessage) *NullableNotificationMessage {
	return &NullableNotificationMessage{value: val, isSet: true}
}

func (v NullableNotificationMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


