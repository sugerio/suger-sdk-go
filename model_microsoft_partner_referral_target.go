/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
)

// checks if the MicrosoftPartnerReferralTarget type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MicrosoftPartnerReferralTarget{}

// MicrosoftPartnerReferralTarget struct for MicrosoftPartnerReferralTarget
type MicrosoftPartnerReferralTarget struct {
	Id   *string                             `json:"id,omitempty"`
	Type *MicrosoftPartnerReferralTargetType `json:"type,omitempty"`
}

// NewMicrosoftPartnerReferralTarget instantiates a new MicrosoftPartnerReferralTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMicrosoftPartnerReferralTarget() *MicrosoftPartnerReferralTarget {
	this := MicrosoftPartnerReferralTarget{}
	return &this
}

// NewMicrosoftPartnerReferralTargetWithDefaults instantiates a new MicrosoftPartnerReferralTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMicrosoftPartnerReferralTargetWithDefaults() *MicrosoftPartnerReferralTarget {
	this := MicrosoftPartnerReferralTarget{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MicrosoftPartnerReferralTarget) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftPartnerReferralTarget) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MicrosoftPartnerReferralTarget) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MicrosoftPartnerReferralTarget) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *MicrosoftPartnerReferralTarget) GetType() MicrosoftPartnerReferralTargetType {
	if o == nil || IsNil(o.Type) {
		var ret MicrosoftPartnerReferralTargetType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftPartnerReferralTarget) GetTypeOk() (*MicrosoftPartnerReferralTargetType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MicrosoftPartnerReferralTarget) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given MicrosoftPartnerReferralTargetType and assigns it to the Type field.
func (o *MicrosoftPartnerReferralTarget) SetType(v MicrosoftPartnerReferralTargetType) {
	o.Type = &v
}

func (o MicrosoftPartnerReferralTarget) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MicrosoftPartnerReferralTarget) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableMicrosoftPartnerReferralTarget struct {
	value *MicrosoftPartnerReferralTarget
	isSet bool
}

func (v NullableMicrosoftPartnerReferralTarget) Get() *MicrosoftPartnerReferralTarget {
	return v.value
}

func (v *NullableMicrosoftPartnerReferralTarget) Set(val *MicrosoftPartnerReferralTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftPartnerReferralTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftPartnerReferralTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftPartnerReferralTarget(val *MicrosoftPartnerReferralTarget) *NullableMicrosoftPartnerReferralTarget {
	return &NullableMicrosoftPartnerReferralTarget{value: val, isSet: true}
}

func (v NullableMicrosoftPartnerReferralTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftPartnerReferralTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
