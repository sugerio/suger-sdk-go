/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
	"fmt"
)

// MicrosoftPartnerReferralType the model 'MicrosoftPartnerReferralType'
type MicrosoftPartnerReferralType string

// List of MicrosoftPartnerReferralType
const (
	MicrosoftPartnerReferralType_Unknown     MicrosoftPartnerReferralType = ""
	MicrosoftPartnerReferralType_Independent MicrosoftPartnerReferralType = "Independent"
	MicrosoftPartnerReferralType_Shared      MicrosoftPartnerReferralType = "Shared"
)

// All allowed values of MicrosoftPartnerReferralType enum
var AllowedMicrosoftPartnerReferralTypeEnumValues = []MicrosoftPartnerReferralType{
	"",
	"Independent",
	"Shared",
}

func (v *MicrosoftPartnerReferralType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftPartnerReferralType(value)
	for _, existing := range AllowedMicrosoftPartnerReferralTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftPartnerReferralType", value)
}

// NewMicrosoftPartnerReferralTypeFromValue returns a pointer to a valid MicrosoftPartnerReferralType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftPartnerReferralTypeFromValue(v string) (*MicrosoftPartnerReferralType, error) {
	ev := MicrosoftPartnerReferralType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftPartnerReferralType: valid values are %v", v, AllowedMicrosoftPartnerReferralTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftPartnerReferralType) IsValid() bool {
	for _, existing := range AllowedMicrosoftPartnerReferralTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MicrosoftPartnerReferralType value
func (v MicrosoftPartnerReferralType) Ptr() *MicrosoftPartnerReferralType {
	return &v
}

type NullableMicrosoftPartnerReferralType struct {
	value *MicrosoftPartnerReferralType
	isSet bool
}

func (v NullableMicrosoftPartnerReferralType) Get() *MicrosoftPartnerReferralType {
	return v.value
}

func (v *NullableMicrosoftPartnerReferralType) Set(val *MicrosoftPartnerReferralType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftPartnerReferralType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftPartnerReferralType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftPartnerReferralType(val *MicrosoftPartnerReferralType) *NullableMicrosoftPartnerReferralType {
	return &NullableMicrosoftPartnerReferralType{value: val, isSet: true}
}

func (v NullableMicrosoftPartnerReferralType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftPartnerReferralType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
