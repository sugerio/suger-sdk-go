/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
	"time"
)

// checks if the MeteringUsageRecordReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MeteringUsageRecordReport{}

// MeteringUsageRecordReport struct for MeteringUsageRecordReport
type MeteringUsageRecordReport struct {
	BuyerID           *string                        `json:"buyerID,omitempty"`
	CreationTime      *time.Time                     `json:"creationTime,omitempty"`
	EntitlementID     *string                        `json:"entitlementID,omitempty"`
	EntitlementTermID *string                        `json:"entitlementTermID,omitempty"`
	Id                *string                        `json:"id,omitempty"`
	Info              *MeteringUsageRecordReportInfo `json:"info,omitempty"`
	OrganizationID    *string                        `json:"organizationID,omitempty"`
	Partner           *string                        `json:"partner,omitempty"`
	ProductID         *string                        `json:"productID,omitempty"`
}

// NewMeteringUsageRecordReport instantiates a new MeteringUsageRecordReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeteringUsageRecordReport() *MeteringUsageRecordReport {
	this := MeteringUsageRecordReport{}
	return &this
}

// NewMeteringUsageRecordReportWithDefaults instantiates a new MeteringUsageRecordReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMeteringUsageRecordReportWithDefaults() *MeteringUsageRecordReport {
	this := MeteringUsageRecordReport{}
	return &this
}

// GetBuyerID returns the BuyerID field value if set, zero value otherwise.
func (o *MeteringUsageRecordReport) GetBuyerID() string {
	if o == nil || IsNil(o.BuyerID) {
		var ret string
		return ret
	}
	return *o.BuyerID
}

// GetBuyerIDOk returns a tuple with the BuyerID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordReport) GetBuyerIDOk() (*string, bool) {
	if o == nil || IsNil(o.BuyerID) {
		return nil, false
	}
	return o.BuyerID, true
}

// HasBuyerID returns a boolean if a field has been set.
func (o *MeteringUsageRecordReport) HasBuyerID() bool {
	if o != nil && !IsNil(o.BuyerID) {
		return true
	}

	return false
}

// SetBuyerID gets a reference to the given string and assigns it to the BuyerID field.
func (o *MeteringUsageRecordReport) SetBuyerID(v string) {
	o.BuyerID = &v
}

// GetCreationTime returns the CreationTime field value if set, zero value otherwise.
func (o *MeteringUsageRecordReport) GetCreationTime() time.Time {
	if o == nil || IsNil(o.CreationTime) {
		var ret time.Time
		return ret
	}
	return *o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordReport) GetCreationTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreationTime) {
		return nil, false
	}
	return o.CreationTime, true
}

// HasCreationTime returns a boolean if a field has been set.
func (o *MeteringUsageRecordReport) HasCreationTime() bool {
	if o != nil && !IsNil(o.CreationTime) {
		return true
	}

	return false
}

// SetCreationTime gets a reference to the given time.Time and assigns it to the CreationTime field.
func (o *MeteringUsageRecordReport) SetCreationTime(v time.Time) {
	o.CreationTime = &v
}

// GetEntitlementID returns the EntitlementID field value if set, zero value otherwise.
func (o *MeteringUsageRecordReport) GetEntitlementID() string {
	if o == nil || IsNil(o.EntitlementID) {
		var ret string
		return ret
	}
	return *o.EntitlementID
}

// GetEntitlementIDOk returns a tuple with the EntitlementID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordReport) GetEntitlementIDOk() (*string, bool) {
	if o == nil || IsNil(o.EntitlementID) {
		return nil, false
	}
	return o.EntitlementID, true
}

// HasEntitlementID returns a boolean if a field has been set.
func (o *MeteringUsageRecordReport) HasEntitlementID() bool {
	if o != nil && !IsNil(o.EntitlementID) {
		return true
	}

	return false
}

// SetEntitlementID gets a reference to the given string and assigns it to the EntitlementID field.
func (o *MeteringUsageRecordReport) SetEntitlementID(v string) {
	o.EntitlementID = &v
}

// GetEntitlementTermID returns the EntitlementTermID field value if set, zero value otherwise.
func (o *MeteringUsageRecordReport) GetEntitlementTermID() string {
	if o == nil || IsNil(o.EntitlementTermID) {
		var ret string
		return ret
	}
	return *o.EntitlementTermID
}

// GetEntitlementTermIDOk returns a tuple with the EntitlementTermID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordReport) GetEntitlementTermIDOk() (*string, bool) {
	if o == nil || IsNil(o.EntitlementTermID) {
		return nil, false
	}
	return o.EntitlementTermID, true
}

// HasEntitlementTermID returns a boolean if a field has been set.
func (o *MeteringUsageRecordReport) HasEntitlementTermID() bool {
	if o != nil && !IsNil(o.EntitlementTermID) {
		return true
	}

	return false
}

// SetEntitlementTermID gets a reference to the given string and assigns it to the EntitlementTermID field.
func (o *MeteringUsageRecordReport) SetEntitlementTermID(v string) {
	o.EntitlementTermID = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MeteringUsageRecordReport) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordReport) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MeteringUsageRecordReport) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MeteringUsageRecordReport) SetId(v string) {
	o.Id = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *MeteringUsageRecordReport) GetInfo() MeteringUsageRecordReportInfo {
	if o == nil || IsNil(o.Info) {
		var ret MeteringUsageRecordReportInfo
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordReport) GetInfoOk() (*MeteringUsageRecordReportInfo, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *MeteringUsageRecordReport) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given MeteringUsageRecordReportInfo and assigns it to the Info field.
func (o *MeteringUsageRecordReport) SetInfo(v MeteringUsageRecordReportInfo) {
	o.Info = &v
}

// GetOrganizationID returns the OrganizationID field value if set, zero value otherwise.
func (o *MeteringUsageRecordReport) GetOrganizationID() string {
	if o == nil || IsNil(o.OrganizationID) {
		var ret string
		return ret
	}
	return *o.OrganizationID
}

// GetOrganizationIDOk returns a tuple with the OrganizationID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordReport) GetOrganizationIDOk() (*string, bool) {
	if o == nil || IsNil(o.OrganizationID) {
		return nil, false
	}
	return o.OrganizationID, true
}

// HasOrganizationID returns a boolean if a field has been set.
func (o *MeteringUsageRecordReport) HasOrganizationID() bool {
	if o != nil && !IsNil(o.OrganizationID) {
		return true
	}

	return false
}

// SetOrganizationID gets a reference to the given string and assigns it to the OrganizationID field.
func (o *MeteringUsageRecordReport) SetOrganizationID(v string) {
	o.OrganizationID = &v
}

// GetPartner returns the Partner field value if set, zero value otherwise.
func (o *MeteringUsageRecordReport) GetPartner() string {
	if o == nil || IsNil(o.Partner) {
		var ret string
		return ret
	}
	return *o.Partner
}

// GetPartnerOk returns a tuple with the Partner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordReport) GetPartnerOk() (*string, bool) {
	if o == nil || IsNil(o.Partner) {
		return nil, false
	}
	return o.Partner, true
}

// HasPartner returns a boolean if a field has been set.
func (o *MeteringUsageRecordReport) HasPartner() bool {
	if o != nil && !IsNil(o.Partner) {
		return true
	}

	return false
}

// SetPartner gets a reference to the given string and assigns it to the Partner field.
func (o *MeteringUsageRecordReport) SetPartner(v string) {
	o.Partner = &v
}

// GetProductID returns the ProductID field value if set, zero value otherwise.
func (o *MeteringUsageRecordReport) GetProductID() string {
	if o == nil || IsNil(o.ProductID) {
		var ret string
		return ret
	}
	return *o.ProductID
}

// GetProductIDOk returns a tuple with the ProductID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeteringUsageRecordReport) GetProductIDOk() (*string, bool) {
	if o == nil || IsNil(o.ProductID) {
		return nil, false
	}
	return o.ProductID, true
}

// HasProductID returns a boolean if a field has been set.
func (o *MeteringUsageRecordReport) HasProductID() bool {
	if o != nil && !IsNil(o.ProductID) {
		return true
	}

	return false
}

// SetProductID gets a reference to the given string and assigns it to the ProductID field.
func (o *MeteringUsageRecordReport) SetProductID(v string) {
	o.ProductID = &v
}

func (o MeteringUsageRecordReport) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MeteringUsageRecordReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BuyerID) {
		toSerialize["buyerID"] = o.BuyerID
	}
	if !IsNil(o.CreationTime) {
		toSerialize["creationTime"] = o.CreationTime
	}
	if !IsNil(o.EntitlementID) {
		toSerialize["entitlementID"] = o.EntitlementID
	}
	if !IsNil(o.EntitlementTermID) {
		toSerialize["entitlementTermID"] = o.EntitlementTermID
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Info) {
		toSerialize["info"] = o.Info
	}
	if !IsNil(o.OrganizationID) {
		toSerialize["organizationID"] = o.OrganizationID
	}
	if !IsNil(o.Partner) {
		toSerialize["partner"] = o.Partner
	}
	if !IsNil(o.ProductID) {
		toSerialize["productID"] = o.ProductID
	}
	return toSerialize, nil
}

type NullableMeteringUsageRecordReport struct {
	value *MeteringUsageRecordReport
	isSet bool
}

func (v NullableMeteringUsageRecordReport) Get() *MeteringUsageRecordReport {
	return v.value
}

func (v *NullableMeteringUsageRecordReport) Set(val *MeteringUsageRecordReport) {
	v.value = val
	v.isSet = true
}

func (v NullableMeteringUsageRecordReport) IsSet() bool {
	return v.isSet
}

func (v *NullableMeteringUsageRecordReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeteringUsageRecordReport(val *MeteringUsageRecordReport) *NullableMeteringUsageRecordReport {
	return &NullableMeteringUsageRecordReport{value: val, isSet: true}
}

func (v NullableMeteringUsageRecordReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeteringUsageRecordReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
