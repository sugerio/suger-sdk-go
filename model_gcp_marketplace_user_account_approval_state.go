/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// GcpMarketplaceUserAccountApprovalState the model 'GcpMarketplaceUserAccountApprovalState'
type GcpMarketplaceUserAccountApprovalState string

// List of GcpMarketplaceUserAccountApprovalState
const (
	GcpMarketplaceUserAccountApprovalState_STATE_UNSPECIFIED GcpMarketplaceUserAccountApprovalState = "STATE_UNSPECIFIED"
	GcpMarketplaceUserAccountApprovalState_PENDING GcpMarketplaceUserAccountApprovalState = "PENDING"
	GcpMarketplaceUserAccountApprovalState_APPROVED GcpMarketplaceUserAccountApprovalState = "APPROVED"
	GcpMarketplaceUserAccountApprovalState_REJECTED GcpMarketplaceUserAccountApprovalState = "REJECTED"
)

// All allowed values of GcpMarketplaceUserAccountApprovalState enum
var AllowedGcpMarketplaceUserAccountApprovalStateEnumValues = []GcpMarketplaceUserAccountApprovalState{
	"STATE_UNSPECIFIED",
	"PENDING",
	"APPROVED",
	"REJECTED",
}

func (v *GcpMarketplaceUserAccountApprovalState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GcpMarketplaceUserAccountApprovalState(value)
	for _, existing := range AllowedGcpMarketplaceUserAccountApprovalStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GcpMarketplaceUserAccountApprovalState", value)
}

// NewGcpMarketplaceUserAccountApprovalStateFromValue returns a pointer to a valid GcpMarketplaceUserAccountApprovalState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGcpMarketplaceUserAccountApprovalStateFromValue(v string) (*GcpMarketplaceUserAccountApprovalState, error) {
	ev := GcpMarketplaceUserAccountApprovalState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GcpMarketplaceUserAccountApprovalState: valid values are %v", v, AllowedGcpMarketplaceUserAccountApprovalStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GcpMarketplaceUserAccountApprovalState) IsValid() bool {
	for _, existing := range AllowedGcpMarketplaceUserAccountApprovalStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GcpMarketplaceUserAccountApprovalState value
func (v GcpMarketplaceUserAccountApprovalState) Ptr() *GcpMarketplaceUserAccountApprovalState {
	return &v
}

type NullableGcpMarketplaceUserAccountApprovalState struct {
	value *GcpMarketplaceUserAccountApprovalState
	isSet bool
}

func (v NullableGcpMarketplaceUserAccountApprovalState) Get() *GcpMarketplaceUserAccountApprovalState {
	return v.value
}

func (v *NullableGcpMarketplaceUserAccountApprovalState) Set(val *GcpMarketplaceUserAccountApprovalState) {
	v.value = val
	v.isSet = true
}

func (v NullableGcpMarketplaceUserAccountApprovalState) IsSet() bool {
	return v.isSet
}

func (v *NullableGcpMarketplaceUserAccountApprovalState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGcpMarketplaceUserAccountApprovalState(val *GcpMarketplaceUserAccountApprovalState) *NullableGcpMarketplaceUserAccountApprovalState {
	return &NullableGcpMarketplaceUserAccountApprovalState{value: val, isSet: true}
}

func (v NullableGcpMarketplaceUserAccountApprovalState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGcpMarketplaceUserAccountApprovalState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

