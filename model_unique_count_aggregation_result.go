/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
)

// checks if the UniqueCountAggregationResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UniqueCountAggregationResult{}

// UniqueCountAggregationResult struct for UniqueCountAggregationResult
type UniqueCountAggregationResult struct {
	// Unique property values of current hour that are new of today. Leave the value as interface{} to save space.
	NewItems map[string]interface{} `json:"newItems,omitempty"`
}

// NewUniqueCountAggregationResult instantiates a new UniqueCountAggregationResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUniqueCountAggregationResult() *UniqueCountAggregationResult {
	this := UniqueCountAggregationResult{}
	return &this
}

// NewUniqueCountAggregationResultWithDefaults instantiates a new UniqueCountAggregationResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUniqueCountAggregationResultWithDefaults() *UniqueCountAggregationResult {
	this := UniqueCountAggregationResult{}
	return &this
}

// GetNewItems returns the NewItems field value if set, zero value otherwise.
func (o *UniqueCountAggregationResult) GetNewItems() map[string]interface{} {
	if o == nil || IsNil(o.NewItems) {
		var ret map[string]interface{}
		return ret
	}
	return o.NewItems
}

// GetNewItemsOk returns a tuple with the NewItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniqueCountAggregationResult) GetNewItemsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.NewItems) {
		return map[string]interface{}{}, false
	}
	return o.NewItems, true
}

// HasNewItems returns a boolean if a field has been set.
func (o *UniqueCountAggregationResult) HasNewItems() bool {
	if o != nil && !IsNil(o.NewItems) {
		return true
	}

	return false
}

// SetNewItems gets a reference to the given map[string]interface{} and assigns it to the NewItems field.
func (o *UniqueCountAggregationResult) SetNewItems(v map[string]interface{}) {
	o.NewItems = v
}

func (o UniqueCountAggregationResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UniqueCountAggregationResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NewItems) {
		toSerialize["newItems"] = o.NewItems
	}
	return toSerialize, nil
}

type NullableUniqueCountAggregationResult struct {
	value *UniqueCountAggregationResult
	isSet bool
}

func (v NullableUniqueCountAggregationResult) Get() *UniqueCountAggregationResult {
	return v.value
}

func (v *NullableUniqueCountAggregationResult) Set(val *UniqueCountAggregationResult) {
	v.value = val
	v.isSet = true
}

func (v NullableUniqueCountAggregationResult) IsSet() bool {
	return v.isSet
}

func (v *NullableUniqueCountAggregationResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUniqueCountAggregationResult(val *UniqueCountAggregationResult) *NullableUniqueCountAggregationResult {
	return &NullableUniqueCountAggregationResult{value: val, isSet: true}
}

func (v NullableUniqueCountAggregationResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUniqueCountAggregationResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
