/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SupportTicketPriority the model 'SupportTicketPriority'
type SupportTicketPriority string

// List of SupportTicketPriority
const (
	SupportTicketPriority_LOW    SupportTicketPriority = "LOW"
	SupportTicketPriority_NORMAL SupportTicketPriority = "NORMAL"
	SupportTicketPriority_HIGH   SupportTicketPriority = "HIGH"
	SupportTicketPriority_URGENT SupportTicketPriority = "URGENT"
)

// All allowed values of SupportTicketPriority enum
var AllowedSupportTicketPriorityEnumValues = []SupportTicketPriority{
	"LOW",
	"NORMAL",
	"HIGH",
	"URGENT",
}

func (v *SupportTicketPriority) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SupportTicketPriority(value)
	for _, existing := range AllowedSupportTicketPriorityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SupportTicketPriority", value)
}

// NewSupportTicketPriorityFromValue returns a pointer to a valid SupportTicketPriority
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSupportTicketPriorityFromValue(v string) (*SupportTicketPriority, error) {
	ev := SupportTicketPriority(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SupportTicketPriority: valid values are %v", v, AllowedSupportTicketPriorityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SupportTicketPriority) IsValid() bool {
	for _, existing := range AllowedSupportTicketPriorityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SupportTicketPriority value
func (v SupportTicketPriority) Ptr() *SupportTicketPriority {
	return &v
}

type NullableSupportTicketPriority struct {
	value *SupportTicketPriority
	isSet bool
}

func (v NullableSupportTicketPriority) Get() *SupportTicketPriority {
	return v.value
}

func (v *NullableSupportTicketPriority) Set(val *SupportTicketPriority) {
	v.value = val
	v.isSet = true
}

func (v NullableSupportTicketPriority) IsSet() bool {
	return v.isSet
}

func (v *NullableSupportTicketPriority) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupportTicketPriority(val *SupportTicketPriority) *NullableSupportTicketPriority {
	return &NullableSupportTicketPriority{value: val, isSet: true}
}

func (v NullableSupportTicketPriority) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupportTicketPriority) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
