/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
)

// checks if the ListRevenueRecordsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListRevenueRecordsResponse{}

// ListRevenueRecordsResponse struct for ListRevenueRecordsResponse
type ListRevenueRecordsResponse struct {
	NextOffset *int32 `json:"nextOffset,omitempty"`
	// list of revenue records.
	RevenueRecords []RevenueRecord `json:"revenueRecords,omitempty"`
}

// NewListRevenueRecordsResponse instantiates a new ListRevenueRecordsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListRevenueRecordsResponse() *ListRevenueRecordsResponse {
	this := ListRevenueRecordsResponse{}
	return &this
}

// NewListRevenueRecordsResponseWithDefaults instantiates a new ListRevenueRecordsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListRevenueRecordsResponseWithDefaults() *ListRevenueRecordsResponse {
	this := ListRevenueRecordsResponse{}
	return &this
}

// GetNextOffset returns the NextOffset field value if set, zero value otherwise.
func (o *ListRevenueRecordsResponse) GetNextOffset() int32 {
	if o == nil || IsNil(o.NextOffset) {
		var ret int32
		return ret
	}
	return *o.NextOffset
}

// GetNextOffsetOk returns a tuple with the NextOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListRevenueRecordsResponse) GetNextOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.NextOffset) {
		return nil, false
	}
	return o.NextOffset, true
}

// HasNextOffset returns a boolean if a field has been set.
func (o *ListRevenueRecordsResponse) HasNextOffset() bool {
	if o != nil && !IsNil(o.NextOffset) {
		return true
	}

	return false
}

// SetNextOffset gets a reference to the given int32 and assigns it to the NextOffset field.
func (o *ListRevenueRecordsResponse) SetNextOffset(v int32) {
	o.NextOffset = &v
}

// GetRevenueRecords returns the RevenueRecords field value if set, zero value otherwise.
func (o *ListRevenueRecordsResponse) GetRevenueRecords() []RevenueRecord {
	if o == nil || IsNil(o.RevenueRecords) {
		var ret []RevenueRecord
		return ret
	}
	return o.RevenueRecords
}

// GetRevenueRecordsOk returns a tuple with the RevenueRecords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListRevenueRecordsResponse) GetRevenueRecordsOk() ([]RevenueRecord, bool) {
	if o == nil || IsNil(o.RevenueRecords) {
		return nil, false
	}
	return o.RevenueRecords, true
}

// HasRevenueRecords returns a boolean if a field has been set.
func (o *ListRevenueRecordsResponse) HasRevenueRecords() bool {
	if o != nil && !IsNil(o.RevenueRecords) {
		return true
	}

	return false
}

// SetRevenueRecords gets a reference to the given []RevenueRecord and assigns it to the RevenueRecords field.
func (o *ListRevenueRecordsResponse) SetRevenueRecords(v []RevenueRecord) {
	o.RevenueRecords = v
}

func (o ListRevenueRecordsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListRevenueRecordsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NextOffset) {
		toSerialize["nextOffset"] = o.NextOffset
	}
	if !IsNil(o.RevenueRecords) {
		toSerialize["revenueRecords"] = o.RevenueRecords
	}
	return toSerialize, nil
}

type NullableListRevenueRecordsResponse struct {
	value *ListRevenueRecordsResponse
	isSet bool
}

func (v NullableListRevenueRecordsResponse) Get() *ListRevenueRecordsResponse {
	return v.value
}

func (v *NullableListRevenueRecordsResponse) Set(val *ListRevenueRecordsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListRevenueRecordsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListRevenueRecordsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRevenueRecordsResponse(val *ListRevenueRecordsResponse) *NullableListRevenueRecordsResponse {
	return &NullableListRevenueRecordsResponse{value: val, isSet: true}
}

func (v NullableListRevenueRecordsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRevenueRecordsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
