/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AwsMarketplaceCppoOpportunityRuleType the model 'AwsMarketplaceCppoOpportunityRuleType'
type AwsMarketplaceCppoOpportunityRuleType string

// List of AwsMarketplaceCppoOpportunityRuleType
const (
	AwsMarketplaceCppoOpportunityRuleType_AvailabilityRule     AwsMarketplaceCppoOpportunityRuleType = "AvailabilityRule"
	AwsMarketplaceCppoOpportunityRuleType_PartnerTargetingRule AwsMarketplaceCppoOpportunityRuleType = "PartnerTargetingRule"
	AwsMarketplaceCppoOpportunityRuleType_TargetingRule        AwsMarketplaceCppoOpportunityRuleType = "TargetingRule"
	AwsMarketplaceCppoOpportunityRuleType_TaxConfigurationRule AwsMarketplaceCppoOpportunityRuleType = "TaxConfigurationRule"
)

// All allowed values of AwsMarketplaceCppoOpportunityRuleType enum
var AllowedAwsMarketplaceCppoOpportunityRuleTypeEnumValues = []AwsMarketplaceCppoOpportunityRuleType{
	"AvailabilityRule",
	"PartnerTargetingRule",
	"TargetingRule",
	"TaxConfigurationRule",
}

func (v *AwsMarketplaceCppoOpportunityRuleType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AwsMarketplaceCppoOpportunityRuleType(value)
	for _, existing := range AllowedAwsMarketplaceCppoOpportunityRuleTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AwsMarketplaceCppoOpportunityRuleType", value)
}

// NewAwsMarketplaceCppoOpportunityRuleTypeFromValue returns a pointer to a valid AwsMarketplaceCppoOpportunityRuleType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAwsMarketplaceCppoOpportunityRuleTypeFromValue(v string) (*AwsMarketplaceCppoOpportunityRuleType, error) {
	ev := AwsMarketplaceCppoOpportunityRuleType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AwsMarketplaceCppoOpportunityRuleType: valid values are %v", v, AllowedAwsMarketplaceCppoOpportunityRuleTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AwsMarketplaceCppoOpportunityRuleType) IsValid() bool {
	for _, existing := range AllowedAwsMarketplaceCppoOpportunityRuleTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AwsMarketplaceCppoOpportunityRuleType value
func (v AwsMarketplaceCppoOpportunityRuleType) Ptr() *AwsMarketplaceCppoOpportunityRuleType {
	return &v
}

type NullableAwsMarketplaceCppoOpportunityRuleType struct {
	value *AwsMarketplaceCppoOpportunityRuleType
	isSet bool
}

func (v NullableAwsMarketplaceCppoOpportunityRuleType) Get() *AwsMarketplaceCppoOpportunityRuleType {
	return v.value
}

func (v *NullableAwsMarketplaceCppoOpportunityRuleType) Set(val *AwsMarketplaceCppoOpportunityRuleType) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsMarketplaceCppoOpportunityRuleType) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsMarketplaceCppoOpportunityRuleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsMarketplaceCppoOpportunityRuleType(val *AwsMarketplaceCppoOpportunityRuleType) *NullableAwsMarketplaceCppoOpportunityRuleType {
	return &NullableAwsMarketplaceCppoOpportunityRuleType{value: val, isSet: true}
}

func (v NullableAwsMarketplaceCppoOpportunityRuleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsMarketplaceCppoOpportunityRuleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
