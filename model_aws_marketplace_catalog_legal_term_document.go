/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
)

// checks if the AwsMarketplaceCatalogLegalTermDocument type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsMarketplaceCatalogLegalTermDocument{}

// AwsMarketplaceCatalogLegalTermDocument struct for AwsMarketplaceCatalogLegalTermDocument
type AwsMarketplaceCatalogLegalTermDocument struct {
	Type *AwsMarketplaceCatalogLegalTermDocumentType `json:"Type,omitempty"`
	// A URL to the legal document for buyers to read. Required when Type is one of the following [CustomEula, CustomDsa].
	Url *string `json:"Url,omitempty"`
	// Version of standard contracts provided by AWS Marketplace. Required when Type is one of the following [StandardEula, StandardDsa]. The version of StandardEula is \"2022-07-14\". The version of StandardDsa is \"2019-12-12\".
	Version *string `json:"Version,omitempty"`
}

// NewAwsMarketplaceCatalogLegalTermDocument instantiates a new AwsMarketplaceCatalogLegalTermDocument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsMarketplaceCatalogLegalTermDocument() *AwsMarketplaceCatalogLegalTermDocument {
	this := AwsMarketplaceCatalogLegalTermDocument{}
	return &this
}

// NewAwsMarketplaceCatalogLegalTermDocumentWithDefaults instantiates a new AwsMarketplaceCatalogLegalTermDocument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsMarketplaceCatalogLegalTermDocumentWithDefaults() *AwsMarketplaceCatalogLegalTermDocument {
	this := AwsMarketplaceCatalogLegalTermDocument{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AwsMarketplaceCatalogLegalTermDocument) GetType() AwsMarketplaceCatalogLegalTermDocumentType {
	if o == nil || IsNil(o.Type) {
		var ret AwsMarketplaceCatalogLegalTermDocumentType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsMarketplaceCatalogLegalTermDocument) GetTypeOk() (*AwsMarketplaceCatalogLegalTermDocumentType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AwsMarketplaceCatalogLegalTermDocument) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given AwsMarketplaceCatalogLegalTermDocumentType and assigns it to the Type field.
func (o *AwsMarketplaceCatalogLegalTermDocument) SetType(v AwsMarketplaceCatalogLegalTermDocumentType) {
	o.Type = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *AwsMarketplaceCatalogLegalTermDocument) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsMarketplaceCatalogLegalTermDocument) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *AwsMarketplaceCatalogLegalTermDocument) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *AwsMarketplaceCatalogLegalTermDocument) SetUrl(v string) {
	o.Url = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *AwsMarketplaceCatalogLegalTermDocument) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsMarketplaceCatalogLegalTermDocument) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *AwsMarketplaceCatalogLegalTermDocument) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *AwsMarketplaceCatalogLegalTermDocument) SetVersion(v string) {
	o.Version = &v
}

func (o AwsMarketplaceCatalogLegalTermDocument) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsMarketplaceCatalogLegalTermDocument) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["Type"] = o.Type
	}
	if !IsNil(o.Url) {
		toSerialize["Url"] = o.Url
	}
	if !IsNil(o.Version) {
		toSerialize["Version"] = o.Version
	}
	return toSerialize, nil
}

type NullableAwsMarketplaceCatalogLegalTermDocument struct {
	value *AwsMarketplaceCatalogLegalTermDocument
	isSet bool
}

func (v NullableAwsMarketplaceCatalogLegalTermDocument) Get() *AwsMarketplaceCatalogLegalTermDocument {
	return v.value
}

func (v *NullableAwsMarketplaceCatalogLegalTermDocument) Set(val *AwsMarketplaceCatalogLegalTermDocument) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsMarketplaceCatalogLegalTermDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsMarketplaceCatalogLegalTermDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsMarketplaceCatalogLegalTermDocument(val *AwsMarketplaceCatalogLegalTermDocument) *NullableAwsMarketplaceCatalogLegalTermDocument {
	return &NullableAwsMarketplaceCatalogLegalTermDocument{value: val, isSet: true}
}

func (v NullableAwsMarketplaceCatalogLegalTermDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsMarketplaceCatalogLegalTermDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
