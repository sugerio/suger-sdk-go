/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PriceModelCategory the model 'PriceModelCategory'
type PriceModelCategory string

// List of PriceModelCategory
const (
	PriceModelCategory_Basic            PriceModelCategory = "basic"
	PriceModelCategory_Tiered           PriceModelCategory = "tiered"
	PriceModelCategory_Bulk             PriceModelCategory = "bulk"
	PriceModelCategory_Volume           PriceModelCategory = "volume"
	PriceModelCategory_Percentage       PriceModelCategory = "percentage"
	PriceModelCategory_TieredPercentage PriceModelCategory = "tiered-percentage"
	PriceModelCategory_Matrix           PriceModelCategory = "matrix"
)

// All allowed values of PriceModelCategory enum
var AllowedPriceModelCategoryEnumValues = []PriceModelCategory{
	"basic",
	"tiered",
	"bulk",
	"volume",
	"percentage",
	"tiered-percentage",
	"matrix",
}

func (v *PriceModelCategory) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PriceModelCategory(value)
	for _, existing := range AllowedPriceModelCategoryEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PriceModelCategory", value)
}

// NewPriceModelCategoryFromValue returns a pointer to a valid PriceModelCategory
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPriceModelCategoryFromValue(v string) (*PriceModelCategory, error) {
	ev := PriceModelCategory(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PriceModelCategory: valid values are %v", v, AllowedPriceModelCategoryEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PriceModelCategory) IsValid() bool {
	for _, existing := range AllowedPriceModelCategoryEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PriceModelCategory value
func (v PriceModelCategory) Ptr() *PriceModelCategory {
	return &v
}

type NullablePriceModelCategory struct {
	value *PriceModelCategory
	isSet bool
}

func (v NullablePriceModelCategory) Get() *PriceModelCategory {
	return v.value
}

func (v *NullablePriceModelCategory) Set(val *PriceModelCategory) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceModelCategory) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceModelCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceModelCategory(val *PriceModelCategory) *NullablePriceModelCategory {
	return &NullablePriceModelCategory{value: val, isSet: true}
}

func (v NullablePriceModelCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceModelCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
