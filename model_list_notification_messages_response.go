/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ListNotificationMessagesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListNotificationMessagesResponse{}

// ListNotificationMessagesResponse struct for ListNotificationMessagesResponse
type ListNotificationMessagesResponse struct {
	// The next offset to use in the next request to get the next page of notification messages. If this field is null, there are no more notification messages to get.
	NextOffset *int32 `json:"nextOffset,omitempty"`
	NotificationMessages []NotificationMessage `json:"notificationMessages,omitempty"`
	// The total number of notification messages. Only available when the request is made with the first offset = 0.
	TotalCount *int32 `json:"totalCount,omitempty"`
}

// NewListNotificationMessagesResponse instantiates a new ListNotificationMessagesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListNotificationMessagesResponse() *ListNotificationMessagesResponse {
	this := ListNotificationMessagesResponse{}
	return &this
}

// NewListNotificationMessagesResponseWithDefaults instantiates a new ListNotificationMessagesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListNotificationMessagesResponseWithDefaults() *ListNotificationMessagesResponse {
	this := ListNotificationMessagesResponse{}
	return &this
}

// GetNextOffset returns the NextOffset field value if set, zero value otherwise.
func (o *ListNotificationMessagesResponse) GetNextOffset() int32 {
	if o == nil || IsNil(o.NextOffset) {
		var ret int32
		return ret
	}
	return *o.NextOffset
}

// GetNextOffsetOk returns a tuple with the NextOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListNotificationMessagesResponse) GetNextOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.NextOffset) {
		return nil, false
	}
	return o.NextOffset, true
}

// HasNextOffset returns a boolean if a field has been set.
func (o *ListNotificationMessagesResponse) HasNextOffset() bool {
	if o != nil && !IsNil(o.NextOffset) {
		return true
	}

	return false
}

// SetNextOffset gets a reference to the given int32 and assigns it to the NextOffset field.
func (o *ListNotificationMessagesResponse) SetNextOffset(v int32) {
	o.NextOffset = &v
}

// GetNotificationMessages returns the NotificationMessages field value if set, zero value otherwise.
func (o *ListNotificationMessagesResponse) GetNotificationMessages() []NotificationMessage {
	if o == nil || IsNil(o.NotificationMessages) {
		var ret []NotificationMessage
		return ret
	}
	return o.NotificationMessages
}

// GetNotificationMessagesOk returns a tuple with the NotificationMessages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListNotificationMessagesResponse) GetNotificationMessagesOk() ([]NotificationMessage, bool) {
	if o == nil || IsNil(o.NotificationMessages) {
		return nil, false
	}
	return o.NotificationMessages, true
}

// HasNotificationMessages returns a boolean if a field has been set.
func (o *ListNotificationMessagesResponse) HasNotificationMessages() bool {
	if o != nil && !IsNil(o.NotificationMessages) {
		return true
	}

	return false
}

// SetNotificationMessages gets a reference to the given []NotificationMessage and assigns it to the NotificationMessages field.
func (o *ListNotificationMessagesResponse) SetNotificationMessages(v []NotificationMessage) {
	o.NotificationMessages = v
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *ListNotificationMessagesResponse) GetTotalCount() int32 {
	if o == nil || IsNil(o.TotalCount) {
		var ret int32
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListNotificationMessagesResponse) GetTotalCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalCount) {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *ListNotificationMessagesResponse) HasTotalCount() bool {
	if o != nil && !IsNil(o.TotalCount) {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given int32 and assigns it to the TotalCount field.
func (o *ListNotificationMessagesResponse) SetTotalCount(v int32) {
	o.TotalCount = &v
}

func (o ListNotificationMessagesResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListNotificationMessagesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NextOffset) {
		toSerialize["nextOffset"] = o.NextOffset
	}
	if !IsNil(o.NotificationMessages) {
		toSerialize["notificationMessages"] = o.NotificationMessages
	}
	if !IsNil(o.TotalCount) {
		toSerialize["totalCount"] = o.TotalCount
	}
	return toSerialize, nil
}

type NullableListNotificationMessagesResponse struct {
	value *ListNotificationMessagesResponse
	isSet bool
}

func (v NullableListNotificationMessagesResponse) Get() *ListNotificationMessagesResponse {
	return v.value
}

func (v *NullableListNotificationMessagesResponse) Set(val *ListNotificationMessagesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListNotificationMessagesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListNotificationMessagesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListNotificationMessagesResponse(val *ListNotificationMessagesResponse) *NullableListNotificationMessagesResponse {
	return &NullableListNotificationMessagesResponse{value: val, isSet: true}
}

func (v NullableListNotificationMessagesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListNotificationMessagesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


