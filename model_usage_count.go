/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UsageCount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsageCount{}

// UsageCount struct for UsageCount
type UsageCount struct {
	// The count of this dimension usage records that are handled as credit.
	CreditCount *float32 `json:"creditCount,omitempty"`
	// The count of this dimension usage records that are handled as included in IncludedBaseQuantity
	IncludedCount *float32 `json:"includedCount,omitempty"`
	// The count of this dimension usage records that are reported to cloud vendors.
	ReportedCount *float32 `json:"reportedCount,omitempty"`
}

// NewUsageCount instantiates a new UsageCount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsageCount() *UsageCount {
	this := UsageCount{}
	return &this
}

// NewUsageCountWithDefaults instantiates a new UsageCount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageCountWithDefaults() *UsageCount {
	this := UsageCount{}
	return &this
}

// GetCreditCount returns the CreditCount field value if set, zero value otherwise.
func (o *UsageCount) GetCreditCount() float32 {
	if o == nil || IsNil(o.CreditCount) {
		var ret float32
		return ret
	}
	return *o.CreditCount
}

// GetCreditCountOk returns a tuple with the CreditCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageCount) GetCreditCountOk() (*float32, bool) {
	if o == nil || IsNil(o.CreditCount) {
		return nil, false
	}
	return o.CreditCount, true
}

// HasCreditCount returns a boolean if a field has been set.
func (o *UsageCount) HasCreditCount() bool {
	if o != nil && !IsNil(o.CreditCount) {
		return true
	}

	return false
}

// SetCreditCount gets a reference to the given float32 and assigns it to the CreditCount field.
func (o *UsageCount) SetCreditCount(v float32) {
	o.CreditCount = &v
}

// GetIncludedCount returns the IncludedCount field value if set, zero value otherwise.
func (o *UsageCount) GetIncludedCount() float32 {
	if o == nil || IsNil(o.IncludedCount) {
		var ret float32
		return ret
	}
	return *o.IncludedCount
}

// GetIncludedCountOk returns a tuple with the IncludedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageCount) GetIncludedCountOk() (*float32, bool) {
	if o == nil || IsNil(o.IncludedCount) {
		return nil, false
	}
	return o.IncludedCount, true
}

// HasIncludedCount returns a boolean if a field has been set.
func (o *UsageCount) HasIncludedCount() bool {
	if o != nil && !IsNil(o.IncludedCount) {
		return true
	}

	return false
}

// SetIncludedCount gets a reference to the given float32 and assigns it to the IncludedCount field.
func (o *UsageCount) SetIncludedCount(v float32) {
	o.IncludedCount = &v
}

// GetReportedCount returns the ReportedCount field value if set, zero value otherwise.
func (o *UsageCount) GetReportedCount() float32 {
	if o == nil || IsNil(o.ReportedCount) {
		var ret float32
		return ret
	}
	return *o.ReportedCount
}

// GetReportedCountOk returns a tuple with the ReportedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageCount) GetReportedCountOk() (*float32, bool) {
	if o == nil || IsNil(o.ReportedCount) {
		return nil, false
	}
	return o.ReportedCount, true
}

// HasReportedCount returns a boolean if a field has been set.
func (o *UsageCount) HasReportedCount() bool {
	if o != nil && !IsNil(o.ReportedCount) {
		return true
	}

	return false
}

// SetReportedCount gets a reference to the given float32 and assigns it to the ReportedCount field.
func (o *UsageCount) SetReportedCount(v float32) {
	o.ReportedCount = &v
}

func (o UsageCount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsageCount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreditCount) {
		toSerialize["creditCount"] = o.CreditCount
	}
	if !IsNil(o.IncludedCount) {
		toSerialize["includedCount"] = o.IncludedCount
	}
	if !IsNil(o.ReportedCount) {
		toSerialize["reportedCount"] = o.ReportedCount
	}
	return toSerialize, nil
}

type NullableUsageCount struct {
	value *UsageCount
	isSet bool
}

func (v NullableUsageCount) Get() *UsageCount {
	return v.value
}

func (v *NullableUsageCount) Set(val *UsageCount) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageCount) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageCount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageCount(val *UsageCount) *NullableUsageCount {
	return &NullableUsageCount{value: val, isSet: true}
}

func (v NullableUsageCount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageCount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


