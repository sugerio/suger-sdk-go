/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
	"fmt"
)

// AwsMarketplaceCatalogLegalTermDocumentType the model 'AwsMarketplaceCatalogLegalTermDocumentType'
type AwsMarketplaceCatalogLegalTermDocumentType string

// List of AwsMarketplaceCatalogLegalTermDocumentType
const (
	AwsMarketplaceCatalogLegalTermDocumentType_CustomEula               AwsMarketplaceCatalogLegalTermDocumentType = "CustomEula"
	AwsMarketplaceCatalogLegalTermDocumentType_CustomDsa                AwsMarketplaceCatalogLegalTermDocumentType = "CustomDsa"
	AwsMarketplaceCatalogLegalTermDocumentType_StandardEula             AwsMarketplaceCatalogLegalTermDocumentType = "StandardEula"
	AwsMarketplaceCatalogLegalTermDocumentType_StandardDsa              AwsMarketplaceCatalogLegalTermDocumentType = "StandardDsa"
	AwsMarketplaceCatalogLegalTermDocumentType_StandardResellerContract AwsMarketplaceCatalogLegalTermDocumentType = "StandardResellerContract"
	AwsMarketplaceCatalogLegalTermDocumentType_CustomResellerContract   AwsMarketplaceCatalogLegalTermDocumentType = "CustomResellerContract"
)

// All allowed values of AwsMarketplaceCatalogLegalTermDocumentType enum
var AllowedAwsMarketplaceCatalogLegalTermDocumentTypeEnumValues = []AwsMarketplaceCatalogLegalTermDocumentType{
	"CustomEula",
	"CustomDsa",
	"StandardEula",
	"StandardDsa",
	"StandardResellerContract",
	"CustomResellerContract",
}

func (v *AwsMarketplaceCatalogLegalTermDocumentType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AwsMarketplaceCatalogLegalTermDocumentType(value)
	for _, existing := range AllowedAwsMarketplaceCatalogLegalTermDocumentTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AwsMarketplaceCatalogLegalTermDocumentType", value)
}

// NewAwsMarketplaceCatalogLegalTermDocumentTypeFromValue returns a pointer to a valid AwsMarketplaceCatalogLegalTermDocumentType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAwsMarketplaceCatalogLegalTermDocumentTypeFromValue(v string) (*AwsMarketplaceCatalogLegalTermDocumentType, error) {
	ev := AwsMarketplaceCatalogLegalTermDocumentType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AwsMarketplaceCatalogLegalTermDocumentType: valid values are %v", v, AllowedAwsMarketplaceCatalogLegalTermDocumentTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AwsMarketplaceCatalogLegalTermDocumentType) IsValid() bool {
	for _, existing := range AllowedAwsMarketplaceCatalogLegalTermDocumentTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AwsMarketplaceCatalogLegalTermDocumentType value
func (v AwsMarketplaceCatalogLegalTermDocumentType) Ptr() *AwsMarketplaceCatalogLegalTermDocumentType {
	return &v
}

type NullableAwsMarketplaceCatalogLegalTermDocumentType struct {
	value *AwsMarketplaceCatalogLegalTermDocumentType
	isSet bool
}

func (v NullableAwsMarketplaceCatalogLegalTermDocumentType) Get() *AwsMarketplaceCatalogLegalTermDocumentType {
	return v.value
}

func (v *NullableAwsMarketplaceCatalogLegalTermDocumentType) Set(val *AwsMarketplaceCatalogLegalTermDocumentType) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsMarketplaceCatalogLegalTermDocumentType) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsMarketplaceCatalogLegalTermDocumentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsMarketplaceCatalogLegalTermDocumentType(val *AwsMarketplaceCatalogLegalTermDocumentType) *NullableAwsMarketplaceCatalogLegalTermDocumentType {
	return &NullableAwsMarketplaceCatalogLegalTermDocumentType{value: val, isSet: true}
}

func (v NullableAwsMarketplaceCatalogLegalTermDocumentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsMarketplaceCatalogLegalTermDocumentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
