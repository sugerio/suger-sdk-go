/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
	"fmt"
)

// GcpMarketplaceResellerPrivateOfferPlanStateType the model 'GcpMarketplaceResellerPrivateOfferPlanStateType'
type GcpMarketplaceResellerPrivateOfferPlanStateType string

// List of GcpMarketplaceResellerPrivateOfferPlanStateType
const (
	GcpMarketplaceResellerPrivateOfferPlanStateType_UNKNOWN                GcpMarketplaceResellerPrivateOfferPlanStateType = ""
	GcpMarketplaceResellerPrivateOfferPlanStateType_DRAFT                  GcpMarketplaceResellerPrivateOfferPlanStateType = "STATE_TYPE_DRAFT"
	GcpMarketplaceResellerPrivateOfferPlanStateType_READY_TO_ACCEPT        GcpMarketplaceResellerPrivateOfferPlanStateType = "STATE_TYPE_READY_TO_ACCEPT"
	GcpMarketplaceResellerPrivateOfferPlanStateType_READY_TO_USE           GcpMarketplaceResellerPrivateOfferPlanStateType = "STATE_TYPE_READY_TO_USE"
	GcpMarketplaceResellerPrivateOfferPlanStateType_REJECTED               GcpMarketplaceResellerPrivateOfferPlanStateType = "STATE_TYPE_REJECTED"
	GcpMarketplaceResellerPrivateOfferPlanStateType_USED                   GcpMarketplaceResellerPrivateOfferPlanStateType = "STATE_TYPE_USED"
	GcpMarketplaceResellerPrivateOfferPlanStateType_CANCELED               GcpMarketplaceResellerPrivateOfferPlanStateType = "STATE_TYPE_CANCELED"
	GcpMarketplaceResellerPrivateOfferPlanStateType_EXPIRED_NEVER_ACCEPTED GcpMarketplaceResellerPrivateOfferPlanStateType = "STATE_TYPE_EXPIRED_NEVER_ACCEPTED"
	GcpMarketplaceResellerPrivateOfferPlanStateType_EXPIRED_ACCEPTED       GcpMarketplaceResellerPrivateOfferPlanStateType = "STATE_TYPE_EXPIRED_ACCEPTED"
	GcpMarketplaceResellerPrivateOfferPlanStateType_COMPLETED              GcpMarketplaceResellerPrivateOfferPlanStateType = "STATE_TYPE_COMPLETED"
)

// All allowed values of GcpMarketplaceResellerPrivateOfferPlanStateType enum
var AllowedGcpMarketplaceResellerPrivateOfferPlanStateTypeEnumValues = []GcpMarketplaceResellerPrivateOfferPlanStateType{
	"",
	"STATE_TYPE_DRAFT",
	"STATE_TYPE_READY_TO_ACCEPT",
	"STATE_TYPE_READY_TO_USE",
	"STATE_TYPE_REJECTED",
	"STATE_TYPE_USED",
	"STATE_TYPE_CANCELED",
	"STATE_TYPE_EXPIRED_NEVER_ACCEPTED",
	"STATE_TYPE_EXPIRED_ACCEPTED",
	"STATE_TYPE_COMPLETED",
}

func (v *GcpMarketplaceResellerPrivateOfferPlanStateType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GcpMarketplaceResellerPrivateOfferPlanStateType(value)
	for _, existing := range AllowedGcpMarketplaceResellerPrivateOfferPlanStateTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GcpMarketplaceResellerPrivateOfferPlanStateType", value)
}

// NewGcpMarketplaceResellerPrivateOfferPlanStateTypeFromValue returns a pointer to a valid GcpMarketplaceResellerPrivateOfferPlanStateType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGcpMarketplaceResellerPrivateOfferPlanStateTypeFromValue(v string) (*GcpMarketplaceResellerPrivateOfferPlanStateType, error) {
	ev := GcpMarketplaceResellerPrivateOfferPlanStateType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GcpMarketplaceResellerPrivateOfferPlanStateType: valid values are %v", v, AllowedGcpMarketplaceResellerPrivateOfferPlanStateTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GcpMarketplaceResellerPrivateOfferPlanStateType) IsValid() bool {
	for _, existing := range AllowedGcpMarketplaceResellerPrivateOfferPlanStateTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GcpMarketplaceResellerPrivateOfferPlanStateType value
func (v GcpMarketplaceResellerPrivateOfferPlanStateType) Ptr() *GcpMarketplaceResellerPrivateOfferPlanStateType {
	return &v
}

type NullableGcpMarketplaceResellerPrivateOfferPlanStateType struct {
	value *GcpMarketplaceResellerPrivateOfferPlanStateType
	isSet bool
}

func (v NullableGcpMarketplaceResellerPrivateOfferPlanStateType) Get() *GcpMarketplaceResellerPrivateOfferPlanStateType {
	return v.value
}

func (v *NullableGcpMarketplaceResellerPrivateOfferPlanStateType) Set(val *GcpMarketplaceResellerPrivateOfferPlanStateType) {
	v.value = val
	v.isSet = true
}

func (v NullableGcpMarketplaceResellerPrivateOfferPlanStateType) IsSet() bool {
	return v.isSet
}

func (v *NullableGcpMarketplaceResellerPrivateOfferPlanStateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGcpMarketplaceResellerPrivateOfferPlanStateType(val *GcpMarketplaceResellerPrivateOfferPlanStateType) *NullableGcpMarketplaceResellerPrivateOfferPlanStateType {
	return &NullableGcpMarketplaceResellerPrivateOfferPlanStateType{value: val, isSet: true}
}

func (v NullableGcpMarketplaceResellerPrivateOfferPlanStateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGcpMarketplaceResellerPrivateOfferPlanStateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
