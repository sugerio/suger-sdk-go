/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
)

// checks if the SlackOAuthV2ResponseAuthedUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SlackOAuthV2ResponseAuthedUser{}

// SlackOAuthV2ResponseAuthedUser struct for SlackOAuthV2ResponseAuthedUser
type SlackOAuthV2ResponseAuthedUser struct {
	AccessToken  *string `json:"access_token,omitempty"`
	ExpiresIn    *int32  `json:"expires_in,omitempty"`
	Id           *string `json:"id,omitempty"`
	RefreshToken *string `json:"refresh_token,omitempty"`
	Scope        *string `json:"scope,omitempty"`
	TokenType    *string `json:"token_type,omitempty"`
}

// NewSlackOAuthV2ResponseAuthedUser instantiates a new SlackOAuthV2ResponseAuthedUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSlackOAuthV2ResponseAuthedUser() *SlackOAuthV2ResponseAuthedUser {
	this := SlackOAuthV2ResponseAuthedUser{}
	return &this
}

// NewSlackOAuthV2ResponseAuthedUserWithDefaults instantiates a new SlackOAuthV2ResponseAuthedUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSlackOAuthV2ResponseAuthedUserWithDefaults() *SlackOAuthV2ResponseAuthedUser {
	this := SlackOAuthV2ResponseAuthedUser{}
	return &this
}

// GetAccessToken returns the AccessToken field value if set, zero value otherwise.
func (o *SlackOAuthV2ResponseAuthedUser) GetAccessToken() string {
	if o == nil || IsNil(o.AccessToken) {
		var ret string
		return ret
	}
	return *o.AccessToken
}

// GetAccessTokenOk returns a tuple with the AccessToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SlackOAuthV2ResponseAuthedUser) GetAccessTokenOk() (*string, bool) {
	if o == nil || IsNil(o.AccessToken) {
		return nil, false
	}
	return o.AccessToken, true
}

// HasAccessToken returns a boolean if a field has been set.
func (o *SlackOAuthV2ResponseAuthedUser) HasAccessToken() bool {
	if o != nil && !IsNil(o.AccessToken) {
		return true
	}

	return false
}

// SetAccessToken gets a reference to the given string and assigns it to the AccessToken field.
func (o *SlackOAuthV2ResponseAuthedUser) SetAccessToken(v string) {
	o.AccessToken = &v
}

// GetExpiresIn returns the ExpiresIn field value if set, zero value otherwise.
func (o *SlackOAuthV2ResponseAuthedUser) GetExpiresIn() int32 {
	if o == nil || IsNil(o.ExpiresIn) {
		var ret int32
		return ret
	}
	return *o.ExpiresIn
}

// GetExpiresInOk returns a tuple with the ExpiresIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SlackOAuthV2ResponseAuthedUser) GetExpiresInOk() (*int32, bool) {
	if o == nil || IsNil(o.ExpiresIn) {
		return nil, false
	}
	return o.ExpiresIn, true
}

// HasExpiresIn returns a boolean if a field has been set.
func (o *SlackOAuthV2ResponseAuthedUser) HasExpiresIn() bool {
	if o != nil && !IsNil(o.ExpiresIn) {
		return true
	}

	return false
}

// SetExpiresIn gets a reference to the given int32 and assigns it to the ExpiresIn field.
func (o *SlackOAuthV2ResponseAuthedUser) SetExpiresIn(v int32) {
	o.ExpiresIn = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SlackOAuthV2ResponseAuthedUser) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SlackOAuthV2ResponseAuthedUser) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SlackOAuthV2ResponseAuthedUser) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SlackOAuthV2ResponseAuthedUser) SetId(v string) {
	o.Id = &v
}

// GetRefreshToken returns the RefreshToken field value if set, zero value otherwise.
func (o *SlackOAuthV2ResponseAuthedUser) GetRefreshToken() string {
	if o == nil || IsNil(o.RefreshToken) {
		var ret string
		return ret
	}
	return *o.RefreshToken
}

// GetRefreshTokenOk returns a tuple with the RefreshToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SlackOAuthV2ResponseAuthedUser) GetRefreshTokenOk() (*string, bool) {
	if o == nil || IsNil(o.RefreshToken) {
		return nil, false
	}
	return o.RefreshToken, true
}

// HasRefreshToken returns a boolean if a field has been set.
func (o *SlackOAuthV2ResponseAuthedUser) HasRefreshToken() bool {
	if o != nil && !IsNil(o.RefreshToken) {
		return true
	}

	return false
}

// SetRefreshToken gets a reference to the given string and assigns it to the RefreshToken field.
func (o *SlackOAuthV2ResponseAuthedUser) SetRefreshToken(v string) {
	o.RefreshToken = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *SlackOAuthV2ResponseAuthedUser) GetScope() string {
	if o == nil || IsNil(o.Scope) {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SlackOAuthV2ResponseAuthedUser) GetScopeOk() (*string, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *SlackOAuthV2ResponseAuthedUser) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *SlackOAuthV2ResponseAuthedUser) SetScope(v string) {
	o.Scope = &v
}

// GetTokenType returns the TokenType field value if set, zero value otherwise.
func (o *SlackOAuthV2ResponseAuthedUser) GetTokenType() string {
	if o == nil || IsNil(o.TokenType) {
		var ret string
		return ret
	}
	return *o.TokenType
}

// GetTokenTypeOk returns a tuple with the TokenType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SlackOAuthV2ResponseAuthedUser) GetTokenTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TokenType) {
		return nil, false
	}
	return o.TokenType, true
}

// HasTokenType returns a boolean if a field has been set.
func (o *SlackOAuthV2ResponseAuthedUser) HasTokenType() bool {
	if o != nil && !IsNil(o.TokenType) {
		return true
	}

	return false
}

// SetTokenType gets a reference to the given string and assigns it to the TokenType field.
func (o *SlackOAuthV2ResponseAuthedUser) SetTokenType(v string) {
	o.TokenType = &v
}

func (o SlackOAuthV2ResponseAuthedUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SlackOAuthV2ResponseAuthedUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessToken) {
		toSerialize["access_token"] = o.AccessToken
	}
	if !IsNil(o.ExpiresIn) {
		toSerialize["expires_in"] = o.ExpiresIn
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.RefreshToken) {
		toSerialize["refresh_token"] = o.RefreshToken
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	if !IsNil(o.TokenType) {
		toSerialize["token_type"] = o.TokenType
	}
	return toSerialize, nil
}

type NullableSlackOAuthV2ResponseAuthedUser struct {
	value *SlackOAuthV2ResponseAuthedUser
	isSet bool
}

func (v NullableSlackOAuthV2ResponseAuthedUser) Get() *SlackOAuthV2ResponseAuthedUser {
	return v.value
}

func (v *NullableSlackOAuthV2ResponseAuthedUser) Set(val *SlackOAuthV2ResponseAuthedUser) {
	v.value = val
	v.isSet = true
}

func (v NullableSlackOAuthV2ResponseAuthedUser) IsSet() bool {
	return v.isSet
}

func (v *NullableSlackOAuthV2ResponseAuthedUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSlackOAuthV2ResponseAuthedUser(val *SlackOAuthV2ResponseAuthedUser) *NullableSlackOAuthV2ResponseAuthedUser {
	return &NullableSlackOAuthV2ResponseAuthedUser{value: val, isSet: true}
}

func (v NullableSlackOAuthV2ResponseAuthedUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSlackOAuthV2ResponseAuthedUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
