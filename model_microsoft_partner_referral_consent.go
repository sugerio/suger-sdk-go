/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
)

// checks if the MicrosoftPartnerReferralConsent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MicrosoftPartnerReferralConsent{}

// MicrosoftPartnerReferralConsent struct for MicrosoftPartnerReferralConsent
type MicrosoftPartnerReferralConsent struct {
	ConsentToContact                           *bool `json:"consentToContact,omitempty"`
	ConsentToShareReferralWithMicrosoftSellers *bool `json:"consentToShareReferralWithMicrosoftSellers,omitempty"`
	ConsentToToShareInfoWithOthers             *bool `json:"consentToToShareInfoWithOthers,omitempty"`
}

// NewMicrosoftPartnerReferralConsent instantiates a new MicrosoftPartnerReferralConsent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMicrosoftPartnerReferralConsent() *MicrosoftPartnerReferralConsent {
	this := MicrosoftPartnerReferralConsent{}
	return &this
}

// NewMicrosoftPartnerReferralConsentWithDefaults instantiates a new MicrosoftPartnerReferralConsent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMicrosoftPartnerReferralConsentWithDefaults() *MicrosoftPartnerReferralConsent {
	this := MicrosoftPartnerReferralConsent{}
	return &this
}

// GetConsentToContact returns the ConsentToContact field value if set, zero value otherwise.
func (o *MicrosoftPartnerReferralConsent) GetConsentToContact() bool {
	if o == nil || IsNil(o.ConsentToContact) {
		var ret bool
		return ret
	}
	return *o.ConsentToContact
}

// GetConsentToContactOk returns a tuple with the ConsentToContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftPartnerReferralConsent) GetConsentToContactOk() (*bool, bool) {
	if o == nil || IsNil(o.ConsentToContact) {
		return nil, false
	}
	return o.ConsentToContact, true
}

// HasConsentToContact returns a boolean if a field has been set.
func (o *MicrosoftPartnerReferralConsent) HasConsentToContact() bool {
	if o != nil && !IsNil(o.ConsentToContact) {
		return true
	}

	return false
}

// SetConsentToContact gets a reference to the given bool and assigns it to the ConsentToContact field.
func (o *MicrosoftPartnerReferralConsent) SetConsentToContact(v bool) {
	o.ConsentToContact = &v
}

// GetConsentToShareReferralWithMicrosoftSellers returns the ConsentToShareReferralWithMicrosoftSellers field value if set, zero value otherwise.
func (o *MicrosoftPartnerReferralConsent) GetConsentToShareReferralWithMicrosoftSellers() bool {
	if o == nil || IsNil(o.ConsentToShareReferralWithMicrosoftSellers) {
		var ret bool
		return ret
	}
	return *o.ConsentToShareReferralWithMicrosoftSellers
}

// GetConsentToShareReferralWithMicrosoftSellersOk returns a tuple with the ConsentToShareReferralWithMicrosoftSellers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftPartnerReferralConsent) GetConsentToShareReferralWithMicrosoftSellersOk() (*bool, bool) {
	if o == nil || IsNil(o.ConsentToShareReferralWithMicrosoftSellers) {
		return nil, false
	}
	return o.ConsentToShareReferralWithMicrosoftSellers, true
}

// HasConsentToShareReferralWithMicrosoftSellers returns a boolean if a field has been set.
func (o *MicrosoftPartnerReferralConsent) HasConsentToShareReferralWithMicrosoftSellers() bool {
	if o != nil && !IsNil(o.ConsentToShareReferralWithMicrosoftSellers) {
		return true
	}

	return false
}

// SetConsentToShareReferralWithMicrosoftSellers gets a reference to the given bool and assigns it to the ConsentToShareReferralWithMicrosoftSellers field.
func (o *MicrosoftPartnerReferralConsent) SetConsentToShareReferralWithMicrosoftSellers(v bool) {
	o.ConsentToShareReferralWithMicrosoftSellers = &v
}

// GetConsentToToShareInfoWithOthers returns the ConsentToToShareInfoWithOthers field value if set, zero value otherwise.
func (o *MicrosoftPartnerReferralConsent) GetConsentToToShareInfoWithOthers() bool {
	if o == nil || IsNil(o.ConsentToToShareInfoWithOthers) {
		var ret bool
		return ret
	}
	return *o.ConsentToToShareInfoWithOthers
}

// GetConsentToToShareInfoWithOthersOk returns a tuple with the ConsentToToShareInfoWithOthers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftPartnerReferralConsent) GetConsentToToShareInfoWithOthersOk() (*bool, bool) {
	if o == nil || IsNil(o.ConsentToToShareInfoWithOthers) {
		return nil, false
	}
	return o.ConsentToToShareInfoWithOthers, true
}

// HasConsentToToShareInfoWithOthers returns a boolean if a field has been set.
func (o *MicrosoftPartnerReferralConsent) HasConsentToToShareInfoWithOthers() bool {
	if o != nil && !IsNil(o.ConsentToToShareInfoWithOthers) {
		return true
	}

	return false
}

// SetConsentToToShareInfoWithOthers gets a reference to the given bool and assigns it to the ConsentToToShareInfoWithOthers field.
func (o *MicrosoftPartnerReferralConsent) SetConsentToToShareInfoWithOthers(v bool) {
	o.ConsentToToShareInfoWithOthers = &v
}

func (o MicrosoftPartnerReferralConsent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MicrosoftPartnerReferralConsent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConsentToContact) {
		toSerialize["consentToContact"] = o.ConsentToContact
	}
	if !IsNil(o.ConsentToShareReferralWithMicrosoftSellers) {
		toSerialize["consentToShareReferralWithMicrosoftSellers"] = o.ConsentToShareReferralWithMicrosoftSellers
	}
	if !IsNil(o.ConsentToToShareInfoWithOthers) {
		toSerialize["consentToToShareInfoWithOthers"] = o.ConsentToToShareInfoWithOthers
	}
	return toSerialize, nil
}

type NullableMicrosoftPartnerReferralConsent struct {
	value *MicrosoftPartnerReferralConsent
	isSet bool
}

func (v NullableMicrosoftPartnerReferralConsent) Get() *MicrosoftPartnerReferralConsent {
	return v.value
}

func (v *NullableMicrosoftPartnerReferralConsent) Set(val *MicrosoftPartnerReferralConsent) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftPartnerReferralConsent) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftPartnerReferralConsent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftPartnerReferralConsent(val *MicrosoftPartnerReferralConsent) *NullableMicrosoftPartnerReferralConsent {
	return &NullableMicrosoftPartnerReferralConsent{value: val, isSet: true}
}

func (v NullableMicrosoftPartnerReferralConsent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftPartnerReferralConsent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
