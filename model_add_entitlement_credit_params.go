/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AddEntitlementCreditParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddEntitlementCreditParams{}

// AddEntitlementCreditParams struct for AddEntitlementCreditParams
type AddEntitlementCreditParams struct {
	// The amount to be added to the credit amount.
	CreditAmountIncrement float32 `json:"creditAmountIncrement"`
	EntitlementID         string  `json:"entitlementID"`
	// This is optional. If it is empty, the credit will be added to the default entitlement term of the entitlement.
	EntitlementTermID *string `json:"entitlementTermID,omitempty"`
	OrganizationID    string  `json:"organizationID"`
}

type _AddEntitlementCreditParams AddEntitlementCreditParams

// NewAddEntitlementCreditParams instantiates a new AddEntitlementCreditParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddEntitlementCreditParams(creditAmountIncrement float32, entitlementID string, organizationID string) *AddEntitlementCreditParams {
	this := AddEntitlementCreditParams{}
	this.CreditAmountIncrement = creditAmountIncrement
	this.EntitlementID = entitlementID
	this.OrganizationID = organizationID
	return &this
}

// NewAddEntitlementCreditParamsWithDefaults instantiates a new AddEntitlementCreditParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddEntitlementCreditParamsWithDefaults() *AddEntitlementCreditParams {
	this := AddEntitlementCreditParams{}
	return &this
}

// GetCreditAmountIncrement returns the CreditAmountIncrement field value
func (o *AddEntitlementCreditParams) GetCreditAmountIncrement() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CreditAmountIncrement
}

// GetCreditAmountIncrementOk returns a tuple with the CreditAmountIncrement field value
// and a boolean to check if the value has been set.
func (o *AddEntitlementCreditParams) GetCreditAmountIncrementOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreditAmountIncrement, true
}

// SetCreditAmountIncrement sets field value
func (o *AddEntitlementCreditParams) SetCreditAmountIncrement(v float32) {
	o.CreditAmountIncrement = v
}

// GetEntitlementID returns the EntitlementID field value
func (o *AddEntitlementCreditParams) GetEntitlementID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntitlementID
}

// GetEntitlementIDOk returns a tuple with the EntitlementID field value
// and a boolean to check if the value has been set.
func (o *AddEntitlementCreditParams) GetEntitlementIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntitlementID, true
}

// SetEntitlementID sets field value
func (o *AddEntitlementCreditParams) SetEntitlementID(v string) {
	o.EntitlementID = v
}

// GetEntitlementTermID returns the EntitlementTermID field value if set, zero value otherwise.
func (o *AddEntitlementCreditParams) GetEntitlementTermID() string {
	if o == nil || IsNil(o.EntitlementTermID) {
		var ret string
		return ret
	}
	return *o.EntitlementTermID
}

// GetEntitlementTermIDOk returns a tuple with the EntitlementTermID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddEntitlementCreditParams) GetEntitlementTermIDOk() (*string, bool) {
	if o == nil || IsNil(o.EntitlementTermID) {
		return nil, false
	}
	return o.EntitlementTermID, true
}

// HasEntitlementTermID returns a boolean if a field has been set.
func (o *AddEntitlementCreditParams) HasEntitlementTermID() bool {
	if o != nil && !IsNil(o.EntitlementTermID) {
		return true
	}

	return false
}

// SetEntitlementTermID gets a reference to the given string and assigns it to the EntitlementTermID field.
func (o *AddEntitlementCreditParams) SetEntitlementTermID(v string) {
	o.EntitlementTermID = &v
}

// GetOrganizationID returns the OrganizationID field value
func (o *AddEntitlementCreditParams) GetOrganizationID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrganizationID
}

// GetOrganizationIDOk returns a tuple with the OrganizationID field value
// and a boolean to check if the value has been set.
func (o *AddEntitlementCreditParams) GetOrganizationIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrganizationID, true
}

// SetOrganizationID sets field value
func (o *AddEntitlementCreditParams) SetOrganizationID(v string) {
	o.OrganizationID = v
}

func (o AddEntitlementCreditParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddEntitlementCreditParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["creditAmountIncrement"] = o.CreditAmountIncrement
	toSerialize["entitlementID"] = o.EntitlementID
	if !IsNil(o.EntitlementTermID) {
		toSerialize["entitlementTermID"] = o.EntitlementTermID
	}
	toSerialize["organizationID"] = o.OrganizationID
	return toSerialize, nil
}

func (o *AddEntitlementCreditParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"creditAmountIncrement",
		"entitlementID",
		"organizationID",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddEntitlementCreditParams := _AddEntitlementCreditParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddEntitlementCreditParams)

	if err != nil {
		return err
	}

	*o = AddEntitlementCreditParams(varAddEntitlementCreditParams)

	return err
}

type NullableAddEntitlementCreditParams struct {
	value *AddEntitlementCreditParams
	isSet bool
}

func (v NullableAddEntitlementCreditParams) Get() *AddEntitlementCreditParams {
	return v.value
}

func (v *NullableAddEntitlementCreditParams) Set(val *AddEntitlementCreditParams) {
	v.value = val
	v.isSet = true
}

func (v NullableAddEntitlementCreditParams) IsSet() bool {
	return v.isSet
}

func (v *NullableAddEntitlementCreditParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddEntitlementCreditParams(val *AddEntitlementCreditParams) *NullableAddEntitlementCreditParams {
	return &NullableAddEntitlementCreditParams{value: val, isSet: true}
}

func (v NullableAddEntitlementCreditParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddEntitlementCreditParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
