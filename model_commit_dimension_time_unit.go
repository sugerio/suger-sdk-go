/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CommitDimensionTimeUnit the model 'CommitDimensionTimeUnit'
type CommitDimensionTimeUnit string

// List of CommitDimensionTimeUnit
const (
	CommitDimensionTimeUnit_DAY CommitDimensionTimeUnit = "DAY"
	CommitDimensionTimeUnit_MONTH CommitDimensionTimeUnit = "MONTH"
	CommitDimensionTimeUnit_YEAR CommitDimensionTimeUnit = "YEAR"
)

// All allowed values of CommitDimensionTimeUnit enum
var AllowedCommitDimensionTimeUnitEnumValues = []CommitDimensionTimeUnit{
	"DAY",
	"MONTH",
	"YEAR",
}

func (v *CommitDimensionTimeUnit) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CommitDimensionTimeUnit(value)
	for _, existing := range AllowedCommitDimensionTimeUnitEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CommitDimensionTimeUnit", value)
}

// NewCommitDimensionTimeUnitFromValue returns a pointer to a valid CommitDimensionTimeUnit
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCommitDimensionTimeUnitFromValue(v string) (*CommitDimensionTimeUnit, error) {
	ev := CommitDimensionTimeUnit(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CommitDimensionTimeUnit: valid values are %v", v, AllowedCommitDimensionTimeUnitEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CommitDimensionTimeUnit) IsValid() bool {
	for _, existing := range AllowedCommitDimensionTimeUnitEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CommitDimensionTimeUnit value
func (v CommitDimensionTimeUnit) Ptr() *CommitDimensionTimeUnit {
	return &v
}

type NullableCommitDimensionTimeUnit struct {
	value *CommitDimensionTimeUnit
	isSet bool
}

func (v NullableCommitDimensionTimeUnit) Get() *CommitDimensionTimeUnit {
	return v.value
}

func (v *NullableCommitDimensionTimeUnit) Set(val *CommitDimensionTimeUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableCommitDimensionTimeUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableCommitDimensionTimeUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommitDimensionTimeUnit(val *CommitDimensionTimeUnit) *NullableCommitDimensionTimeUnit {
	return &NullableCommitDimensionTimeUnit{value: val, isSet: true}
}

func (v NullableCommitDimensionTimeUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommitDimensionTimeUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

