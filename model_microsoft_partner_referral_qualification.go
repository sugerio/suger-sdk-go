/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
	"fmt"
)

// MicrosoftPartnerReferralQualification the model 'MicrosoftPartnerReferralQualification'
type MicrosoftPartnerReferralQualification string

// List of MicrosoftPartnerReferralQualification
const (
	MicrosoftPartnerReferralQualification_Unknown            MicrosoftPartnerReferralQualification = ""
	MicrosoftPartnerReferralQualification_None               MicrosoftPartnerReferralQualification = "None"
	MicrosoftPartnerReferralQualification_Direct             MicrosoftPartnerReferralQualification = "Direct"
	MicrosoftPartnerReferralQualification_MarketingQualified MicrosoftPartnerReferralQualification = "MarketingQualified"
	MicrosoftPartnerReferralQualification_SalesQualified     MicrosoftPartnerReferralQualification = "SalesQualified"
)

// All allowed values of MicrosoftPartnerReferralQualification enum
var AllowedMicrosoftPartnerReferralQualificationEnumValues = []MicrosoftPartnerReferralQualification{
	"",
	"None",
	"Direct",
	"MarketingQualified",
	"SalesQualified",
}

func (v *MicrosoftPartnerReferralQualification) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftPartnerReferralQualification(value)
	for _, existing := range AllowedMicrosoftPartnerReferralQualificationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftPartnerReferralQualification", value)
}

// NewMicrosoftPartnerReferralQualificationFromValue returns a pointer to a valid MicrosoftPartnerReferralQualification
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftPartnerReferralQualificationFromValue(v string) (*MicrosoftPartnerReferralQualification, error) {
	ev := MicrosoftPartnerReferralQualification(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftPartnerReferralQualification: valid values are %v", v, AllowedMicrosoftPartnerReferralQualificationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftPartnerReferralQualification) IsValid() bool {
	for _, existing := range AllowedMicrosoftPartnerReferralQualificationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MicrosoftPartnerReferralQualification value
func (v MicrosoftPartnerReferralQualification) Ptr() *MicrosoftPartnerReferralQualification {
	return &v
}

type NullableMicrosoftPartnerReferralQualification struct {
	value *MicrosoftPartnerReferralQualification
	isSet bool
}

func (v NullableMicrosoftPartnerReferralQualification) Get() *MicrosoftPartnerReferralQualification {
	return v.value
}

func (v *NullableMicrosoftPartnerReferralQualification) Set(val *MicrosoftPartnerReferralQualification) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftPartnerReferralQualification) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftPartnerReferralQualification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftPartnerReferralQualification(val *MicrosoftPartnerReferralQualification) *NullableMicrosoftPartnerReferralQualification {
	return &NullableMicrosoftPartnerReferralQualification{value: val, isSet: true}
}

func (v NullableMicrosoftPartnerReferralQualification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftPartnerReferralQualification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
