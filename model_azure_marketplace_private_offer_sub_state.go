/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AzureMarketplacePrivateOfferSubState the model 'AzureMarketplacePrivateOfferSubState'
type AzureMarketplacePrivateOfferSubState string

// List of AzureMarketplacePrivateOfferSubState
const (
	AzureMarketplacePrivateOfferSubState_pendingAcceptance AzureMarketplacePrivateOfferSubState = "pendingAcceptance"
	AzureMarketplacePrivateOfferSubState_accepted AzureMarketplacePrivateOfferSubState = "accepted"
	AzureMarketplacePrivateOfferSubState_pendingPartnerAction AzureMarketplacePrivateOfferSubState = "pendingPartnerAction"
)

// All allowed values of AzureMarketplacePrivateOfferSubState enum
var AllowedAzureMarketplacePrivateOfferSubStateEnumValues = []AzureMarketplacePrivateOfferSubState{
	"pendingAcceptance",
	"accepted",
	"pendingPartnerAction",
}

func (v *AzureMarketplacePrivateOfferSubState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AzureMarketplacePrivateOfferSubState(value)
	for _, existing := range AllowedAzureMarketplacePrivateOfferSubStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AzureMarketplacePrivateOfferSubState", value)
}

// NewAzureMarketplacePrivateOfferSubStateFromValue returns a pointer to a valid AzureMarketplacePrivateOfferSubState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAzureMarketplacePrivateOfferSubStateFromValue(v string) (*AzureMarketplacePrivateOfferSubState, error) {
	ev := AzureMarketplacePrivateOfferSubState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AzureMarketplacePrivateOfferSubState: valid values are %v", v, AllowedAzureMarketplacePrivateOfferSubStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AzureMarketplacePrivateOfferSubState) IsValid() bool {
	for _, existing := range AllowedAzureMarketplacePrivateOfferSubStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AzureMarketplacePrivateOfferSubState value
func (v AzureMarketplacePrivateOfferSubState) Ptr() *AzureMarketplacePrivateOfferSubState {
	return &v
}

type NullableAzureMarketplacePrivateOfferSubState struct {
	value *AzureMarketplacePrivateOfferSubState
	isSet bool
}

func (v NullableAzureMarketplacePrivateOfferSubState) Get() *AzureMarketplacePrivateOfferSubState {
	return v.value
}

func (v *NullableAzureMarketplacePrivateOfferSubState) Set(val *AzureMarketplacePrivateOfferSubState) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureMarketplacePrivateOfferSubState) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureMarketplacePrivateOfferSubState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureMarketplacePrivateOfferSubState(val *AzureMarketplacePrivateOfferSubState) *NullableAzureMarketplacePrivateOfferSubState {
	return &NullableAzureMarketplacePrivateOfferSubState{value: val, isSet: true}
}

func (v NullableAzureMarketplacePrivateOfferSubState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureMarketplacePrivateOfferSubState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

