/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
	"fmt"
)

// AwsRenewalOfferType the model 'AwsRenewalOfferType'
type AwsRenewalOfferType string

// List of AwsRenewalOfferType
const (
	AwsRenewalOfferType_Unknown        AwsRenewalOfferType = ""
	AwsRenewalOfferType_External       AwsRenewalOfferType = "External"
	AwsRenewalOfferType_AwsMarketplace AwsRenewalOfferType = "AwsMarketplace"
)

// All allowed values of AwsRenewalOfferType enum
var AllowedAwsRenewalOfferTypeEnumValues = []AwsRenewalOfferType{
	"",
	"External",
	"AwsMarketplace",
}

func (v *AwsRenewalOfferType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AwsRenewalOfferType(value)
	for _, existing := range AllowedAwsRenewalOfferTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AwsRenewalOfferType", value)
}

// NewAwsRenewalOfferTypeFromValue returns a pointer to a valid AwsRenewalOfferType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAwsRenewalOfferTypeFromValue(v string) (*AwsRenewalOfferType, error) {
	ev := AwsRenewalOfferType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AwsRenewalOfferType: valid values are %v", v, AllowedAwsRenewalOfferTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AwsRenewalOfferType) IsValid() bool {
	for _, existing := range AllowedAwsRenewalOfferTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AwsRenewalOfferType value
func (v AwsRenewalOfferType) Ptr() *AwsRenewalOfferType {
	return &v
}

type NullableAwsRenewalOfferType struct {
	value *AwsRenewalOfferType
	isSet bool
}

func (v NullableAwsRenewalOfferType) Get() *AwsRenewalOfferType {
	return v.value
}

func (v *NullableAwsRenewalOfferType) Set(val *AwsRenewalOfferType) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsRenewalOfferType) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsRenewalOfferType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsRenewalOfferType(val *AwsRenewalOfferType) *NullableAwsRenewalOfferType {
	return &NullableAwsRenewalOfferType{value: val, isSet: true}
}

func (v NullableAwsRenewalOfferType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsRenewalOfferType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
