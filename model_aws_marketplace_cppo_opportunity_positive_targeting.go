/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AwsMarketplaceCppoOpportunityPositiveTargeting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsMarketplaceCppoOpportunityPositiveTargeting{}

// AwsMarketplaceCppoOpportunityPositiveTargeting struct for AwsMarketplaceCppoOpportunityPositiveTargeting
type AwsMarketplaceCppoOpportunityPositiveTargeting struct {
	// List of AWS account IDs that are allowed to subscribe to the offer.
	BuyerAccounts []AwsMarketplaceBuyerAccount `json:"BuyerAccounts,omitempty"`
	// List as option for allowing targeting based on country. If the intention isn’t to target the offer to a country, this field should be omitted. If it’s present, the list must contain at least one country code. Each element in this list should be a valid 2-letter country code, using this format: ISO 3166-1 alpha-2.
	CountryCodes []string `json:"CountryCodes,omitempty"`
}

// NewAwsMarketplaceCppoOpportunityPositiveTargeting instantiates a new AwsMarketplaceCppoOpportunityPositiveTargeting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsMarketplaceCppoOpportunityPositiveTargeting() *AwsMarketplaceCppoOpportunityPositiveTargeting {
	this := AwsMarketplaceCppoOpportunityPositiveTargeting{}
	return &this
}

// NewAwsMarketplaceCppoOpportunityPositiveTargetingWithDefaults instantiates a new AwsMarketplaceCppoOpportunityPositiveTargeting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsMarketplaceCppoOpportunityPositiveTargetingWithDefaults() *AwsMarketplaceCppoOpportunityPositiveTargeting {
	this := AwsMarketplaceCppoOpportunityPositiveTargeting{}
	return &this
}

// GetBuyerAccounts returns the BuyerAccounts field value if set, zero value otherwise.
func (o *AwsMarketplaceCppoOpportunityPositiveTargeting) GetBuyerAccounts() []AwsMarketplaceBuyerAccount {
	if o == nil || IsNil(o.BuyerAccounts) {
		var ret []AwsMarketplaceBuyerAccount
		return ret
	}
	return o.BuyerAccounts
}

// GetBuyerAccountsOk returns a tuple with the BuyerAccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsMarketplaceCppoOpportunityPositiveTargeting) GetBuyerAccountsOk() ([]AwsMarketplaceBuyerAccount, bool) {
	if o == nil || IsNil(o.BuyerAccounts) {
		return nil, false
	}
	return o.BuyerAccounts, true
}

// HasBuyerAccounts returns a boolean if a field has been set.
func (o *AwsMarketplaceCppoOpportunityPositiveTargeting) HasBuyerAccounts() bool {
	if o != nil && !IsNil(o.BuyerAccounts) {
		return true
	}

	return false
}

// SetBuyerAccounts gets a reference to the given []AwsMarketplaceBuyerAccount and assigns it to the BuyerAccounts field.
func (o *AwsMarketplaceCppoOpportunityPositiveTargeting) SetBuyerAccounts(v []AwsMarketplaceBuyerAccount) {
	o.BuyerAccounts = v
}

// GetCountryCodes returns the CountryCodes field value if set, zero value otherwise.
func (o *AwsMarketplaceCppoOpportunityPositiveTargeting) GetCountryCodes() []string {
	if o == nil || IsNil(o.CountryCodes) {
		var ret []string
		return ret
	}
	return o.CountryCodes
}

// GetCountryCodesOk returns a tuple with the CountryCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsMarketplaceCppoOpportunityPositiveTargeting) GetCountryCodesOk() ([]string, bool) {
	if o == nil || IsNil(o.CountryCodes) {
		return nil, false
	}
	return o.CountryCodes, true
}

// HasCountryCodes returns a boolean if a field has been set.
func (o *AwsMarketplaceCppoOpportunityPositiveTargeting) HasCountryCodes() bool {
	if o != nil && !IsNil(o.CountryCodes) {
		return true
	}

	return false
}

// SetCountryCodes gets a reference to the given []string and assigns it to the CountryCodes field.
func (o *AwsMarketplaceCppoOpportunityPositiveTargeting) SetCountryCodes(v []string) {
	o.CountryCodes = v
}

func (o AwsMarketplaceCppoOpportunityPositiveTargeting) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsMarketplaceCppoOpportunityPositiveTargeting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BuyerAccounts) {
		toSerialize["BuyerAccounts"] = o.BuyerAccounts
	}
	if !IsNil(o.CountryCodes) {
		toSerialize["CountryCodes"] = o.CountryCodes
	}
	return toSerialize, nil
}

type NullableAwsMarketplaceCppoOpportunityPositiveTargeting struct {
	value *AwsMarketplaceCppoOpportunityPositiveTargeting
	isSet bool
}

func (v NullableAwsMarketplaceCppoOpportunityPositiveTargeting) Get() *AwsMarketplaceCppoOpportunityPositiveTargeting {
	return v.value
}

func (v *NullableAwsMarketplaceCppoOpportunityPositiveTargeting) Set(val *AwsMarketplaceCppoOpportunityPositiveTargeting) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsMarketplaceCppoOpportunityPositiveTargeting) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsMarketplaceCppoOpportunityPositiveTargeting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsMarketplaceCppoOpportunityPositiveTargeting(val *AwsMarketplaceCppoOpportunityPositiveTargeting) *NullableAwsMarketplaceCppoOpportunityPositiveTargeting {
	return &NullableAwsMarketplaceCppoOpportunityPositiveTargeting{value: val, isSet: true}
}

func (v NullableAwsMarketplaceCppoOpportunityPositiveTargeting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsMarketplaceCppoOpportunityPositiveTargeting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
