/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
)

// checks if the StripePaymentMethodCard type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StripePaymentMethodCard{}

// StripePaymentMethodCard struct for StripePaymentMethodCard
type StripePaymentMethodCard struct {
	// Card brand.
	Brand *string `json:"brand,omitempty"`
	// Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
	Country *string `json:"country,omitempty"`
	// The brand to use when displaying the card, this accounts for customer's brand choice on dual-branded cards. Can be `american_express`, `cartes_bancaires`, `diners_club`, `discover`, `eftpos_australia`, `interac`, `jcb`, `mastercard`, `union_pay`, `visa`, or `other` and may contain more values in the future.
	DisplayBrand *string `json:"display_brand,omitempty"`
	// Two-digit number representing the card's expiration month.
	ExpMonth *int32 `json:"exp_month,omitempty"`
	// Four-digit number representing the card's expiration year.
	ExpYear *int32 `json:"exp_year,omitempty"`
	// Uniquely identifies this particular card number. You can use this attribute to check whether two customers whoâ€™ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
	Fingerprint *string `json:"fingerprint,omitempty"`
	// Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
	Funding *string `json:"funding,omitempty"`
	// The last four digits of the card.
	Last4 *string `json:"last4,omitempty"`
}

// NewStripePaymentMethodCard instantiates a new StripePaymentMethodCard object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStripePaymentMethodCard() *StripePaymentMethodCard {
	this := StripePaymentMethodCard{}
	return &this
}

// NewStripePaymentMethodCardWithDefaults instantiates a new StripePaymentMethodCard object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStripePaymentMethodCardWithDefaults() *StripePaymentMethodCard {
	this := StripePaymentMethodCard{}
	return &this
}

// GetBrand returns the Brand field value if set, zero value otherwise.
func (o *StripePaymentMethodCard) GetBrand() string {
	if o == nil || IsNil(o.Brand) {
		var ret string
		return ret
	}
	return *o.Brand
}

// GetBrandOk returns a tuple with the Brand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripePaymentMethodCard) GetBrandOk() (*string, bool) {
	if o == nil || IsNil(o.Brand) {
		return nil, false
	}
	return o.Brand, true
}

// HasBrand returns a boolean if a field has been set.
func (o *StripePaymentMethodCard) HasBrand() bool {
	if o != nil && !IsNil(o.Brand) {
		return true
	}

	return false
}

// SetBrand gets a reference to the given string and assigns it to the Brand field.
func (o *StripePaymentMethodCard) SetBrand(v string) {
	o.Brand = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *StripePaymentMethodCard) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripePaymentMethodCard) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *StripePaymentMethodCard) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *StripePaymentMethodCard) SetCountry(v string) {
	o.Country = &v
}

// GetDisplayBrand returns the DisplayBrand field value if set, zero value otherwise.
func (o *StripePaymentMethodCard) GetDisplayBrand() string {
	if o == nil || IsNil(o.DisplayBrand) {
		var ret string
		return ret
	}
	return *o.DisplayBrand
}

// GetDisplayBrandOk returns a tuple with the DisplayBrand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripePaymentMethodCard) GetDisplayBrandOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayBrand) {
		return nil, false
	}
	return o.DisplayBrand, true
}

// HasDisplayBrand returns a boolean if a field has been set.
func (o *StripePaymentMethodCard) HasDisplayBrand() bool {
	if o != nil && !IsNil(o.DisplayBrand) {
		return true
	}

	return false
}

// SetDisplayBrand gets a reference to the given string and assigns it to the DisplayBrand field.
func (o *StripePaymentMethodCard) SetDisplayBrand(v string) {
	o.DisplayBrand = &v
}

// GetExpMonth returns the ExpMonth field value if set, zero value otherwise.
func (o *StripePaymentMethodCard) GetExpMonth() int32 {
	if o == nil || IsNil(o.ExpMonth) {
		var ret int32
		return ret
	}
	return *o.ExpMonth
}

// GetExpMonthOk returns a tuple with the ExpMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripePaymentMethodCard) GetExpMonthOk() (*int32, bool) {
	if o == nil || IsNil(o.ExpMonth) {
		return nil, false
	}
	return o.ExpMonth, true
}

// HasExpMonth returns a boolean if a field has been set.
func (o *StripePaymentMethodCard) HasExpMonth() bool {
	if o != nil && !IsNil(o.ExpMonth) {
		return true
	}

	return false
}

// SetExpMonth gets a reference to the given int32 and assigns it to the ExpMonth field.
func (o *StripePaymentMethodCard) SetExpMonth(v int32) {
	o.ExpMonth = &v
}

// GetExpYear returns the ExpYear field value if set, zero value otherwise.
func (o *StripePaymentMethodCard) GetExpYear() int32 {
	if o == nil || IsNil(o.ExpYear) {
		var ret int32
		return ret
	}
	return *o.ExpYear
}

// GetExpYearOk returns a tuple with the ExpYear field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripePaymentMethodCard) GetExpYearOk() (*int32, bool) {
	if o == nil || IsNil(o.ExpYear) {
		return nil, false
	}
	return o.ExpYear, true
}

// HasExpYear returns a boolean if a field has been set.
func (o *StripePaymentMethodCard) HasExpYear() bool {
	if o != nil && !IsNil(o.ExpYear) {
		return true
	}

	return false
}

// SetExpYear gets a reference to the given int32 and assigns it to the ExpYear field.
func (o *StripePaymentMethodCard) SetExpYear(v int32) {
	o.ExpYear = &v
}

// GetFingerprint returns the Fingerprint field value if set, zero value otherwise.
func (o *StripePaymentMethodCard) GetFingerprint() string {
	if o == nil || IsNil(o.Fingerprint) {
		var ret string
		return ret
	}
	return *o.Fingerprint
}

// GetFingerprintOk returns a tuple with the Fingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripePaymentMethodCard) GetFingerprintOk() (*string, bool) {
	if o == nil || IsNil(o.Fingerprint) {
		return nil, false
	}
	return o.Fingerprint, true
}

// HasFingerprint returns a boolean if a field has been set.
func (o *StripePaymentMethodCard) HasFingerprint() bool {
	if o != nil && !IsNil(o.Fingerprint) {
		return true
	}

	return false
}

// SetFingerprint gets a reference to the given string and assigns it to the Fingerprint field.
func (o *StripePaymentMethodCard) SetFingerprint(v string) {
	o.Fingerprint = &v
}

// GetFunding returns the Funding field value if set, zero value otherwise.
func (o *StripePaymentMethodCard) GetFunding() string {
	if o == nil || IsNil(o.Funding) {
		var ret string
		return ret
	}
	return *o.Funding
}

// GetFundingOk returns a tuple with the Funding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripePaymentMethodCard) GetFundingOk() (*string, bool) {
	if o == nil || IsNil(o.Funding) {
		return nil, false
	}
	return o.Funding, true
}

// HasFunding returns a boolean if a field has been set.
func (o *StripePaymentMethodCard) HasFunding() bool {
	if o != nil && !IsNil(o.Funding) {
		return true
	}

	return false
}

// SetFunding gets a reference to the given string and assigns it to the Funding field.
func (o *StripePaymentMethodCard) SetFunding(v string) {
	o.Funding = &v
}

// GetLast4 returns the Last4 field value if set, zero value otherwise.
func (o *StripePaymentMethodCard) GetLast4() string {
	if o == nil || IsNil(o.Last4) {
		var ret string
		return ret
	}
	return *o.Last4
}

// GetLast4Ok returns a tuple with the Last4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripePaymentMethodCard) GetLast4Ok() (*string, bool) {
	if o == nil || IsNil(o.Last4) {
		return nil, false
	}
	return o.Last4, true
}

// HasLast4 returns a boolean if a field has been set.
func (o *StripePaymentMethodCard) HasLast4() bool {
	if o != nil && !IsNil(o.Last4) {
		return true
	}

	return false
}

// SetLast4 gets a reference to the given string and assigns it to the Last4 field.
func (o *StripePaymentMethodCard) SetLast4(v string) {
	o.Last4 = &v
}

func (o StripePaymentMethodCard) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StripePaymentMethodCard) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Brand) {
		toSerialize["brand"] = o.Brand
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.DisplayBrand) {
		toSerialize["display_brand"] = o.DisplayBrand
	}
	if !IsNil(o.ExpMonth) {
		toSerialize["exp_month"] = o.ExpMonth
	}
	if !IsNil(o.ExpYear) {
		toSerialize["exp_year"] = o.ExpYear
	}
	if !IsNil(o.Fingerprint) {
		toSerialize["fingerprint"] = o.Fingerprint
	}
	if !IsNil(o.Funding) {
		toSerialize["funding"] = o.Funding
	}
	if !IsNil(o.Last4) {
		toSerialize["last4"] = o.Last4
	}
	return toSerialize, nil
}

type NullableStripePaymentMethodCard struct {
	value *StripePaymentMethodCard
	isSet bool
}

func (v NullableStripePaymentMethodCard) Get() *StripePaymentMethodCard {
	return v.value
}

func (v *NullableStripePaymentMethodCard) Set(val *StripePaymentMethodCard) {
	v.value = val
	v.isSet = true
}

func (v NullableStripePaymentMethodCard) IsSet() bool {
	return v.isSet
}

func (v *NullableStripePaymentMethodCard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStripePaymentMethodCard(val *StripePaymentMethodCard) *NullableStripePaymentMethodCard {
	return &NullableStripePaymentMethodCard{value: val, isSet: true}
}

func (v NullableStripePaymentMethodCard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStripePaymentMethodCard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
