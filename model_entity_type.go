/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
	"fmt"
)

// EntityType the model 'EntityType'
type EntityType string

// List of EntityType
const (
	EntityType_UNKNOWN               EntityType = ""
	EntityType_API_CLIENT            EntityType = "API_CLIENT"
	EntityType_AUDITING_EVENT        EntityType = "AUDITING_EVENT"
	EntityType_AUTO_SHARE_TASK       EntityType = "AUTO_SHARE_TASK"
	EntityType_BUYER                 EntityType = "BUYER"
	EntityType_CONTACT               EntityType = "CONTACT"
	EntityType_ENTITLEMENT           EntityType = "ENTITLEMENT"
	EntityType_ENTITLEMENT_TERM      EntityType = "ENTITLEMENT_TERM"
	EntityType_HEADLESS_ENTITLEMENTS EntityType = "HEADLESS_ENTITLEMENTS"
	EntityType_HUBSPOT_USER          EntityType = "HUBSPOT_USER"
	EntityType_INTEGRATION           EntityType = "INTEGRATION"
	EntityType_INVOICE               EntityType = "INVOICE"
	EntityType_NEW_CLIENT            EntityType = "NEW_CLIENT"
	EntityType_NOTIFICATION_MESSAGE  EntityType = "NOTIFICATION_MESSAGE"
	EntityType_OFFER                 EntityType = "OFFER"
	EntityType_ORGANIZATION          EntityType = "ORGANIZATION"
	EntityType_PAYMENT_TRANSACTION   EntityType = "PAYMENT_TRANSACTION"
	EntityType_PRODUCT               EntityType = "PRODUCT"
	EntityType_REFERRAL              EntityType = "REFERRAL"
	EntityType_REVENUE_RECORD        EntityType = "REVENUE_RECORD"
	EntityType_SUPPORT_TICKET        EntityType = "SUPPORT_TICKET"
	EntityType_UNPURCHASED_OFFERS    EntityType = "UNPURCHASED_OFFERS"
	EntityType_USAGE_RECORD_GROUP    EntityType = "USAGE_RECORD_GROUP"
	EntityType_USAGE_RECORD_REPORT   EntityType = "USAGE_RECORD_REPORT"
	EntityType_USER                  EntityType = "USER"
	EntityType_WORKFLOW              EntityType = "WORKFLOW"
)

// All allowed values of EntityType enum
var AllowedEntityTypeEnumValues = []EntityType{
	"",
	"API_CLIENT",
	"AUDITING_EVENT",
	"AUTO_SHARE_TASK",
	"BUYER",
	"CONTACT",
	"ENTITLEMENT",
	"ENTITLEMENT_TERM",
	"HEADLESS_ENTITLEMENTS",
	"HUBSPOT_USER",
	"INTEGRATION",
	"INVOICE",
	"NEW_CLIENT",
	"NOTIFICATION_MESSAGE",
	"OFFER",
	"ORGANIZATION",
	"PAYMENT_TRANSACTION",
	"PRODUCT",
	"REFERRAL",
	"REVENUE_RECORD",
	"SUPPORT_TICKET",
	"UNPURCHASED_OFFERS",
	"USAGE_RECORD_GROUP",
	"USAGE_RECORD_REPORT",
	"USER",
	"WORKFLOW",
}

func (v *EntityType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EntityType(value)
	for _, existing := range AllowedEntityTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EntityType", value)
}

// NewEntityTypeFromValue returns a pointer to a valid EntityType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEntityTypeFromValue(v string) (*EntityType, error) {
	ev := EntityType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EntityType: valid values are %v", v, AllowedEntityTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EntityType) IsValid() bool {
	for _, existing := range AllowedEntityTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EntityType value
func (v EntityType) Ptr() *EntityType {
	return &v
}

type NullableEntityType struct {
	value *EntityType
	isSet bool
}

func (v NullableEntityType) Get() *EntityType {
	return v.value
}

func (v *NullableEntityType) Set(val *EntityType) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityType) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityType(val *EntityType) *NullableEntityType {
	return &NullableEntityType{value: val, isSet: true}
}

func (v NullableEntityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
