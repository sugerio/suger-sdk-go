/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
	"time"
)

// checks if the NotificationEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationEvent{}

// NotificationEvent struct for NotificationEvent
type NotificationEvent struct {
	Action *NotificationEventAction `json:"action,omitempty"`
	// Cc contactIds that will receive this notification
	CcContactIds []string `json:"ccContactIds,omitempty"`
	// The list of channels this event will be sent to, e.g., [\"SLACK\", \"EMAIL\"]
	Channels []NotificationChannel `json:"channels,omitempty"`
	// Contact emails that will receive this notification
	ContactEmails []string `json:"contactEmails,omitempty"`
	// ContactIds that will receive this notification
	ContactIds []string `json:"contactIds,omitempty"`
	// Who originally created or triggered this notification event. It can be user or API client.
	CreatedBy *LastModifiedBy `json:"createdBy,omitempty"`
	// Custom fields of the notification event.
	CustomFields map[string]interface{} `json:"customFields,omitempty"`
	EntityID     *string                `json:"entityID,omitempty"`
	// The name of the entity.
	EntityName   *string     `json:"entityName,omitempty"`
	EntityStatus *string     `json:"entityStatus,omitempty"`
	EntityType   *EntityType `json:"entityType,omitempty"`
	// notification event id.
	EventID *string `json:"eventID,omitempty"`
	// notification event status.
	EventStatus *NotificationEventStatus `json:"eventStatus,omitempty"`
	// Additional info of the notification event.
	Info map[string]interface{} `json:"info,omitempty"`
	// If this notification event is an action item.
	IsActionItem *bool `json:"isActionItem,omitempty"`
	// timestamp of the event when it is updated.
	LastUpdateTime *time.Time `json:"lastUpdateTime,omitempty"`
	// The message of the notification event such as email body, action item description.
	Message *string `json:"message,omitempty"`
	// suger organization id.
	OrganizationID *string `json:"organizationID,omitempty"`
	// the partner of the entity. Optional.
	Partner *Partner `json:"partner,omitempty"`
	// The priority of the notification event.
	Priority *AuditingEventPriority `json:"priority,omitempty"`
	// If this notification event is an auditing event and need to store in DB.
	RequireAudit *bool `json:"requireAudit,omitempty"`
	// timestamp of the event when it is scheduled or created.
	Timestamp *time.Time `json:"timestamp,omitempty"`
	// The title of the notification event such as email subject, action item title.
	Title *string `json:"title,omitempty"`
	// The track events of the notification event.
	TrackEvents []TrackEvent `json:"trackEvents,omitempty"`
}

// NewNotificationEvent instantiates a new NotificationEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationEvent() *NotificationEvent {
	this := NotificationEvent{}
	return &this
}

// NewNotificationEventWithDefaults instantiates a new NotificationEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationEventWithDefaults() *NotificationEvent {
	this := NotificationEvent{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *NotificationEvent) GetAction() NotificationEventAction {
	if o == nil || IsNil(o.Action) {
		var ret NotificationEventAction
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationEvent) GetActionOk() (*NotificationEventAction, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *NotificationEvent) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given NotificationEventAction and assigns it to the Action field.
func (o *NotificationEvent) SetAction(v NotificationEventAction) {
	o.Action = &v
}

// GetCcContactIds returns the CcContactIds field value if set, zero value otherwise.
func (o *NotificationEvent) GetCcContactIds() []string {
	if o == nil || IsNil(o.CcContactIds) {
		var ret []string
		return ret
	}
	return o.CcContactIds
}

// GetCcContactIdsOk returns a tuple with the CcContactIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationEvent) GetCcContactIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.CcContactIds) {
		return nil, false
	}
	return o.CcContactIds, true
}

// HasCcContactIds returns a boolean if a field has been set.
func (o *NotificationEvent) HasCcContactIds() bool {
	if o != nil && !IsNil(o.CcContactIds) {
		return true
	}

	return false
}

// SetCcContactIds gets a reference to the given []string and assigns it to the CcContactIds field.
func (o *NotificationEvent) SetCcContactIds(v []string) {
	o.CcContactIds = v
}

// GetChannels returns the Channels field value if set, zero value otherwise.
func (o *NotificationEvent) GetChannels() []NotificationChannel {
	if o == nil || IsNil(o.Channels) {
		var ret []NotificationChannel
		return ret
	}
	return o.Channels
}

// GetChannelsOk returns a tuple with the Channels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationEvent) GetChannelsOk() ([]NotificationChannel, bool) {
	if o == nil || IsNil(o.Channels) {
		return nil, false
	}
	return o.Channels, true
}

// HasChannels returns a boolean if a field has been set.
func (o *NotificationEvent) HasChannels() bool {
	if o != nil && !IsNil(o.Channels) {
		return true
	}

	return false
}

// SetChannels gets a reference to the given []NotificationChannel and assigns it to the Channels field.
func (o *NotificationEvent) SetChannels(v []NotificationChannel) {
	o.Channels = v
}

// GetContactEmails returns the ContactEmails field value if set, zero value otherwise.
func (o *NotificationEvent) GetContactEmails() []string {
	if o == nil || IsNil(o.ContactEmails) {
		var ret []string
		return ret
	}
	return o.ContactEmails
}

// GetContactEmailsOk returns a tuple with the ContactEmails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationEvent) GetContactEmailsOk() ([]string, bool) {
	if o == nil || IsNil(o.ContactEmails) {
		return nil, false
	}
	return o.ContactEmails, true
}

// HasContactEmails returns a boolean if a field has been set.
func (o *NotificationEvent) HasContactEmails() bool {
	if o != nil && !IsNil(o.ContactEmails) {
		return true
	}

	return false
}

// SetContactEmails gets a reference to the given []string and assigns it to the ContactEmails field.
func (o *NotificationEvent) SetContactEmails(v []string) {
	o.ContactEmails = v
}

// GetContactIds returns the ContactIds field value if set, zero value otherwise.
func (o *NotificationEvent) GetContactIds() []string {
	if o == nil || IsNil(o.ContactIds) {
		var ret []string
		return ret
	}
	return o.ContactIds
}

// GetContactIdsOk returns a tuple with the ContactIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationEvent) GetContactIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ContactIds) {
		return nil, false
	}
	return o.ContactIds, true
}

// HasContactIds returns a boolean if a field has been set.
func (o *NotificationEvent) HasContactIds() bool {
	if o != nil && !IsNil(o.ContactIds) {
		return true
	}

	return false
}

// SetContactIds gets a reference to the given []string and assigns it to the ContactIds field.
func (o *NotificationEvent) SetContactIds(v []string) {
	o.ContactIds = v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *NotificationEvent) GetCreatedBy() LastModifiedBy {
	if o == nil || IsNil(o.CreatedBy) {
		var ret LastModifiedBy
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationEvent) GetCreatedByOk() (*LastModifiedBy, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *NotificationEvent) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given LastModifiedBy and assigns it to the CreatedBy field.
func (o *NotificationEvent) SetCreatedBy(v LastModifiedBy) {
	o.CreatedBy = &v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *NotificationEvent) GetCustomFields() map[string]interface{} {
	if o == nil || IsNil(o.CustomFields) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationEvent) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *NotificationEvent) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *NotificationEvent) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

// GetEntityID returns the EntityID field value if set, zero value otherwise.
func (o *NotificationEvent) GetEntityID() string {
	if o == nil || IsNil(o.EntityID) {
		var ret string
		return ret
	}
	return *o.EntityID
}

// GetEntityIDOk returns a tuple with the EntityID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationEvent) GetEntityIDOk() (*string, bool) {
	if o == nil || IsNil(o.EntityID) {
		return nil, false
	}
	return o.EntityID, true
}

// HasEntityID returns a boolean if a field has been set.
func (o *NotificationEvent) HasEntityID() bool {
	if o != nil && !IsNil(o.EntityID) {
		return true
	}

	return false
}

// SetEntityID gets a reference to the given string and assigns it to the EntityID field.
func (o *NotificationEvent) SetEntityID(v string) {
	o.EntityID = &v
}

// GetEntityName returns the EntityName field value if set, zero value otherwise.
func (o *NotificationEvent) GetEntityName() string {
	if o == nil || IsNil(o.EntityName) {
		var ret string
		return ret
	}
	return *o.EntityName
}

// GetEntityNameOk returns a tuple with the EntityName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationEvent) GetEntityNameOk() (*string, bool) {
	if o == nil || IsNil(o.EntityName) {
		return nil, false
	}
	return o.EntityName, true
}

// HasEntityName returns a boolean if a field has been set.
func (o *NotificationEvent) HasEntityName() bool {
	if o != nil && !IsNil(o.EntityName) {
		return true
	}

	return false
}

// SetEntityName gets a reference to the given string and assigns it to the EntityName field.
func (o *NotificationEvent) SetEntityName(v string) {
	o.EntityName = &v
}

// GetEntityStatus returns the EntityStatus field value if set, zero value otherwise.
func (o *NotificationEvent) GetEntityStatus() string {
	if o == nil || IsNil(o.EntityStatus) {
		var ret string
		return ret
	}
	return *o.EntityStatus
}

// GetEntityStatusOk returns a tuple with the EntityStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationEvent) GetEntityStatusOk() (*string, bool) {
	if o == nil || IsNil(o.EntityStatus) {
		return nil, false
	}
	return o.EntityStatus, true
}

// HasEntityStatus returns a boolean if a field has been set.
func (o *NotificationEvent) HasEntityStatus() bool {
	if o != nil && !IsNil(o.EntityStatus) {
		return true
	}

	return false
}

// SetEntityStatus gets a reference to the given string and assigns it to the EntityStatus field.
func (o *NotificationEvent) SetEntityStatus(v string) {
	o.EntityStatus = &v
}

// GetEntityType returns the EntityType field value if set, zero value otherwise.
func (o *NotificationEvent) GetEntityType() EntityType {
	if o == nil || IsNil(o.EntityType) {
		var ret EntityType
		return ret
	}
	return *o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationEvent) GetEntityTypeOk() (*EntityType, bool) {
	if o == nil || IsNil(o.EntityType) {
		return nil, false
	}
	return o.EntityType, true
}

// HasEntityType returns a boolean if a field has been set.
func (o *NotificationEvent) HasEntityType() bool {
	if o != nil && !IsNil(o.EntityType) {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given EntityType and assigns it to the EntityType field.
func (o *NotificationEvent) SetEntityType(v EntityType) {
	o.EntityType = &v
}

// GetEventID returns the EventID field value if set, zero value otherwise.
func (o *NotificationEvent) GetEventID() string {
	if o == nil || IsNil(o.EventID) {
		var ret string
		return ret
	}
	return *o.EventID
}

// GetEventIDOk returns a tuple with the EventID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationEvent) GetEventIDOk() (*string, bool) {
	if o == nil || IsNil(o.EventID) {
		return nil, false
	}
	return o.EventID, true
}

// HasEventID returns a boolean if a field has been set.
func (o *NotificationEvent) HasEventID() bool {
	if o != nil && !IsNil(o.EventID) {
		return true
	}

	return false
}

// SetEventID gets a reference to the given string and assigns it to the EventID field.
func (o *NotificationEvent) SetEventID(v string) {
	o.EventID = &v
}

// GetEventStatus returns the EventStatus field value if set, zero value otherwise.
func (o *NotificationEvent) GetEventStatus() NotificationEventStatus {
	if o == nil || IsNil(o.EventStatus) {
		var ret NotificationEventStatus
		return ret
	}
	return *o.EventStatus
}

// GetEventStatusOk returns a tuple with the EventStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationEvent) GetEventStatusOk() (*NotificationEventStatus, bool) {
	if o == nil || IsNil(o.EventStatus) {
		return nil, false
	}
	return o.EventStatus, true
}

// HasEventStatus returns a boolean if a field has been set.
func (o *NotificationEvent) HasEventStatus() bool {
	if o != nil && !IsNil(o.EventStatus) {
		return true
	}

	return false
}

// SetEventStatus gets a reference to the given NotificationEventStatus and assigns it to the EventStatus field.
func (o *NotificationEvent) SetEventStatus(v NotificationEventStatus) {
	o.EventStatus = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *NotificationEvent) GetInfo() map[string]interface{} {
	if o == nil || IsNil(o.Info) {
		var ret map[string]interface{}
		return ret
	}
	return o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationEvent) GetInfoOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Info) {
		return map[string]interface{}{}, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *NotificationEvent) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]interface{} and assigns it to the Info field.
func (o *NotificationEvent) SetInfo(v map[string]interface{}) {
	o.Info = v
}

// GetIsActionItem returns the IsActionItem field value if set, zero value otherwise.
func (o *NotificationEvent) GetIsActionItem() bool {
	if o == nil || IsNil(o.IsActionItem) {
		var ret bool
		return ret
	}
	return *o.IsActionItem
}

// GetIsActionItemOk returns a tuple with the IsActionItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationEvent) GetIsActionItemOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActionItem) {
		return nil, false
	}
	return o.IsActionItem, true
}

// HasIsActionItem returns a boolean if a field has been set.
func (o *NotificationEvent) HasIsActionItem() bool {
	if o != nil && !IsNil(o.IsActionItem) {
		return true
	}

	return false
}

// SetIsActionItem gets a reference to the given bool and assigns it to the IsActionItem field.
func (o *NotificationEvent) SetIsActionItem(v bool) {
	o.IsActionItem = &v
}

// GetLastUpdateTime returns the LastUpdateTime field value if set, zero value otherwise.
func (o *NotificationEvent) GetLastUpdateTime() time.Time {
	if o == nil || IsNil(o.LastUpdateTime) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdateTime
}

// GetLastUpdateTimeOk returns a tuple with the LastUpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationEvent) GetLastUpdateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdateTime) {
		return nil, false
	}
	return o.LastUpdateTime, true
}

// HasLastUpdateTime returns a boolean if a field has been set.
func (o *NotificationEvent) HasLastUpdateTime() bool {
	if o != nil && !IsNil(o.LastUpdateTime) {
		return true
	}

	return false
}

// SetLastUpdateTime gets a reference to the given time.Time and assigns it to the LastUpdateTime field.
func (o *NotificationEvent) SetLastUpdateTime(v time.Time) {
	o.LastUpdateTime = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *NotificationEvent) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationEvent) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *NotificationEvent) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *NotificationEvent) SetMessage(v string) {
	o.Message = &v
}

// GetOrganizationID returns the OrganizationID field value if set, zero value otherwise.
func (o *NotificationEvent) GetOrganizationID() string {
	if o == nil || IsNil(o.OrganizationID) {
		var ret string
		return ret
	}
	return *o.OrganizationID
}

// GetOrganizationIDOk returns a tuple with the OrganizationID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationEvent) GetOrganizationIDOk() (*string, bool) {
	if o == nil || IsNil(o.OrganizationID) {
		return nil, false
	}
	return o.OrganizationID, true
}

// HasOrganizationID returns a boolean if a field has been set.
func (o *NotificationEvent) HasOrganizationID() bool {
	if o != nil && !IsNil(o.OrganizationID) {
		return true
	}

	return false
}

// SetOrganizationID gets a reference to the given string and assigns it to the OrganizationID field.
func (o *NotificationEvent) SetOrganizationID(v string) {
	o.OrganizationID = &v
}

// GetPartner returns the Partner field value if set, zero value otherwise.
func (o *NotificationEvent) GetPartner() Partner {
	if o == nil || IsNil(o.Partner) {
		var ret Partner
		return ret
	}
	return *o.Partner
}

// GetPartnerOk returns a tuple with the Partner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationEvent) GetPartnerOk() (*Partner, bool) {
	if o == nil || IsNil(o.Partner) {
		return nil, false
	}
	return o.Partner, true
}

// HasPartner returns a boolean if a field has been set.
func (o *NotificationEvent) HasPartner() bool {
	if o != nil && !IsNil(o.Partner) {
		return true
	}

	return false
}

// SetPartner gets a reference to the given Partner and assigns it to the Partner field.
func (o *NotificationEvent) SetPartner(v Partner) {
	o.Partner = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *NotificationEvent) GetPriority() AuditingEventPriority {
	if o == nil || IsNil(o.Priority) {
		var ret AuditingEventPriority
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationEvent) GetPriorityOk() (*AuditingEventPriority, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *NotificationEvent) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given AuditingEventPriority and assigns it to the Priority field.
func (o *NotificationEvent) SetPriority(v AuditingEventPriority) {
	o.Priority = &v
}

// GetRequireAudit returns the RequireAudit field value if set, zero value otherwise.
func (o *NotificationEvent) GetRequireAudit() bool {
	if o == nil || IsNil(o.RequireAudit) {
		var ret bool
		return ret
	}
	return *o.RequireAudit
}

// GetRequireAuditOk returns a tuple with the RequireAudit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationEvent) GetRequireAuditOk() (*bool, bool) {
	if o == nil || IsNil(o.RequireAudit) {
		return nil, false
	}
	return o.RequireAudit, true
}

// HasRequireAudit returns a boolean if a field has been set.
func (o *NotificationEvent) HasRequireAudit() bool {
	if o != nil && !IsNil(o.RequireAudit) {
		return true
	}

	return false
}

// SetRequireAudit gets a reference to the given bool and assigns it to the RequireAudit field.
func (o *NotificationEvent) SetRequireAudit(v bool) {
	o.RequireAudit = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *NotificationEvent) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationEvent) GetTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *NotificationEvent) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *NotificationEvent) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *NotificationEvent) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationEvent) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *NotificationEvent) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *NotificationEvent) SetTitle(v string) {
	o.Title = &v
}

// GetTrackEvents returns the TrackEvents field value if set, zero value otherwise.
func (o *NotificationEvent) GetTrackEvents() []TrackEvent {
	if o == nil || IsNil(o.TrackEvents) {
		var ret []TrackEvent
		return ret
	}
	return o.TrackEvents
}

// GetTrackEventsOk returns a tuple with the TrackEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationEvent) GetTrackEventsOk() ([]TrackEvent, bool) {
	if o == nil || IsNil(o.TrackEvents) {
		return nil, false
	}
	return o.TrackEvents, true
}

// HasTrackEvents returns a boolean if a field has been set.
func (o *NotificationEvent) HasTrackEvents() bool {
	if o != nil && !IsNil(o.TrackEvents) {
		return true
	}

	return false
}

// SetTrackEvents gets a reference to the given []TrackEvent and assigns it to the TrackEvents field.
func (o *NotificationEvent) SetTrackEvents(v []TrackEvent) {
	o.TrackEvents = v
}

func (o NotificationEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !IsNil(o.CcContactIds) {
		toSerialize["ccContactIds"] = o.CcContactIds
	}
	if !IsNil(o.Channels) {
		toSerialize["channels"] = o.Channels
	}
	if !IsNil(o.ContactEmails) {
		toSerialize["contactEmails"] = o.ContactEmails
	}
	if !IsNil(o.ContactIds) {
		toSerialize["contactIds"] = o.ContactIds
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.CustomFields) {
		toSerialize["customFields"] = o.CustomFields
	}
	if !IsNil(o.EntityID) {
		toSerialize["entityID"] = o.EntityID
	}
	if !IsNil(o.EntityName) {
		toSerialize["entityName"] = o.EntityName
	}
	if !IsNil(o.EntityStatus) {
		toSerialize["entityStatus"] = o.EntityStatus
	}
	if !IsNil(o.EntityType) {
		toSerialize["entityType"] = o.EntityType
	}
	if !IsNil(o.EventID) {
		toSerialize["eventID"] = o.EventID
	}
	if !IsNil(o.EventStatus) {
		toSerialize["eventStatus"] = o.EventStatus
	}
	if !IsNil(o.Info) {
		toSerialize["info"] = o.Info
	}
	if !IsNil(o.IsActionItem) {
		toSerialize["isActionItem"] = o.IsActionItem
	}
	if !IsNil(o.LastUpdateTime) {
		toSerialize["lastUpdateTime"] = o.LastUpdateTime
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.OrganizationID) {
		toSerialize["organizationID"] = o.OrganizationID
	}
	if !IsNil(o.Partner) {
		toSerialize["partner"] = o.Partner
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.RequireAudit) {
		toSerialize["requireAudit"] = o.RequireAudit
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.TrackEvents) {
		toSerialize["trackEvents"] = o.TrackEvents
	}
	return toSerialize, nil
}

type NullableNotificationEvent struct {
	value *NotificationEvent
	isSet bool
}

func (v NullableNotificationEvent) Get() *NotificationEvent {
	return v.value
}

func (v *NullableNotificationEvent) Set(val *NotificationEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationEvent(val *NotificationEvent) *NullableNotificationEvent {
	return &NullableNotificationEvent{value: val, isSet: true}
}

func (v NullableNotificationEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
