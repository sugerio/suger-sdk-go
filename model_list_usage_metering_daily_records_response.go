/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package suger

import (
	"encoding/json"
)

// checks if the ListUsageMeteringDailyRecordsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListUsageMeteringDailyRecordsResponse{}

// ListUsageMeteringDailyRecordsResponse struct for ListUsageMeteringDailyRecordsResponse
type ListUsageMeteringDailyRecordsResponse struct {
	NextOffset                *int32                     `json:"nextOffset,omitempty"`
	UsageMeteringDailyRecords []UsageMeteringDailyRecord `json:"usageMeteringDailyRecords,omitempty"`
}

// NewListUsageMeteringDailyRecordsResponse instantiates a new ListUsageMeteringDailyRecordsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListUsageMeteringDailyRecordsResponse() *ListUsageMeteringDailyRecordsResponse {
	this := ListUsageMeteringDailyRecordsResponse{}
	return &this
}

// NewListUsageMeteringDailyRecordsResponseWithDefaults instantiates a new ListUsageMeteringDailyRecordsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListUsageMeteringDailyRecordsResponseWithDefaults() *ListUsageMeteringDailyRecordsResponse {
	this := ListUsageMeteringDailyRecordsResponse{}
	return &this
}

// GetNextOffset returns the NextOffset field value if set, zero value otherwise.
func (o *ListUsageMeteringDailyRecordsResponse) GetNextOffset() int32 {
	if o == nil || IsNil(o.NextOffset) {
		var ret int32
		return ret
	}
	return *o.NextOffset
}

// GetNextOffsetOk returns a tuple with the NextOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListUsageMeteringDailyRecordsResponse) GetNextOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.NextOffset) {
		return nil, false
	}
	return o.NextOffset, true
}

// HasNextOffset returns a boolean if a field has been set.
func (o *ListUsageMeteringDailyRecordsResponse) HasNextOffset() bool {
	if o != nil && !IsNil(o.NextOffset) {
		return true
	}

	return false
}

// SetNextOffset gets a reference to the given int32 and assigns it to the NextOffset field.
func (o *ListUsageMeteringDailyRecordsResponse) SetNextOffset(v int32) {
	o.NextOffset = &v
}

// GetUsageMeteringDailyRecords returns the UsageMeteringDailyRecords field value if set, zero value otherwise.
func (o *ListUsageMeteringDailyRecordsResponse) GetUsageMeteringDailyRecords() []UsageMeteringDailyRecord {
	if o == nil || IsNil(o.UsageMeteringDailyRecords) {
		var ret []UsageMeteringDailyRecord
		return ret
	}
	return o.UsageMeteringDailyRecords
}

// GetUsageMeteringDailyRecordsOk returns a tuple with the UsageMeteringDailyRecords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListUsageMeteringDailyRecordsResponse) GetUsageMeteringDailyRecordsOk() ([]UsageMeteringDailyRecord, bool) {
	if o == nil || IsNil(o.UsageMeteringDailyRecords) {
		return nil, false
	}
	return o.UsageMeteringDailyRecords, true
}

// HasUsageMeteringDailyRecords returns a boolean if a field has been set.
func (o *ListUsageMeteringDailyRecordsResponse) HasUsageMeteringDailyRecords() bool {
	if o != nil && !IsNil(o.UsageMeteringDailyRecords) {
		return true
	}

	return false
}

// SetUsageMeteringDailyRecords gets a reference to the given []UsageMeteringDailyRecord and assigns it to the UsageMeteringDailyRecords field.
func (o *ListUsageMeteringDailyRecordsResponse) SetUsageMeteringDailyRecords(v []UsageMeteringDailyRecord) {
	o.UsageMeteringDailyRecords = v
}

func (o ListUsageMeteringDailyRecordsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListUsageMeteringDailyRecordsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NextOffset) {
		toSerialize["nextOffset"] = o.NextOffset
	}
	if !IsNil(o.UsageMeteringDailyRecords) {
		toSerialize["usageMeteringDailyRecords"] = o.UsageMeteringDailyRecords
	}
	return toSerialize, nil
}

type NullableListUsageMeteringDailyRecordsResponse struct {
	value *ListUsageMeteringDailyRecordsResponse
	isSet bool
}

func (v NullableListUsageMeteringDailyRecordsResponse) Get() *ListUsageMeteringDailyRecordsResponse {
	return v.value
}

func (v *NullableListUsageMeteringDailyRecordsResponse) Set(val *ListUsageMeteringDailyRecordsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListUsageMeteringDailyRecordsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListUsageMeteringDailyRecordsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListUsageMeteringDailyRecordsResponse(val *ListUsageMeteringDailyRecordsResponse) *NullableListUsageMeteringDailyRecordsResponse {
	return &NullableListUsageMeteringDailyRecordsResponse{value: val, isSet: true}
}

func (v NullableListUsageMeteringDailyRecordsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListUsageMeteringDailyRecordsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
