/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OrbPriceMaximum type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrbPriceMaximum{}

// OrbPriceMaximum struct for OrbPriceMaximum
type OrbPriceMaximum struct {
	// List of price_ids that this maximum amount applies to. For plan/plan phase maximums, this can be a subset of prices.
	AppliesToPriceIds []string `json:"applies_to_price_ids,omitempty"`
	MaximumAmount *string `json:"maximum_amount,omitempty"`
}

// NewOrbPriceMaximum instantiates a new OrbPriceMaximum object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrbPriceMaximum() *OrbPriceMaximum {
	this := OrbPriceMaximum{}
	return &this
}

// NewOrbPriceMaximumWithDefaults instantiates a new OrbPriceMaximum object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrbPriceMaximumWithDefaults() *OrbPriceMaximum {
	this := OrbPriceMaximum{}
	return &this
}

// GetAppliesToPriceIds returns the AppliesToPriceIds field value if set, zero value otherwise.
func (o *OrbPriceMaximum) GetAppliesToPriceIds() []string {
	if o == nil || IsNil(o.AppliesToPriceIds) {
		var ret []string
		return ret
	}
	return o.AppliesToPriceIds
}

// GetAppliesToPriceIdsOk returns a tuple with the AppliesToPriceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPriceMaximum) GetAppliesToPriceIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.AppliesToPriceIds) {
		return nil, false
	}
	return o.AppliesToPriceIds, true
}

// HasAppliesToPriceIds returns a boolean if a field has been set.
func (o *OrbPriceMaximum) HasAppliesToPriceIds() bool {
	if o != nil && !IsNil(o.AppliesToPriceIds) {
		return true
	}

	return false
}

// SetAppliesToPriceIds gets a reference to the given []string and assigns it to the AppliesToPriceIds field.
func (o *OrbPriceMaximum) SetAppliesToPriceIds(v []string) {
	o.AppliesToPriceIds = v
}

// GetMaximumAmount returns the MaximumAmount field value if set, zero value otherwise.
func (o *OrbPriceMaximum) GetMaximumAmount() string {
	if o == nil || IsNil(o.MaximumAmount) {
		var ret string
		return ret
	}
	return *o.MaximumAmount
}

// GetMaximumAmountOk returns a tuple with the MaximumAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrbPriceMaximum) GetMaximumAmountOk() (*string, bool) {
	if o == nil || IsNil(o.MaximumAmount) {
		return nil, false
	}
	return o.MaximumAmount, true
}

// HasMaximumAmount returns a boolean if a field has been set.
func (o *OrbPriceMaximum) HasMaximumAmount() bool {
	if o != nil && !IsNil(o.MaximumAmount) {
		return true
	}

	return false
}

// SetMaximumAmount gets a reference to the given string and assigns it to the MaximumAmount field.
func (o *OrbPriceMaximum) SetMaximumAmount(v string) {
	o.MaximumAmount = &v
}

func (o OrbPriceMaximum) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrbPriceMaximum) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AppliesToPriceIds) {
		toSerialize["applies_to_price_ids"] = o.AppliesToPriceIds
	}
	if !IsNil(o.MaximumAmount) {
		toSerialize["maximum_amount"] = o.MaximumAmount
	}
	return toSerialize, nil
}

type NullableOrbPriceMaximum struct {
	value *OrbPriceMaximum
	isSet bool
}

func (v NullableOrbPriceMaximum) Get() *OrbPriceMaximum {
	return v.value
}

func (v *NullableOrbPriceMaximum) Set(val *OrbPriceMaximum) {
	v.value = val
	v.isSet = true
}

func (v NullableOrbPriceMaximum) IsSet() bool {
	return v.isSet
}

func (v *NullableOrbPriceMaximum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrbPriceMaximum(val *OrbPriceMaximum) *NullableOrbPriceMaximum {
	return &NullableOrbPriceMaximum{value: val, isSet: true}
}

func (v NullableOrbPriceMaximum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrbPriceMaximum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


