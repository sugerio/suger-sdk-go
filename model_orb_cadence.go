/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OrbCadence the model 'OrbCadence'
type OrbCadence string

// List of OrbCadence
const (
	OrbCadence_MONTHLY OrbCadence = "monthly"
	OrbCadence_ANNUAL OrbCadence = "annual"
	OrbCadence_QUARTERLY OrbCadence = "quarterly"
)

// All allowed values of OrbCadence enum
var AllowedOrbCadenceEnumValues = []OrbCadence{
	"monthly",
	"annual",
	"quarterly",
}

func (v *OrbCadence) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrbCadence(value)
	for _, existing := range AllowedOrbCadenceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrbCadence", value)
}

// NewOrbCadenceFromValue returns a pointer to a valid OrbCadence
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrbCadenceFromValue(v string) (*OrbCadence, error) {
	ev := OrbCadence(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrbCadence: valid values are %v", v, AllowedOrbCadenceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrbCadence) IsValid() bool {
	for _, existing := range AllowedOrbCadenceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrbCadence value
func (v OrbCadence) Ptr() *OrbCadence {
	return &v
}

type NullableOrbCadence struct {
	value *OrbCadence
	isSet bool
}

func (v NullableOrbCadence) Get() *OrbCadence {
	return v.value
}

func (v *NullableOrbCadence) Set(val *OrbCadence) {
	v.value = val
	v.isSet = true
}

func (v NullableOrbCadence) IsSet() bool {
	return v.isSet
}

func (v *NullableOrbCadence) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrbCadence(val *OrbCadence) *NullableOrbCadence {
	return &NullableOrbCadence{value: val, isSet: true}
}

func (v NullableOrbCadence) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrbCadence) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

