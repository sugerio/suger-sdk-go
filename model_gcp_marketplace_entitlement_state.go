/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// GcpMarketplaceEntitlementState the model 'GcpMarketplaceEntitlementState'
type GcpMarketplaceEntitlementState string

// List of GcpMarketplaceEntitlementState
const (
	GcpMarketplaceEntitlementState_ENTITLEMENT_STATE_UNSPECIFIED GcpMarketplaceEntitlementState = "ENTITLEMENT_STATE_UNSPECIFIED"
	GcpMarketplaceEntitlementState_ENTITLEMENT_ACTIVATION_REQUESTED GcpMarketplaceEntitlementState = "ENTITLEMENT_ACTIVATION_REQUESTED"
	GcpMarketplaceEntitlementState_ENTITLEMENT_ACTIVE GcpMarketplaceEntitlementState = "ENTITLEMENT_ACTIVE"
	GcpMarketplaceEntitlementState_ENTITLEMENT_PENDING_CANCELLATION GcpMarketplaceEntitlementState = "ENTITLEMENT_PENDING_CANCELLATION"
	GcpMarketplaceEntitlementState_ENTITLEMENT_CANCELLED GcpMarketplaceEntitlementState = "ENTITLEMENT_CANCELLED"
	GcpMarketplaceEntitlementState_ENTITLEMENT_PENDING_PLAN_CHANGE GcpMarketplaceEntitlementState = "ENTITLEMENT_PENDING_PLAN_CHANGE"
	GcpMarketplaceEntitlementState_ENTITLEMENT_PENDING_PLAN_CHANGE_APPROVAL GcpMarketplaceEntitlementState = "ENTITLEMENT_PENDING_PLAN_CHANGE_APPROVAL"
	GcpMarketplaceEntitlementState_ENTITLEMENT_SUSPENDED GcpMarketplaceEntitlementState = "ENTITLEMENT_SUSPENDED"
)

// All allowed values of GcpMarketplaceEntitlementState enum
var AllowedGcpMarketplaceEntitlementStateEnumValues = []GcpMarketplaceEntitlementState{
	"ENTITLEMENT_STATE_UNSPECIFIED",
	"ENTITLEMENT_ACTIVATION_REQUESTED",
	"ENTITLEMENT_ACTIVE",
	"ENTITLEMENT_PENDING_CANCELLATION",
	"ENTITLEMENT_CANCELLED",
	"ENTITLEMENT_PENDING_PLAN_CHANGE",
	"ENTITLEMENT_PENDING_PLAN_CHANGE_APPROVAL",
	"ENTITLEMENT_SUSPENDED",
}

func (v *GcpMarketplaceEntitlementState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GcpMarketplaceEntitlementState(value)
	for _, existing := range AllowedGcpMarketplaceEntitlementStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GcpMarketplaceEntitlementState", value)
}

// NewGcpMarketplaceEntitlementStateFromValue returns a pointer to a valid GcpMarketplaceEntitlementState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGcpMarketplaceEntitlementStateFromValue(v string) (*GcpMarketplaceEntitlementState, error) {
	ev := GcpMarketplaceEntitlementState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GcpMarketplaceEntitlementState: valid values are %v", v, AllowedGcpMarketplaceEntitlementStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GcpMarketplaceEntitlementState) IsValid() bool {
	for _, existing := range AllowedGcpMarketplaceEntitlementStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GcpMarketplaceEntitlementState value
func (v GcpMarketplaceEntitlementState) Ptr() *GcpMarketplaceEntitlementState {
	return &v
}

type NullableGcpMarketplaceEntitlementState struct {
	value *GcpMarketplaceEntitlementState
	isSet bool
}

func (v NullableGcpMarketplaceEntitlementState) Get() *GcpMarketplaceEntitlementState {
	return v.value
}

func (v *NullableGcpMarketplaceEntitlementState) Set(val *GcpMarketplaceEntitlementState) {
	v.value = val
	v.isSet = true
}

func (v NullableGcpMarketplaceEntitlementState) IsSet() bool {
	return v.isSet
}

func (v *NullableGcpMarketplaceEntitlementState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGcpMarketplaceEntitlementState(val *GcpMarketplaceEntitlementState) *NullableGcpMarketplaceEntitlementState {
	return &NullableGcpMarketplaceEntitlementState{value: val, isSet: true}
}

func (v NullableGcpMarketplaceEntitlementState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGcpMarketplaceEntitlementState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

