/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the DivideEntitlementCommitParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DivideEntitlementCommitParams{}

// DivideEntitlementCommitParams struct for DivideEntitlementCommitParams
type DivideEntitlementCommitParams struct {
	// The amount of the commit to be divided. If it is less or equal to 0.0, the total commit of the entitlement will be divided into multiple sub entitlement terms with credit.
	CommitAmount *float32 `json:"commitAmount,omitempty"`
	// The start dates of the sub entitlement terms. The end date of the last sub entitlement term is the end date of the parent entitlement term. The first start date must be the same as the start date of the parent entitlement term.
	StartDates []time.Time `json:"startDates,omitempty"`
}

// NewDivideEntitlementCommitParams instantiates a new DivideEntitlementCommitParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDivideEntitlementCommitParams() *DivideEntitlementCommitParams {
	this := DivideEntitlementCommitParams{}
	return &this
}

// NewDivideEntitlementCommitParamsWithDefaults instantiates a new DivideEntitlementCommitParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDivideEntitlementCommitParamsWithDefaults() *DivideEntitlementCommitParams {
	this := DivideEntitlementCommitParams{}
	return &this
}

// GetCommitAmount returns the CommitAmount field value if set, zero value otherwise.
func (o *DivideEntitlementCommitParams) GetCommitAmount() float32 {
	if o == nil || IsNil(o.CommitAmount) {
		var ret float32
		return ret
	}
	return *o.CommitAmount
}

// GetCommitAmountOk returns a tuple with the CommitAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DivideEntitlementCommitParams) GetCommitAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.CommitAmount) {
		return nil, false
	}
	return o.CommitAmount, true
}

// HasCommitAmount returns a boolean if a field has been set.
func (o *DivideEntitlementCommitParams) HasCommitAmount() bool {
	if o != nil && !IsNil(o.CommitAmount) {
		return true
	}

	return false
}

// SetCommitAmount gets a reference to the given float32 and assigns it to the CommitAmount field.
func (o *DivideEntitlementCommitParams) SetCommitAmount(v float32) {
	o.CommitAmount = &v
}

// GetStartDates returns the StartDates field value if set, zero value otherwise.
func (o *DivideEntitlementCommitParams) GetStartDates() []time.Time {
	if o == nil || IsNil(o.StartDates) {
		var ret []time.Time
		return ret
	}
	return o.StartDates
}

// GetStartDatesOk returns a tuple with the StartDates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DivideEntitlementCommitParams) GetStartDatesOk() ([]time.Time, bool) {
	if o == nil || IsNil(o.StartDates) {
		return nil, false
	}
	return o.StartDates, true
}

// HasStartDates returns a boolean if a field has been set.
func (o *DivideEntitlementCommitParams) HasStartDates() bool {
	if o != nil && !IsNil(o.StartDates) {
		return true
	}

	return false
}

// SetStartDates gets a reference to the given []time.Time and assigns it to the StartDates field.
func (o *DivideEntitlementCommitParams) SetStartDates(v []time.Time) {
	o.StartDates = v
}

func (o DivideEntitlementCommitParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DivideEntitlementCommitParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CommitAmount) {
		toSerialize["commitAmount"] = o.CommitAmount
	}
	if !IsNil(o.StartDates) {
		toSerialize["startDates"] = o.StartDates
	}
	return toSerialize, nil
}

type NullableDivideEntitlementCommitParams struct {
	value *DivideEntitlementCommitParams
	isSet bool
}

func (v NullableDivideEntitlementCommitParams) Get() *DivideEntitlementCommitParams {
	return v.value
}

func (v *NullableDivideEntitlementCommitParams) Set(val *DivideEntitlementCommitParams) {
	v.value = val
	v.isSet = true
}

func (v NullableDivideEntitlementCommitParams) IsSet() bool {
	return v.isSet
}

func (v *NullableDivideEntitlementCommitParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDivideEntitlementCommitParams(val *DivideEntitlementCommitParams) *NullableDivideEntitlementCommitParams {
	return &NullableDivideEntitlementCommitParams{value: val, isSet: true}
}

func (v NullableDivideEntitlementCommitParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDivideEntitlementCommitParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


