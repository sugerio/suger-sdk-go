/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// GcpMarketplaceProductAccessState the model 'GcpMarketplaceProductAccessState'
type GcpMarketplaceProductAccessState string

// List of GcpMarketplaceProductAccessState
const (
	GcpMarketplaceProductAccessState_ALLUSERS_ACCESSIBLE GcpMarketplaceProductAccessState = "ALLUSERS_ACCESSIBLE"
	GcpMarketplaceProductAccessState_NOT_ALLUSERS_ACCESSIBLE GcpMarketplaceProductAccessState = "NOT_ALLUSERS_ACCESSIBLE"
	GcpMarketplaceProductAccessState_NOT_PUBLISHED GcpMarketplaceProductAccessState = "NOT_PUBLISHED"
)

// All allowed values of GcpMarketplaceProductAccessState enum
var AllowedGcpMarketplaceProductAccessStateEnumValues = []GcpMarketplaceProductAccessState{
	"ALLUSERS_ACCESSIBLE",
	"NOT_ALLUSERS_ACCESSIBLE",
	"NOT_PUBLISHED",
}

func (v *GcpMarketplaceProductAccessState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GcpMarketplaceProductAccessState(value)
	for _, existing := range AllowedGcpMarketplaceProductAccessStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GcpMarketplaceProductAccessState", value)
}

// NewGcpMarketplaceProductAccessStateFromValue returns a pointer to a valid GcpMarketplaceProductAccessState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGcpMarketplaceProductAccessStateFromValue(v string) (*GcpMarketplaceProductAccessState, error) {
	ev := GcpMarketplaceProductAccessState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GcpMarketplaceProductAccessState: valid values are %v", v, AllowedGcpMarketplaceProductAccessStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GcpMarketplaceProductAccessState) IsValid() bool {
	for _, existing := range AllowedGcpMarketplaceProductAccessStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GcpMarketplaceProductAccessState value
func (v GcpMarketplaceProductAccessState) Ptr() *GcpMarketplaceProductAccessState {
	return &v
}

type NullableGcpMarketplaceProductAccessState struct {
	value *GcpMarketplaceProductAccessState
	isSet bool
}

func (v NullableGcpMarketplaceProductAccessState) Get() *GcpMarketplaceProductAccessState {
	return v.value
}

func (v *NullableGcpMarketplaceProductAccessState) Set(val *GcpMarketplaceProductAccessState) {
	v.value = val
	v.isSet = true
}

func (v NullableGcpMarketplaceProductAccessState) IsSet() bool {
	return v.isSet
}

func (v *NullableGcpMarketplaceProductAccessState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGcpMarketplaceProductAccessState(val *GcpMarketplaceProductAccessState) *NullableGcpMarketplaceProductAccessState {
	return &NullableGcpMarketplaceProductAccessState{value: val, isSet: true}
}

func (v NullableGcpMarketplaceProductAccessState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGcpMarketplaceProductAccessState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

