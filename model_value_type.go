/*
Suger API

CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.

API version: 1.0
Contact: support@suger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ValueType the model 'ValueType'
type ValueType string

// List of ValueType
const (
	ValueType_UNSPECIFIED ValueType = "VALUE_TYPE_UNSPECIFIED"
	ValueType_BOOL ValueType = "BOOL"
	ValueType_INT64 ValueType = "INT64"
	ValueType_DOUBLE ValueType = "DOUBLE"
	ValueType_STRING ValueType = "STRING"
	ValueType_DISTRIBUTION ValueType = "DISTRIBUTION"
	ValueType_MONEY ValueType = "MONEY"
)

// All allowed values of ValueType enum
var AllowedValueTypeEnumValues = []ValueType{
	"VALUE_TYPE_UNSPECIFIED",
	"BOOL",
	"INT64",
	"DOUBLE",
	"STRING",
	"DISTRIBUTION",
	"MONEY",
}

func (v *ValueType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ValueType(value)
	for _, existing := range AllowedValueTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ValueType", value)
}

// NewValueTypeFromValue returns a pointer to a valid ValueType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewValueTypeFromValue(v string) (*ValueType, error) {
	ev := ValueType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ValueType: valid values are %v", v, AllowedValueTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ValueType) IsValid() bool {
	for _, existing := range AllowedValueTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ValueType value
func (v ValueType) Ptr() *ValueType {
	return &v
}

type NullableValueType struct {
	value *ValueType
	isSet bool
}

func (v NullableValueType) Get() *ValueType {
	return v.value
}

func (v *NullableValueType) Set(val *ValueType) {
	v.value = val
	v.isSet = true
}

func (v NullableValueType) IsSet() bool {
	return v.isSet
}

func (v *NullableValueType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValueType(val *ValueType) *NullableValueType {
	return &NullableValueType{value: val, isSet: true}
}

func (v NullableValueType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValueType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

